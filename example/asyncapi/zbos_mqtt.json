{
  "asyncapi" : "2.0.0",
  "id" : "urn:zbos-mqtt-api",
  "defaultContentType" : "application/json",
  "info" : {
    "title" : "ZBOS MQTT API",
    "version" : "2.9.1",
    "description" : "API for communication with ZBOS by Zora Robotics.",
    "contact" : {
      "email" : "info@zorarobotics.be"
    }
  },
  "servers" : {
    "local" : {
      "url" : "127.0.0.1",
      "protocol" : "mqtt",
      "description" : "This is the local robot broker.",
      "variables" : {
        "port" : {
          "enum" : [ "1883", "9001" ],
          "default" : "1883"
        }
      }
    },
    "cloud" : {
      "url" : "zbos-mqtt.zoracloud.com",
      "protocol" : "mqtt",
      "description" : "This is the cloud broker.",
      "variables" : {
        "port" : {
          "enum" : [ "1883", "1884", "9001", "9002" ]
        }
      }
    }
  },
  "channels" : {
    "zbos/applications/categories/get" : {
      "publish" : {
        "summary" : "Get application categories",
        "description" : "Get all application categories.\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "language" : {
                "description" : "Optional. Set the language to have all translations filled in.\nThe language format is ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              }
            }
          },
          "name" : "GetApplicationCategoriesRequest"
        }
      }
    },
    "zbos/applications/categories/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: Get application categories",
        "description" : "",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "description" : "Use name for a static name, or name_key for a translatable name",
                  "type" : "string"
                },
                "name_key" : {
                  "description" : "Use name for a static name, or name_key for a translatable name",
                  "type" : "string"
                },
                "weight" : {
                  "type" : "integer"
                }
              }
            }
          },
          "name" : "Array<ApplicationCategory>",
          "examples" : [ {
            "payload" : [ {
              "id" : "category_1",
              "name" : "Category 1",
              "weight" : 10
            }, {
              "id" : "category_2",
              "weight" : 20,
              "name_key" : "category_2_key"
            } ]
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/applications/apps/get" : {
      "publish" : {
        "summary" : "Get applications",
        "description" : "Get all applications with optional filters.\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "limit" : {
                "type" : "integer"
              },
              "offset" : {
                "type" : "integer"
              },
              "filters" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "field" : {
                      "description" : "Field to check on. Note that the field should be camelCase, not snake_case",
                      "type" : "string"
                    },
                    "value" : {
                      "description" : "Value to check on. For numbers you should use 'min' and 'max'.",
                      "type" : "string"
                    },
                    "min" : {
                      "description" : "Minimum value, only usable for number fields",
                      "type" : "number"
                    },
                    "max" : {
                      "description" : "Maximum value, only usable for number fields",
                      "type" : "number"
                    },
                    "direction" : {
                      "description" : "Direction to sort on.\nCan be 'asc' or 'desc'.\nThe default direction is 'asc'",
                      "type" : "string",
                      "enum" : [ "asc", "desc" ]
                    },
                    "operator" : {
                      "description" : "Operator for either the child filters, or this filter object itself.\nCan be 'and', 'or' or 'not'.\nDefault is 'and'.\nThe root operator is always 'and'",
                      "type" : "string",
                      "enum" : [ "and", "or", "not" ]
                    },
                    "match_type" : {
                      "description" : "Match type for string values.\nCan be 'exact', 'contains', 'starts_with', 'ends_with'.\nThe default match_type is 'contains'",
                      "type" : "string",
                      "enum" : [ "exact", "contains", "starts_with", "ends_with" ]
                    },
                    "filters" : {
                      "description" : "Filters on which the operator will be applied.\nIf there are no child filters, the operator will be applied to the filter object itself.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "field_filters" : {
                      "description" : "Filters to apply on the child fields of the field.\nWill only work if the field is an object, array/list or map.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                }
              },
              "language" : {
                "description" : "Optional. Set the language to have all translations filled in.\nThe language format is ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              }
            }
          },
          "name" : "GetApplicationsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "limit" : 20,
              "offset" : 20,
              "filters" : [ {
                "field" : "category_id",
                "value" : "category_1",
                "operator" : "and",
                "match_type" : "exact"
              } ]
            }
          } ]
        }
      }
    },
    "zbos/applications/apps/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: Get applications",
        "description" : "",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "This could be a package name, or some other defined unique ID",
                  "type" : "string"
                },
                "name" : {
                  "description" : "Use name for a static name, or name_key for a translatable name",
                  "type" : "string"
                },
                "name_key" : {
                  "description" : "Use name for a static name, or name_key for a translatable name",
                  "type" : "string"
                },
                "category_id" : {
                  "type" : "string"
                },
                "weight" : {
                  "type" : "integer"
                },
                "actions" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "application_id" : {
                        "type" : "string"
                      },
                      "name" : {
                        "description" : "Use name for a static name, or name_key for a translatable name",
                        "type" : "string"
                      },
                      "name_key" : {
                        "description" : "Use name for a static name, or name_key for a translatable name",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "List of available actions:\nopen: Opens an application handled by the RAILopen_control: Opens an application handled by the control\nsettings: Opens the settings, handled by the control\ndatasource: Edit the datasource, handled by the control\nother: Should be handled by the app itself",
                        "type" : "string",
                        "enum" : [ "open", "open_control", "settings", "datasources", "other" ]
                      },
                      "data" : {
                        "description" : "Optional data that an action might need.",
                        "type" : "object"
                      },
                      "key" : {
                        "type" : "string"
                      }
                    }
                  }
                },
                "optional" : {
                  "description" : "Adds this application to the list of optional apps, which determines if the app is shown to the user",
                  "type" : "boolean"
                },
                "icon_uri" : {
                  "description" : "The path to an image on the robot or the url to an image",
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<Application>",
          "examples" : [ {
            "payload" : [ {
              "id" : "com.zorabots.application.one",
              "name" : "Application 1",
              "weight" : 10,
              "actions" : [ {
                "name" : "Open",
                "type" : "open",
                "data" : {
                  "key1" : "value1"
                },
                "valid" : true,
                "application_id" : "com.zorabots.application.one"
              }, {
                "name" : "Settings",
                "type" : "settings",
                "valid" : true,
                "application_id" : "com.zorabots.application.one"
              }, {
                "name" : "Datasource",
                "type" : "datasources",
                "valid" : true,
                "application_id" : "com.zorabots.application.one"
              } ],
              "optional" : false,
              "category_id" : "category_1"
            }, {
              "id" : "com.zorabots.application.two",
              "weight" : 20,
              "actions" : [ {
                "type" : "open",
                "data" : {
                  "key1" : "value1"
                },
                "valid" : true,
                "application_id" : "com.zorabots.application.two",
                "name_key" : "Open"
              }, {
                "name" : "Some other action",
                "type" : "other",
                "data" : {
                  "key1" : "value1"
                },
                "valid" : true,
                "application_id" : "com.zorabots.application.two"
              } ],
              "optional" : false,
              "name_key" : "application_2_key",
              "category_id" : "category_1"
            } ]
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/applications/apps/changed/event/{app}" : {
      "publish" : {
        "summary" : "Application changed",
        "description" : "Fired when an app was added or changed.\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "description" : "This could be a package name, or some other defined unique ID",
                "type" : "string"
              },
              "name" : {
                "description" : "Use name for a static name, or name_key for a translatable name",
                "type" : "string"
              },
              "name_key" : {
                "description" : "Use name for a static name, or name_key for a translatable name",
                "type" : "string"
              },
              "category_id" : {
                "type" : "string"
              },
              "weight" : {
                "type" : "integer"
              },
              "actions" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "application_id" : {
                      "type" : "string"
                    },
                    "name" : {
                      "description" : "Use name for a static name, or name_key for a translatable name",
                      "type" : "string"
                    },
                    "name_key" : {
                      "description" : "Use name for a static name, or name_key for a translatable name",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "List of available actions:\nopen: Opens an application handled by the RAILopen_control: Opens an application handled by the control\nsettings: Opens the settings, handled by the control\ndatasource: Edit the datasource, handled by the control\nother: Should be handled by the app itself",
                      "type" : "string",
                      "enum" : [ "open", "open_control", "settings", "datasources", "other" ]
                    },
                    "data" : {
                      "description" : "Optional data that an action might need.",
                      "type" : "object"
                    },
                    "key" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "optional" : {
                "description" : "Adds this application to the list of optional apps, which determines if the app is shown to the user",
                "type" : "boolean"
              },
              "icon_uri" : {
                "description" : "The path to an image on the robot or the url to an image",
                "type" : "string"
              }
            }
          },
          "name" : "Application",
          "examples" : [ {
            "payload" : {
              "id" : "com.zorabots.application.one",
              "name" : "Application 1",
              "weight" : 10,
              "actions" : [ {
                "name" : "Open",
                "type" : "open",
                "data" : {
                  "key1" : "value1"
                },
                "valid" : true,
                "application_id" : "com.zorabots.application.one"
              }, {
                "name" : "Settings",
                "type" : "settings",
                "valid" : true,
                "application_id" : "com.zorabots.application.one"
              }, {
                "name" : "Datasource",
                "type" : "datasources",
                "valid" : true,
                "application_id" : "com.zorabots.application.one"
              } ],
              "optional" : false,
              "category_id" : "category_1"
            }
          } ]
        }
      },
      "parameters" : {
        "app" : {
          "description" : "ID of the app that was changed",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/applications/icons/get" : {
      "publish" : {
        "summary" : "Get application icon",
        "description" : "Get the application icons for the passed application ID.\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "max_width" : {
                "description" : "Optional, can be used to decrease payload size",
                "type" : "integer"
              },
              "max_height" : {
                "description" : "Optional, can be used to decrease payload size",
                "type" : "integer"
              },
              "application_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "GetApplicationIconRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "valid" : true,
              "max_width" : 100,
              "max_height" : 100,
              "application_id" : "com.zorabots.application.one"
            }
          } ]
        }
      }
    },
    "zbos/applications/icons/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: Get application icon",
        "description" : "",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "application_id" : {
                "type" : "string"
              },
              "icon" : {
                "description" : "Base 64 encoded PNG",
                "type" : "string"
              }
            }
          },
          "name" : "ApplicationIcon",
          "examples" : [ {
            "payload" : {
              "icon" : "{base64 encoded png}",
              "application_id" : "com.zorabots.application.one"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/applications/actions/start" : {
      "publish" : {
        "summary" : "Start application action",
        "description" : "Start an application action.\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "application_id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "Use name for a static name, or name_key for a translatable name",
                "type" : "string"
              },
              "name_key" : {
                "description" : "Use name for a static name, or name_key for a translatable name",
                "type" : "string"
              },
              "type" : {
                "description" : "List of available actions:\nopen: Opens an application handled by the RAILopen_control: Opens an application handled by the control\nsettings: Opens the settings, handled by the control\ndatasource: Edit the datasource, handled by the control\nother: Should be handled by the app itself",
                "type" : "string",
                "enum" : [ "open", "open_control", "settings", "datasources", "other" ]
              },
              "data" : {
                "description" : "Optional data that an action might need.",
                "type" : "object"
              },
              "key" : {
                "type" : "string"
              }
            }
          },
          "name" : "ApplicationAction",
          "examples" : [ {
            "payload" : {
              "name" : "Open",
              "type" : "open",
              "data" : {
                "key1" : "value1"
              },
              "key" : "some_key",
              "valid" : true,
              "application_id" : "com.zorabots.application.one"
            }
          }, {
            "payload" : {
              "name" : "Settings",
              "type" : "settings",
              "key" : "some_key",
              "valid" : true,
              "application_id" : "com.zorabots.application.one"
            }
          }, {
            "payload" : {
              "name" : "Datasource",
              "type" : "datasources",
              "key" : "some_key",
              "valid" : true,
              "application_id" : "com.zorabots.application.one"
            }
          }, {
            "payload" : {
              "name" : "Some other action",
              "type" : "other",
              "data" : {
                "key1" : "value1"
              },
              "key" : "some_key",
              "valid" : true,
              "application_id" : "com.zorabots.application.one"
            }
          } ]
        }
      }
    },
    "zbos/applications/actions/start/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: Start application action",
        "description" : "",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/applications/registration/request" : {
      "publish" : {
        "summary" : "Request application registrations",
        "description" : "Request all apps to register themselves using the topics below.\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/applications/registration/add" : {
      "publish" : {
        "summary" : "Add application registration",
        "description" : "Registers an application to the applications list. Should be executed every time the application is started.\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "application" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "description" : "This could be a package name, or some other defined unique ID",
                    "type" : "string"
                  },
                  "name" : {
                    "description" : "Use name for a static name, or name_key for a translatable name",
                    "type" : "string"
                  },
                  "name_key" : {
                    "description" : "Use name for a static name, or name_key for a translatable name",
                    "type" : "string"
                  },
                  "category_id" : {
                    "type" : "string"
                  },
                  "weight" : {
                    "type" : "integer"
                  },
                  "actions" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "application_id" : {
                          "type" : "string"
                        },
                        "name" : {
                          "description" : "Use name for a static name, or name_key for a translatable name",
                          "type" : "string"
                        },
                        "name_key" : {
                          "description" : "Use name for a static name, or name_key for a translatable name",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "List of available actions:\nopen: Opens an application handled by the RAILopen_control: Opens an application handled by the control\nsettings: Opens the settings, handled by the control\ndatasource: Edit the datasource, handled by the control\nother: Should be handled by the app itself",
                          "type" : "string",
                          "enum" : [ "open", "open_control", "settings", "datasources", "other" ]
                        },
                        "data" : {
                          "description" : "Optional data that an action might need.",
                          "type" : "object"
                        },
                        "key" : {
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "optional" : {
                    "description" : "Adds this application to the list of optional apps, which determines if the app is shown to the user",
                    "type" : "boolean"
                  },
                  "icon_uri" : {
                    "description" : "The path to an image on the robot or the url to an image",
                    "type" : "string"
                  }
                }
              }
            }
          },
          "name" : "RegisterApplicationRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "application" : {
                "id" : "com.zorabots.application.one",
                "name" : "Application 1",
                "weight" : 10,
                "actions" : [ {
                  "name" : "Open",
                  "type" : "open",
                  "data" : {
                    "key1" : "value1"
                  },
                  "valid" : true,
                  "application_id" : "com.zorabots.application.one"
                }, {
                  "name" : "Settings",
                  "type" : "settings",
                  "valid" : true,
                  "application_id" : "com.zorabots.application.one"
                } ],
                "optional" : false,
                "category_id" : "category_1",
                "icon_uri" : "/sdcard/zbos_media_library/background.jpg"
              },
              "valid" : true
            }
          }, {
            "payload" : {
              "key" : "def",
              "application" : {
                "id" : "com.zorabots.application.two",
                "name" : "Application 2",
                "weight" : 20,
                "actions" : [ {
                  "name" : "Open",
                  "type" : "open",
                  "data" : {
                    "key1" : "value1"
                  },
                  "valid" : true,
                  "application_id" : "com.zorabots.application.two"
                }, {
                  "name" : "Settings",
                  "type" : "settings",
                  "valid" : true,
                  "application_id" : "com.zorabots.application.two"
                } ],
                "optional" : false,
                "category_id" : "category_1",
                "icon_uri" : "https://www.zorarobotics.be/sites/default/files/styles/desktop_fixed_height_1x/public/2020-05/zorabots-robot-james-web.png?itok=5kw5HYOg"
              },
              "valid" : true
            }
          }, {
            "payload" : {
              "key" : "ghi",
              "application" : {
                "id" : "com.zorabots.application.three",
                "name" : "Application 3",
                "weight" : 30,
                "actions" : [ {
                  "name" : "Open",
                  "type" : "open",
                  "data" : {
                    "key1" : "value1"
                  },
                  "valid" : true,
                  "application_id" : "com.zorabots.application.three"
                }, {
                  "name" : "Settings",
                  "type" : "settings",
                  "valid" : true,
                  "application_id" : "com.zorabots.application.three"
                } ],
                "optional" : false,
                "category_id" : "category_1"
              },
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/applications/registration/add/response/{key}" : {
      "publish" : {
        "summary" : "Response: Add application registration",
        "description" : "",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/applications/registration/remove" : {
      "publish" : {
        "summary" : "Remove application registration",
        "description" : "Unregister an application from the applications list.\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              }
            }
          },
          "name" : "UnregisterApplicationRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "com.zorabots.application.one",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/applications/registration/remove/response/{key}" : {
      "publish" : {
        "summary" : "Response: Remove application registration",
        "description" : "",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/applications/datasources/get" : {
      "publish" : {
        "summary" : "Get the content of a specific application datasource file",
        "description" : "Publish on this topic to get the content of a datasource\nPayload is json with a key for the response topic {\"key\":aKey}\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "applicationName" : {
                "type" : "string"
              },
              "datasourceId" : {
                "type" : "string"
              }
            }
          },
          "name" : "DatasourceGetRequest",
          "examples" : [ {
            "payload" : {
              "applicationName" : "string",
              "datasourceId" : "string",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/applications/datasources/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: Get datasource",
        "description" : "Will return a JSON string with the content of the datasource data file\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/applications/datasources/set" : {
      "publish" : {
        "summary" : "Save the datasource",
        "description" : "Publish on this topic to save the datasource data (changes)\nPayload is json with a key for the response topic {\"key\":aKey}\nThe Payload is a JSON string of an object with following keys: application name, datasource id and datasource data\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "applicationName" : {
                "type" : "string"
              },
              "datasourceId" : {
                "type" : "string"
              },
              "datasourceData" : {
                "type" : "string"
              }
            }
          },
          "name" : "DatasourceSetRequest",
          "examples" : [ {
            "payload" : {
              "applicationName" : "string",
              "datasourceId" : "string",
              "datasourceData" : "string",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/applications/datasources/set/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: Datasource saved",
        "description" : "A message object (with key 'success') is publish on this topic when the datasource has been saved\n",
        "tags" : [ {
          "name" : "Applications",
          "description" : "All applications related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/audio/player/start" : {
      "publish" : {
        "summary" : "Play media",
        "description" : "Play specific media from audio options\n",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "requestId" : {
                "type" : "string"
              },
              "url" : {
                "type" : "string"
              },
              "loop" : {
                "type" : "boolean"
              },
              "randomRequestId" : {
                "type" : "string"
              }
            }
          },
          "name" : "AudioOptions",
          "examples" : [ {
            "payload" : {
              "requestId" : "1",
              "url" : "Url",
              "loop" : true
            }
          } ]
        }
      }
    },
    "zbos/audio/player/stop" : {
      "publish" : {
        "summary" : "Stop media",
        "description" : "",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/audio/player/ended" : {
      "subscribe" : {
        "summary" : "Media ended",
        "description" : "",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : {
              "requestId" : "1",
              "url" : "Url"
            }
          } ]
        }
      }
    },
    "zbos/audio/player/pause" : {
      "publish" : {
        "summary" : "Pause media",
        "description" : "",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/audio/player/resume" : {
      "publish" : {
        "summary" : "Resume media",
        "description" : "",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/audio/volume/set" : {
      "publish" : {
        "summary" : "Set volume",
        "description" : "",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "integer",
            "maximum" : 100,
            "minimum" : 0
          },
          "name" : "Int"
        }
      }
    },
    "zbos/audio/volume/get" : {
      "publish" : {
        "summary" : "Get volume",
        "description" : "see <<zbos/audio/volume/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/audio/volume/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get volume",
        "description" : "",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "integer",
            "maximum" : 100,
            "minimum" : 0
          },
          "name" : "Int"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/audio/volume/event" : {
      "subscribe" : {
        "summary" : "event: Volume change",
        "description" : "Notify subscribers of a volume change.\n",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "integer",
            "maximum" : 100,
            "minimum" : 0
          },
          "name" : "Int"
        }
      }
    },
    "zbos/audio/beep" : {
      "publish" : {
        "summary" : "Play beep",
        "description" : "Publish to play a beep sound. Used by the robot when the hot word is recognized.\n",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/audio/microphone/release" : {
      "publish" : {
        "summary" : "Release the microphone",
        "description" : "Request the microphone to be released from use by third-party apps.\n",
        "tags" : [ {
          "name" : "Audio",
          "description" : "All audio related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/camera/picture/get" : {
      "publish" : {
        "summary" : "Get picture",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/camera/picture/event" : {
      "subscribe" : {
        "summary" : "event: Get picture",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/camera/picture/save" : {
      "publish" : {
        "summary" : "Take a picture and save it to storage",
        "description" : "see <<zbos/camera/picture/save/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/camera/picture/save/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Take a picture and save it to storage",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "storage_path" : {
                "description" : "The path where the image was stored",
                "type" : "string"
              }
            }
          },
          "name" : "PictureSaveResponse",
          "examples" : [ {
            "payload" : {
              "storage_path" : "/sdcard/zbos_media_library/image1.png"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/camera/stream/start" : {
      "publish" : {
        "summary" : "Start the camera stream of the selected camera.",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "cameraId" : {
                "description" : "Camera id",
                "type" : "string"
              },
              "extras" : {
                "type" : "object"
              }
            }
          },
          "name" : "StreamStartRequest",
          "examples" : [ {
            "payload" : {
              "cameraId" : "string",
              "extras" : { }
            }
          } ]
        }
      }
    },
    "zbos/camera/stream/stop" : {
      "publish" : {
        "summary" : "Stop camera stream",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "requestId" : {
                "type" : "string"
              },
              "cameraId" : {
                "description" : "camera id",
                "type" : "string"
              }
            }
          },
          "name" : "VideoOptions",
          "examples" : [ {
            "payload" : {
              "requestId" : "string",
              "cameraId" : "string"
            }
          } ]
        }
      }
    },
    "zbos/camera/stream/stop/event" : {
      "subscribe" : {
        "summary" : "Camera stream has stopped",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/camera/stream/init" : {
      "publish" : {
        "summary" : "Initialize camera stream",
        "description" : "Send by the robot to start the webrtc handshake\n",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/camera/stream/offer" : {
      "description" : "WebRTC Session Description",
      "publish" : {
        "summary" : "Handsake offer for camera stream",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/camera/stream/answer" : {
      "description" : "WebRTC Session Description",
      "subscribe" : {
        "summary" : "Handsake answer for camera stream",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "enum" : [ "OFFER", "PRANSWER", "ANSWER" ]
              },
              "sdp" : {
                "type" : "string"
              }
            }
          },
          "name" : "StreamAnswer",
          "examples" : [ {
            "payload" : {
              "type" : "ANSWER",
              "sdp" : "string"
            }
          } ]
        }
      }
    },
    "zbos/camera/stream/candidate/core" : {
      "description" : "WebRTC Session Description",
      "subscribe" : {
        "summary" : "RTC ICE Candidate Core",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "cameraId" : {
                "description" : "camera id",
                "type" : "string"
              },
              "type" : {
                "description" : "Always returns \"candidate\"",
                "type" : "string"
              },
              "label" : {
                "description" : "sdpMLineIndex",
                "type" : "integer"
              },
              "id" : {
                "description" : "sdpMid",
                "type" : "string"
              },
              "candidate" : {
                "type" : "string"
              }
            }
          },
          "name" : "Candidate",
          "examples" : [ {
            "payload" : {
              "cameraId" : "string",
              "type" : "string",
              "label" : 5,
              "id" : "string",
              "candidate" : "string"
            }
          } ]
        }
      }
    },
    "zbos/camera/stream/candidate/control" : {
      "subscribe" : {
        "summary" : "RTC ICE Candidate Control",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "cameraId" : {
                "description" : "camera id",
                "type" : "string"
              },
              "type" : {
                "description" : "Always returns \"candidate\"",
                "type" : "string"
              },
              "label" : {
                "description" : "sdpMLineIndex",
                "type" : "integer"
              },
              "id" : {
                "description" : "sdpMid",
                "type" : "string"
              },
              "candidate" : {
                "type" : "string"
              }
            }
          },
          "name" : "Candidate",
          "examples" : [ {
            "payload" : {
              "cameraId" : "string",
              "type" : "string",
              "label" : 5,
              "id" : "string",
              "candidate" : "string"
            }
          } ]
        }
      }
    },
    "zbos/camera/stream/twoway/request" : {
      "publish" : {
        "summary" : "Request two way camera stream",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/camera/preview/resume" : {
      "publish" : {
        "summary" : "Resume camera preview",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/camera/preview/pause" : {
      "publish" : {
        "summary" : "Pause camera preview",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/camera/error" : {
      "publish" : {
        "summary" : "Camera error",
        "description" : "",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/camera/qr/scan/start" : {
      "publish" : {
        "summary" : "Start QR Scanning",
        "description" : "Start a QR code scan using the camera.\n",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "scan_id" : {
                "description" : "Unique ID that will be used in related topics.",
                "type" : "string"
              },
              "scan_timeout" : {
                "description" : "Timeout in seconds after which the scan should automatically be stopped.\nPass 0 to not have a timeout. 0 is also the default when no value was passed.",
                "type" : "integer"
              }
            }
          },
          "name" : "QrScanStartRequest",
          "examples" : [ {
            "payload" : {
              "scan_id" : "abc",
              "scan_timeout" : 60
            }
          }, {
            "payload" : {
              "scan_id" : "xyz",
              "scan_timeout" : 0
            }
          } ]
        }
      }
    },
    "zbos/camera/qr/scan/stop" : {
      "publish" : {
        "summary" : "Stop QR Scanning",
        "description" : "Stop a QR code scan using the camera.\n",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "scan_id" : {
                "description" : "Unique ID that should be the same as the one used in the start request.",
                "type" : "string"
              }
            }
          },
          "name" : "QrScanStopRequest",
          "examples" : [ {
            "payload" : {
              "scan_id" : "abc"
            }
          } ]
        }
      }
    },
    "zbos/camera/qr/scan/stopped/event" : {
      "subscribe" : {
        "summary" : "Event: Stopped QR scanning",
        "description" : "This event is published when a QR scan has stopped, either manually or due to a timeout.\n",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "scan_id" : {
                "description" : "Unique ID that will be the same as the one used in the start request.",
                "type" : "string"
              }
            }
          },
          "name" : "QrScanStoppedEvent",
          "examples" : [ {
            "payload" : {
              "scan_id" : "abc"
            }
          } ]
        }
      }
    },
    "zbos/camera/qr/result/event" : {
      "subscribe" : {
        "summary" : "QR Result Event",
        "description" : "This event is published every time a QR code is decoded while a scan is active.\n",
        "tags" : [ {
          "name" : "Camera",
          "description" : "All camera related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "content" : {
                "type" : "string"
              }
            }
          },
          "name" : "QrResultEvent",
          "examples" : [ {
            "payload" : {
              "content" : "QR Code Content"
            }
          } ]
        }
      }
    },
    "zbos/cloud/login" : {
      "publish" : {
        "summary" : "Login to the cloud",
        "description" : "see <<zbos/cloud/login/response>> for response\n",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/cloud/login/response" : {
      "subscribe" : {
        "summary" : "response: Login to the cloud",
        "description" : "Response indicating if login to the cloud was successful or not\n",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "token" : {
                "description" : "jwt auth token",
                "type" : "string"
              },
              "success" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "LoginResponse",
          "examples" : [ {
            "payload" : {
              "token" : "string",
              "success" : true
            }
          } ]
        }
      }
    },
    "zbos/cloud/config/get" : {
      "publish" : {
        "summary" : "Get cloud config",
        "description" : "see <<zbos/cloud/config/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/cloud/config/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get cloud config",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object"
          },
          "name" : "Map"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/cloud/config/set" : {
      "publish" : {
        "summary" : "Set cloud config",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object"
          },
          "name" : "Map"
        }
      }
    },
    "zbos/cloud/config/event" : {
      "subscribe" : {
        "summary" : "event: Config cloud",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object"
          },
          "name" : "Map"
        }
      }
    },
    "zbos/media/library/resync" : {
      "publish" : {
        "summary" : "Resync all media libraries",
        "description" : "see <<zbos/media/library/resync/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/media/library/resync/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Resync all media libraries",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/media/library/file/upload" : {
      "publish" : {
        "summary" : "Upload file in media library",
        "description" : "see <<zbos/media/library/file/upload/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "file" : {
                "type" : "string"
              },
              "storageAccount" : {
                "type" : "string"
              },
              "key" : {
                "type" : "string"
              },
              "metadata" : {
                "type" : "object"
              }
            }
          },
          "name" : "FileUploadRequest",
          "examples" : [ {
            "payload" : {
              "file" : "string",
              "storageAccount" : "string",
              "key" : "string",
              "metadata" : { }
            }
          } ]
        }
      }
    },
    "zbos/media/library/file/upload/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Upload file in media library",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "cloudFileId" : {
                "type" : "string"
              }
            }
          },
          "name" : "CloudResult",
          "examples" : [ {
            "payload" : {
              "success" : false,
              "cloudFileId" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/cloud/user/list" : {
      "publish" : {
        "summary" : "Request users linked to the robot",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "offset" : {
                "type" : "number"
              },
              "limit" : {
                "type" : "number"
              }
            }
          },
          "name" : "LinkedUsersRequest"
        }
      }
    },
    "zbos/cloud/user/list/response/{key}" : {
      "subscribe" : {
        "summary" : "response: users linked to the robot",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "accounts" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string"
                    },
                    "username" : {
                      "type" : "string"
                    },
                    "email" : {
                      "type" : "string"
                    },
                    "picture" : {
                      "type" : "string"
                    },
                    "admin" : {
                      "type" : "boolean"
                    },
                    "mqttAccount" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "offset" : {
                "type" : "number"
              },
              "limit" : {
                "type" : "number"
              },
              "numResults" : {
                "type" : "number"
              }
            }
          },
          "name" : "LinkedUsersResponse",
          "examples" : [ {
            "payload" : {
              "accounts" : [ {
                "id" : "cffb2596-662f-479a-8f43-af1651a61c6d",
                "username" : "John Doe",
                "email" : "someone@zorabots.be",
                "picture" : "https://lh3.googleusercontent.com/a/AATXAJy1DGqwgHZMEiiz=s96-c",
                "admin" : true,
                "mqttAccount" : "c-1b32e964-0d76-4ce4-bc61-f8e05bdcebf9"
              } ],
              "offset" : 0,
              "limit" : 20,
              "numResults" : 1
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/cloud/license/list" : {
      "publish" : {
        "summary" : "Request a license list for the robot",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "offset" : {
                "type" : "number"
              },
              "limit" : {
                "type" : "number"
              }
            }
          },
          "name" : "LicenseListRequest"
        }
      }
    },
    "zbos/cloud/license/list/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Request linking a user to the robot",
        "description" : "",
        "tags" : [ {
          "name" : "Cloud",
          "description" : "All cloud related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "licenses" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string"
                    },
                    "serial" : {
                      "type" : "string"
                    },
                    "softwareId" : {
                      "type" : "string"
                    },
                    "createdTimestamp" : {
                      "type" : "integer"
                    },
                    "type" : {
                      "type" : "string"
                    },
                    "validFrom" : {
                      "type" : "integer"
                    },
                    "validUntil" : {
                      "type" : "integer"
                    }
                  }
                }
              },
              "offset" : {
                "type" : "number"
              },
              "limit" : {
                "type" : "number"
              },
              "numResults" : {
                "type" : "number"
              }
            }
          },
          "name" : "LicenseListResponse",
          "examples" : [ {
            "payload" : {
              "licenses" : [ {
                "id" : "7c18ae59-1d2c-4fbb-b7e8-4f07fd7b20d4",
                "serial" : "SH- J02 000596",
                "createdTimestamp" : 1618783200,
                "type" : "LICENSE_TYPE_ROBOT",
                "validFrom" : 1618783200,
                "validUntil" : 1651017599
              }, {
                "id" : "7c18ae59-1d2c-4fbb-b7e8-4f07fd7b20d4",
                "serial" : "SH- J02 000596",
                "softwareId" : "73143543-98bf-4ac6-8992-d8b097bbea27",
                "createdTimestamp" : 1623329499,
                "type" : "LICENSE_TYPE_SOFTWARE",
                "validFrom" : 1623276000,
                "validUntil" : 1654984799
              } ],
              "offset" : 0,
              "limit" : 20,
              "numResults" : 2
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/start" : {
      "publish" : {
        "summary" : "Start composition",
        "description" : "Payload is composition json\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/composition/start/response/{key}" : {
      "publish" : {
        "summary" : "Start composition response",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionStartResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "composition_execution_id" : "execution_id_1"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/start/id" : {
      "publish" : {
        "summary" : "Start composition by id",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the composition",
                "type" : "string"
              },
              "settings" : {
                "description" : "Optional settings",
                "type" : "object",
                "properties" : {
                  "concurrent" : {
                    "type" : "boolean"
                  },
                  "schedulerParallel" : {
                    "type" : "boolean"
                  },
                  "priority" : {
                    "type" : "string",
                    "enum" : [ "low", "normal", "important", "critical" ]
                  },
                  "weight" : {
                    "type" : "integer"
                  },
                  "on_resume" : {
                    "type" : "string",
                    "enum" : [ "restart", "restart_block", "stop" ]
                  }
                }
              },
              "variables" : {
                "description" : "Optional variables",
                "type" : "object"
              }
            }
          },
          "name" : "CompositionStartRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "composition_id_1",
              "variables" : {
                "var1" : "var1_value",
                "var2" : "var2_value"
              }
            }
          } ]
        }
      }
    },
    "zbos/composition/start/id/response/{key}" : {
      "subscribe" : {
        "summary" : "Start composition by id response",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionStartResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "composition_execution_id" : "execution_id_1"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/{source}/start/event" : {
      "subscribe" : {
        "summary" : "event: Composition started",
        "description" : "[DEPRECATED]\nPlease use either the v2 version, or the matching start response topic.\n\nContent is the composition ID\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "composition_id_1"
          } ]
        }
      },
      "parameters" : {
        "source" : {
          "description" : "The source that this composition belongs to",
          "schema" : {
            "type" : "string",
            "enum" : [ "scheduler/timeline", "composition", "taskmanager/timeline" ]
          }
        }
      }
    },
    "zbos/composition/start/event/v2" : {
      "subscribe" : {
        "summary" : "event: Composition started",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "composition_execution_id" : {
                "type" : "string"
              },
              "composition_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionStartEvent",
          "examples" : [ {
            "payload" : {
              "composition_execution_id" : "execution_id_1",
              "composition_id" : "composition_id_1"
            }
          } ]
        }
      }
    },
    "zbos/{source}/stop" : {
      "publish" : {
        "summary" : "Stop composition",
        "description" : "[DEPRECATED]\nPlease use <<zbos/composition/stop>> with a json payload.\n\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "source" : {
          "description" : "The source that this composition belongs to",
          "schema" : {
            "type" : "string",
            "enum" : [ "scheduler/timeline", "composition", "taskmanager/timeline" ]
          }
        }
      }
    },
    "zbos/composition/stop" : {
      "publish" : {
        "summary" : "Stop composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionStopRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "composition_execution_id" : "composition_id_1"
            }
          } ]
        }
      }
    },
    "zbos/composition/stop/response/{key}" : {
      "publish" : {
        "summary" : "Stop composition response",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/{source}/stop/event" : {
      "subscribe" : {
        "summary" : "event: Composition stopped",
        "description" : "[DEPRECATED]\nPlease use either the v2 version, or the stop response topic.\n\nContent is the composition ID\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "composition_id_1"
          } ]
        }
      },
      "parameters" : {
        "source" : {
          "description" : "The source that this composition belongs to",
          "schema" : {
            "type" : "string",
            "enum" : [ "scheduler/timeline", "composition", "taskmanager/timeline" ]
          }
        }
      }
    },
    "zbos/composition/stop/event/v2" : {
      "subscribe" : {
        "summary" : "event: Composition stopped",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionStopEvent",
          "examples" : [ {
            "payload" : {
              "composition_execution_id" : "composition_id_1"
            }
          } ]
        }
      }
    },
    "zbos/composition/pause" : {
      "publish" : {
        "summary" : "Pause composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionPauseRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "composition_execution_id" : "composition_id_1"
            }
          } ]
        }
      }
    },
    "zbos/composition/pause/response/{key}" : {
      "publish" : {
        "summary" : "Pause composition response",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/pause/event" : {
      "subscribe" : {
        "summary" : "event: Composition paused",
        "description" : "[DEPRECATED]\nPlease use either the v2 version, or the pause response topic.\n\nContent is the composition ID\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "composition_id_1"
          } ]
        }
      }
    },
    "zbos/composition/pause/event/v2" : {
      "subscribe" : {
        "summary" : "event: Composition paused",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionPauseEvent",
          "examples" : [ {
            "payload" : {
              "composition_execution_id" : "composition_id_1"
            }
          } ]
        }
      }
    },
    "zbos/composition/resume" : {
      "publish" : {
        "summary" : "Resume composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionResumeRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "composition_execution_id" : "composition_id_1"
            }
          } ]
        }
      }
    },
    "zbos/composition/resume/response/{key}" : {
      "publish" : {
        "summary" : "Resume composition response",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/resume/event" : {
      "subscribe" : {
        "summary" : "event: Composition Resumed",
        "description" : "[DEPRECATED]\nPlease use either the v2 version, or the resume response topic.\n\nContent is the composition ID\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "composition_id_1"
          } ]
        }
      }
    },
    "zbos/composition/resume/event/v2" : {
      "subscribe" : {
        "summary" : "event: Composition Resumed",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionResumeEvent",
          "examples" : [ {
            "payload" : {
              "composition_execution_id" : "composition_id_1"
            }
          } ]
        }
      }
    },
    "zbos/{source}/loop/event" : {
      "subscribe" : {
        "summary" : "event: Composition loop state",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "composition_execution_id" : {
                "type" : "string"
              },
              "infinite" : {
                "type" : "boolean"
              },
              "total_loop_count" : {
                "description" : "Total loop count",
                "type" : "integer"
              },
              "current_loop_count" : {
                "description" : "current loop count",
                "type" : "integer"
              }
            }
          },
          "name" : "CompositionLoopPropertyEvent",
          "examples" : [ {
            "payload" : {
              "infinite" : true,
              "composition_execution_id" : "composition_id_1",
              "total_loop_count" : 50,
              "current_loop_count" : 3
            }
          } ]
        }
      },
      "parameters" : {
        "source" : {
          "description" : "The source that this composition belongs to",
          "schema" : {
            "type" : "string",
            "enum" : [ "scheduler/timeline", "composition", "taskmanager/timeline" ]
          }
        }
      }
    },
    "zbos/composition/settings" : {
      "publish" : {
        "summary" : "Settings for a given composition",
        "description" : "[DEPRECATED]\nPlease use the Task Manager API instead.\n\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "properties" : {
                "type" : "object",
                "properties" : {
                  "loop" : {
                    "type" : "object",
                    "properties" : {
                      "infinite" : {
                        "type" : "boolean"
                      },
                      "repeatTimes" : {
                        "description" : "Total loop count",
                        "type" : "integer"
                      },
                      "currentRepeatTimes" : {
                        "description" : "current loop count",
                        "type" : "integer"
                      }
                    }
                  },
                  "general" : {
                    "type" : "object",
                    "properties" : {
                      "stoppable" : {
                        "type" : "boolean"
                      },
                      "powerManagement" : {
                        "type" : "string",
                        "enum" : [ "DEFAULT", "AWARE", "DISABLED" ]
                      }
                    }
                  }
                }
              },
              "timelineId" : {
                "description" : "Composition ID",
                "type" : "string"
              },
              "executionId" : {
                "description" : "Execution ID",
                "type" : "string"
              },
              "isScheduler" : {
                "type" : "boolean"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SIMPLE_COMPOSITION", "ADVANCED_COMPOSITION" ]
              }
            }
          },
          "name" : "TimelinePropertiesWrapper",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/composition/save" : {
      "publish" : {
        "summary" : "Save composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/composition/save/multiple" : {
      "publish" : {
        "summary" : "Save multiple compositions",
        "description" : "see <<zbos/composition/save/multiple/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "compositions" : {
                "description" : "Array of compositions",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string"
                    },
                    "name" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "SIMPLE_COMPOSITION", "ADVANCED_COMPOSITION" ]
                    },
                    "isDefault" : {
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          },
          "name" : "SaveMultipleCompositionRequest",
          "examples" : [ {
            "payload" : {
              "compositions" : [ {
                "id" : "string",
                "name" : "string",
                "type" : "SIMPLE_COMPOSITION",
                "default" : false
              } ]
            }
          } ]
        }
      }
    },
    "zbos/composition/save/event" : {
      "subscribe" : {
        "summary" : "event: Composition Saved",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "string"
          } ]
        }
      }
    },
    "zbos/composition/save/multiple/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Save multiple compositions",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object"
          },
          "name" : "Map"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/load" : {
      "publish" : {
        "summary" : "Load composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionLoadRequest",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/composition/load/event" : {
      "subscribe" : {
        "summary" : "event: Composition loaded",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/composition/list" : {
      "publish" : {
        "summary" : "Get list of compositions",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/composition/list/event" : {
      "subscribe" : {
        "summary" : "event: Get list of compositions",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [ "SIMPLE_COMPOSITION", "ADVANCED_COMPOSITION" ]
                },
                "isDefault" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "name" : "Array<CompositionInfo>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "string",
              "type" : "SIMPLE_COMPOSITION",
              "default" : true
            }
          } ]
        }
      }
    },
    "zbos/composition/delete" : {
      "publish" : {
        "summary" : "Delete composition by id",
        "description" : "see <<zbos/composition/delete/response>> for response\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionDeleteRequest",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/composition/delete/all" : {
      "publish" : {
        "summary" : "Deletes all compositions",
        "description" : "see <<zbos/composition/delete/response>> for response\n",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/composition/delete/response" : {
      "subscribe" : {
        "summary" : "response: Delete composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/composition/changed/event" : {
      "subscribe" : {
        "summary" : "event: Composition changed",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/composition/audio/stop" : {
      "publish" : {
        "summary" : "Stop audio composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/composition/video/stop" : {
      "publish" : {
        "summary" : "Stop video composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/composition/image/stop" : {
      "publish" : {
        "summary" : "Stop image composition",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/composition/error" : {
      "subscribe" : {
        "summary" : "event: Composition encountered error",
        "description" : "List of possible error reasons:\n'INVALID_ID': The block id is malformed/broken.\n'INVALID_TYPE': The block type is malformed/broken.\n'INVALID_BLOCK': One of the properties aside from id and type is malformed/broken.\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "type" : {
                "description" : "Block type that caused the error, 'UNKNOWN' if not known",
                "type" : "string"
              },
              "id" : {
                "description" : "Block ID that caused the error, 'UNKNOWN' if not known",
                "type" : "string"
              },
              "reasons" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "CompositionError",
          "examples" : [ {
            "payload" : {
              "type" : "string",
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/api/request" : {
      "publish" : {
        "summary" : "Get api",
        "description" : "see <<zbos/api/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string"
              },
              "endpoint" : {
                "type" : "string"
              },
              "body" : {
                "type" : "string"
              },
              "params" : {
                "type" : "object"
              },
              "headers" : {
                "type" : "object"
              }
            }
          },
          "name" : "ApiRequestBlock",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/api/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get api",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/default/variable/request" : {
      "publish" : {
        "summary" : "Get default composition variables",
        "description" : "Payload \"key\" is optional\nsee <<zbos/composition/default/variable/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/composition/default/variable/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get default composition variables",
        "description" : "Payload is array of variable names\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : "Array<String>"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/status/get" : {
      "publish" : {
        "summary" : "Get composition status",
        "description" : "see <<zbos/composition/status/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "composition_execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "CompositionStatusGetRequest"
        }
      }
    },
    "zbos/composition/status/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Composition status",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "composition_execution_id" : {
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "state" : {
                "description" : "Default, playing or paused",
                "type" : "string",
                "enum" : [ "DEFAULT", "PLAYING", "PAUSED" ]
              },
              "activeBlocks" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "properties" : {
                "description" : "Composition properties",
                "type" : "object",
                "properties" : {
                  "loop" : {
                    "type" : "object",
                    "properties" : {
                      "infinite" : {
                        "type" : "boolean"
                      },
                      "repeatTimes" : {
                        "description" : "Total loop count",
                        "type" : "integer"
                      },
                      "currentRepeatTimes" : {
                        "description" : "current loop count",
                        "type" : "integer"
                      }
                    }
                  },
                  "general" : {
                    "type" : "object",
                    "properties" : {
                      "stoppable" : {
                        "type" : "boolean"
                      },
                      "powerManagement" : {
                        "type" : "string",
                        "enum" : [ "DEFAULT", "AWARE", "DISABLED" ]
                      }
                    }
                  }
                }
              },
              "playCount" : {
                "description" : "Current repeat iteration",
                "type" : "integer"
              }
            }
          },
          "name" : "CompositionStatus",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "state" : "DEFAULT",
              "activeBlocks" : [ "string" ],
              "properties" : {
                "loop" : {
                  "infinite" : true,
                  "repeatTimes" : 50,
                  "currentRepeatTimes" : 3
                },
                "general" : {
                  "stoppable" : true,
                  "powerManagement" : "DEFAULT"
                }
              },
              "playCount" : 5
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/active/get" : {
      "subscribe" : {
        "summary" : "Get active compositions",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/composition/active/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get active compositions",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "execution_id" : {
                  "type" : "string"
                },
                "source" : {
                  "type" : "string",
                  "enum" : [ "scheduler", "composer", "task_manager" ]
                },
                "state" : {
                  "type" : "string",
                  "enum" : [ "DEFAULT", "PLAYING", "PAUSED" ]
                },
                "settings" : {
                  "type" : "object",
                  "properties" : {
                    "concurrent" : {
                      "type" : "boolean"
                    },
                    "schedulerParallel" : {
                      "type" : "boolean"
                    },
                    "priority" : {
                      "type" : "string",
                      "enum" : [ "low", "normal", "important", "critical" ]
                    },
                    "weight" : {
                      "type" : "integer"
                    },
                    "on_resume" : {
                      "type" : "string",
                      "enum" : [ "restart", "restart_block", "stop" ]
                    }
                  }
                },
                "properties" : {
                  "type" : "object",
                  "properties" : {
                    "loop" : {
                      "type" : "object",
                      "properties" : {
                        "infinite" : {
                          "type" : "boolean"
                        },
                        "repeatTimes" : {
                          "description" : "Total loop count",
                          "type" : "integer"
                        },
                        "currentRepeatTimes" : {
                          "description" : "current loop count",
                          "type" : "integer"
                        }
                      }
                    },
                    "general" : {
                      "type" : "object",
                      "properties" : {
                        "stoppable" : {
                          "type" : "boolean"
                        },
                        "powerManagement" : {
                          "type" : "string",
                          "enum" : [ "DEFAULT", "AWARE", "DISABLED" ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "Array<ActiveComposition>",
          "examples" : [ {
            "payload" : {
              "source" : "task_manager",
              "state" : "PLAYING",
              "settings" : {
                "concurrent" : true,
                "priority" : "normal",
                "weight" : 0,
                "on_resume" : "stop"
              },
              "properties" : {
                "loop" : {
                  "infinite" : true,
                  "repeatTimes" : 50,
                  "currentRepeatTimes" : 3
                },
                "general" : {
                  "stoppable" : true,
                  "powerManagement" : "DEFAULT"
                }
              },
              "execution_id" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/active/update/event" : {
      "subscribe" : {
        "summary" : "Active compositions have changed",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "execution_id" : {
                  "type" : "string"
                },
                "source" : {
                  "type" : "string",
                  "enum" : [ "scheduler", "composer", "task_manager" ]
                },
                "state" : {
                  "type" : "string",
                  "enum" : [ "DEFAULT", "PLAYING", "PAUSED" ]
                },
                "settings" : {
                  "type" : "object",
                  "properties" : {
                    "concurrent" : {
                      "type" : "boolean"
                    },
                    "schedulerParallel" : {
                      "type" : "boolean"
                    },
                    "priority" : {
                      "type" : "string",
                      "enum" : [ "low", "normal", "important", "critical" ]
                    },
                    "weight" : {
                      "type" : "integer"
                    },
                    "on_resume" : {
                      "type" : "string",
                      "enum" : [ "restart", "restart_block", "stop" ]
                    }
                  }
                },
                "properties" : {
                  "type" : "object",
                  "properties" : {
                    "loop" : {
                      "type" : "object",
                      "properties" : {
                        "infinite" : {
                          "type" : "boolean"
                        },
                        "repeatTimes" : {
                          "description" : "Total loop count",
                          "type" : "integer"
                        },
                        "currentRepeatTimes" : {
                          "description" : "current loop count",
                          "type" : "integer"
                        }
                      }
                    },
                    "general" : {
                      "type" : "object",
                      "properties" : {
                        "stoppable" : {
                          "type" : "boolean"
                        },
                        "powerManagement" : {
                          "type" : "string",
                          "enum" : [ "DEFAULT", "AWARE", "DISABLED" ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "Array<ActiveComposition>",
          "examples" : [ {
            "payload" : {
              "source" : "task_manager",
              "state" : "PLAYING",
              "settings" : {
                "concurrent" : true,
                "priority" : "normal",
                "weight" : 0,
                "on_resume" : "stop"
              },
              "properties" : {
                "loop" : {
                  "infinite" : true,
                  "repeatTimes" : 50,
                  "currentRepeatTimes" : 3
                },
                "general" : {
                  "stoppable" : true,
                  "powerManagement" : "DEFAULT"
                }
              },
              "execution_id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/composition/block/start" : {
      "publish" : {
        "summary" : "Start composition block",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "description" : "Block ID",
                "type" : "string"
              },
              "index" : {
                "type" : "integer"
              },
              "blocking" : {
                "type" : "boolean"
              },
              "input" : {
                "type" : "object",
                "properties" : {
                  "connectors" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "string"
                        },
                        "connectorType" : {
                          "type" : "string",
                          "enum" : [ "DEFAULT", "TIMEOUT", "ALL", "SUCCESS", "FAIL" ]
                        },
                        "connection" : {
                          "type" : "object",
                          "properties" : {
                            "blockId" : {
                              "type" : "string"
                            },
                            "connectorId" : {
                              "type" : "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "output" : {
                "type" : "object",
                "properties" : {
                  "connectors" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "string"
                        },
                        "connectorType" : {
                          "type" : "string",
                          "enum" : [ "DEFAULT", "TIMEOUT", "ALL", "SUCCESS", "FAIL" ]
                        },
                        "connection" : {
                          "type" : "object",
                          "properties" : {
                            "blockId" : {
                              "type" : "string"
                            },
                            "connectorId" : {
                              "type" : "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "nextBlockId" : {
                "type" : "string"
              }
            }
          },
          "name" : "Block",
          "examples" : [ {
            "payload" : {
              "index" : 5,
              "blocking" : false,
              "nextBlockId" : "string"
            }
          } ]
        }
      }
    },
    "zbos/{source}/block/start/event" : {
      "subscribe" : {
        "summary" : "event: Composition block started",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "source" : {
          "description" : "The source that this composition belongs to",
          "schema" : {
            "type" : "string",
            "enum" : [ "scheduler/timeline", "composition", "taskmanager/timeline" ]
          }
        }
      }
    },
    "zbos/composition/block/stop" : {
      "publish" : {
        "summary" : "Stop composition block",
        "description" : "Block ID to stop, when key = \"all\", all active blocks will be stopped.\n",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/{source}/block/end/event" : {
      "subscribe" : {
        "summary" : "event: Composition block ended",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "source" : {
          "description" : "The source that this composition belongs to",
          "schema" : {
            "type" : "string",
            "enum" : [ "scheduler/timeline", "composition", "taskmanager/timeline" ]
          }
        }
      }
    },
    "zbos/{source}/block/pause/event" : {
      "subscribe" : {
        "summary" : "event: Composition block paused",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "source" : {
          "description" : "The source that this composition belongs to",
          "schema" : {
            "type" : "string",
            "enum" : [ "scheduler/timeline", "composition", "taskmanager/timeline" ]
          }
        }
      }
    },
    "zbos/composition/block/stringoperation/types/get" : {
      "publish" : {
        "summary" : "Get all string operation typessee <<zbos/composition/block/stringoperation/types/response/{key}>> for response",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "language" : {
                "description" : "Optional. Set the language for all labels. Otherwise it will be the default language.\nThe language format is ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              }
            }
          },
          "name" : "TypesRequest"
        }
      }
    },
    "zbos/composition/block/stringoperation/types/response/{key}" : {
      "subscribe" : {
        "summary" : "response: String operation types",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "UPPERCASE", "LOWERCASE", "CAPITALIZE", "TITLE", "REMOVE", "REPLACE", "LENGTH", "COUNT", "SLICE", "STARTS_WITH", "ENDS_WITH", "CONTAINS" ]
                },
                "label" : {
                  "description" : "Human-readable label",
                  "type" : "string"
                },
                "label_key" : {
                  "description" : "Translation key for human-readable label",
                  "type" : "string"
                },
                "arguments" : {
                  "description" : "Map of arguments for this string operation",
                  "type" : "object"
                }
              }
            }
          },
          "name" : "Array<StringOperation>",
          "examples" : [ {
            "payload" : {
              "type" : "SLICE",
              "label" : "Slice",
              "arguments" : {
                "start" : {
                  "optional" : true,
                  "label_key" : "some_category.start",
                  "can_regex" : false
                },
                "end" : {
                  "optional" : true,
                  "label_key" : "some_category.end",
                  "can_regex" : false
                }
              },
              "label_key" : "some_category.slice"
            }
          }, {
            "payload" : {
              "type" : "REPLACE",
              "label" : "Replace",
              "arguments" : {
                "target" : {
                  "optional" : false,
                  "label_key" : "some_category.target",
                  "can_regex" : true
                },
                "replacement" : {
                  "optional" : false,
                  "label_key" : "some_category.replacement",
                  "can_regex" : true
                }
              },
              "label_key" : "some_category.replace"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/composition/block/mathoperation/types/get" : {
      "publish" : {
        "summary" : "Get all math operation typessee <<zbos/composition/block/mathoperation/types/get/response/{key}>> for response",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "language" : {
                "description" : "Optional. Set the language for all labels. Otherwise it will be the default language.\nThe language format is ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              }
            }
          },
          "name" : "TypesRequest"
        }
      }
    },
    "zbos/composition/block/mathoperation/types/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Math operation types",
        "description" : "",
        "tags" : [ {
          "name" : "Composer",
          "description" : "All composer related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "+", "-", "/", "*", "^", "mod", "sqrt", "root" ]
                },
                "label" : {
                  "description" : "Human-readable label",
                  "type" : "string"
                },
                "label_key" : {
                  "description" : "Translation key for human-readable label",
                  "type" : "string"
                },
                "has_second_argument" : {
                  "description" : "Determines whether a second argument is used for this operation",
                  "type" : "boolean"
                }
              }
            }
          },
          "name" : "Array<MathOperation>",
          "examples" : [ {
            "payload" : {
              "type" : "+",
              "label" : "ADD",
              "label_key" : "some_category.ADD",
              "has_second_argument" : true
            }
          }, {
            "payload" : {
              "type" : "-",
              "label" : "SUBTRACT",
              "label_key" : "some_category.SUBTRACT",
              "has_second_argument" : true
            }
          }, {
            "payload" : {
              "type" : "/",
              "label" : "DIVIDE",
              "label_key" : "some_category.DIVIDE",
              "has_second_argument" : true
            }
          }, {
            "payload" : {
              "type" : "*",
              "label" : "MULTIPLY",
              "label_key" : "some_category.MULTIPLY",
              "has_second_argument" : true
            }
          }, {
            "payload" : {
              "type" : "^",
              "label" : "POWER",
              "label_key" : "some_category.POWER",
              "has_second_argument" : true
            }
          }, {
            "payload" : {
              "type" : "mod",
              "label" : "MODULO",
              "label_key" : "some_category.MODULO",
              "has_second_argument" : true
            }
          }, {
            "payload" : {
              "type" : "sqrt",
              "label" : "SQUARE_ROOT",
              "label_key" : "some_category.SQUARE_ROOT",
              "has_second_argument" : false
            }
          }, {
            "payload" : {
              "type" : "root",
              "label" : "ROOT",
              "label_key" : "some_category.ROOT",
              "has_second_argument" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/connection/status/get" : {
      "publish" : {
        "summary" : "Get the connection status",
        "description" : "Requesting the connection information for the WiFi, access point and cablesee <<zbos/connection/status/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/connection/status/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get the connection status",
        "description" : "Response with the status information for the WiFi, access point and cable\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "wifi" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "ssid" : {
                      "type" : "string"
                    },
                    "encryption" : {
                      "type" : "string",
                      "enum" : [ "UNSECURE", "SHARE", "WEP", "WPA", "WPA_PSK", "WPA_OR_WPA2", "WPA_OR_WPA2_PSK", "WPA2", "WPA2_PSK", "WPA2_EAP", "WAI_CERT", "WAI_PSK" ]
                    },
                    "ip4" : {
                      "type" : "string"
                    },
                    "ip6" : {
                      "type" : "string"
                    },
                    "dhcp" : {
                      "type" : "boolean"
                    },
                    "subnetmask" : {
                      "type" : "string"
                    },
                    "gateway" : {
                      "type" : "string"
                    },
                    "dns" : {
                      "type" : "object",
                      "properties" : {
                        "dns1" : {
                          "type" : "string"
                        },
                        "dns2" : {
                          "type" : "string"
                        },
                        "adapterName" : {
                          "type" : "string"
                        }
                      }
                    },
                    "macAddress" : {
                      "type" : "string"
                    },
                    "connectionStatus" : {
                      "type" : "string",
                      "enum" : [ "CONNECTING", "CONNECTED", "DISCONNECTED" ]
                    },
                    "hasInternet" : {
                      "type" : "boolean"
                    },
                    "adapterName" : {
                      "type" : "string"
                    },
                    "frequency" : {
                      "description" : "Expressed in MHz",
                      "type" : "integer"
                    }
                  }
                }
              },
              "cable" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "ip4" : {
                      "type" : "string"
                    },
                    "ip6" : {
                      "type" : "string"
                    },
                    "dhcp" : {
                      "type" : "boolean"
                    },
                    "subnetmask" : {
                      "type" : "string"
                    },
                    "gateway" : {
                      "type" : "string"
                    },
                    "dns" : {
                      "type" : "object",
                      "properties" : {
                        "dns1" : {
                          "type" : "string"
                        },
                        "dns2" : {
                          "type" : "string"
                        },
                        "adapterName" : {
                          "type" : "string"
                        }
                      }
                    },
                    "hasConnection" : {
                      "type" : "boolean"
                    },
                    "hasInternet" : {
                      "type" : "boolean"
                    },
                    "macAddress" : {
                      "type" : "string"
                    },
                    "adapterName" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "ap" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "ssid" : {
                      "type" : "string"
                    },
                    "ip" : {
                      "type" : "string"
                    },
                    "encryption" : {
                      "type" : "string",
                      "enum" : [ "UNSECURE", "SHARE", "WEP", "WPA", "WPA_PSK", "WPA_OR_WPA2", "WPA_OR_WPA2_PSK", "WPA2", "WPA2_PSK", "WPA2_EAP", "WAI_CERT", "WAI_PSK" ]
                    },
                    "hasConnection" : {
                      "type" : "boolean"
                    },
                    "hasInternet" : {
                      "type" : "boolean"
                    },
                    "adapterName" : {
                      "type" : "string"
                    },
                    "frequency" : {
                      "description" : "Expressed in MHz",
                      "type" : "integer"
                    }
                  }
                }
              },
              "cellular" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "hasConnection" : {
                      "type" : "boolean"
                    },
                    "hasInternet" : {
                      "type" : "boolean"
                    },
                    "macAddress" : {
                      "type" : "string"
                    },
                    "adapterName" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "name" : "ConnectionStatus",
          "examples" : [ {
            "payload" : {
              "wifi" : [ {
                "ssid" : "ZoraBotsNetwork",
                "encryption" : "WPA2_PSK",
                "ip4" : "192.168.0.5",
                "ip6" : "2a02:1811:b282:ae00:5850:a744:3c37:711b",
                "dhcp" : true,
                "subnetmask" : "255.255.254.0",
                "gateway" : "192.168.0.1",
                "dns" : {
                  "dns1" : "8.8.8.8",
                  "dns2" : "8.8.4.4",
                  "valid" : true
                },
                "macAddress" : "76:EA:A5:27:6B:B6",
                "connectionStatus" : "CONNECTED",
                "hasInternet" : true,
                "adapterName" : "wlan0",
                "frequency" : 2400
              } ],
              "cable" : [ {
                "ip4" : "192.168.0.4",
                "ip6" : "2a02:1811:b282:ae00:5850:a744:3c37:711a",
                "dhcp" : true,
                "subnetmask" : "255.255.254.0",
                "gateway" : "192.168.0.1",
                "dns" : {
                  "dns1" : "8.8.8.8",
                  "dns2" : "8.8.4.4",
                  "valid" : true
                },
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "eth0"
              } ],
              "ap" : [ {
                "ssid" : "ZoraBotsHotspot",
                "ip" : "192.168.60.1",
                "encryption" : "WPA2_PSK",
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "teth0",
                "frequency" : 2400
              } ],
              "cellular" : [ {
                "hasConnection" : true,
                "hasInternet" : true,
                "macAddress" : "some-mac-address",
                "adapterName" : "ccmni0"
              } ]
            }
          }, {
            "payload" : {
              "cable" : [ {
                "ip4" : "192.168.0.4",
                "ip6" : "2a02:1811:b282:ae00:5850:a744:3c37:711a",
                "dhcp" : true,
                "subnetmask" : "255.255.254.0",
                "gateway" : "192.168.0.1",
                "dns" : {
                  "dns1" : "8.8.8.8",
                  "dns2" : "8.8.4.4",
                  "valid" : true
                },
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "eth0"
              } ]
            }
          }, {
            "payload" : {
              "wifi" : [ {
                "ssid" : "ZoraBotsNetwork",
                "encryption" : "WPA2_PSK",
                "ip4" : "192.168.0.5",
                "ip6" : "2a02:1811:b282:ae00:5850:a744:3c37:711b",
                "dhcp" : true,
                "subnetmask" : "255.255.254.0",
                "gateway" : "192.168.0.1",
                "dns" : {
                  "dns1" : "8.8.8.8",
                  "dns2" : "8.8.4.4",
                  "valid" : true
                },
                "macAddress" : "76:EA:A5:27:6B:B6",
                "connectionStatus" : "CONNECTED",
                "hasInternet" : true,
                "adapterName" : "wlan0",
                "frequency" : 2400
              } ]
            }
          }, {
            "payload" : {
              "ap" : [ {
                "ssid" : "ZoraBotsHotspot",
                "ip" : "192.168.60.1",
                "encryption" : "WPA2_PSK",
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "teth0",
                "frequency" : 2400
              }, {
                "ssid" : "ZoraBotsHotspot5GHz",
                "ip" : "192.168.60.1",
                "encryption" : "WPA2_PSK",
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "teth1",
                "frequency" : 5000
              } ]
            }
          }, {
            "payload" : {
              "cellular" : [ {
                "hasConnection" : true,
                "hasInternet" : true,
                "macAddress" : "some-mac-address",
                "adapterName" : "ccmni0"
              } ]
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/connection/status/event" : {
      "subscribe" : {
        "summary" : "event: Connection status",
        "description" : "Periodic status information for the WiFi, access point and cable\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "wifi" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "ssid" : {
                      "type" : "string"
                    },
                    "encryption" : {
                      "type" : "string",
                      "enum" : [ "UNSECURE", "SHARE", "WEP", "WPA", "WPA_PSK", "WPA_OR_WPA2", "WPA_OR_WPA2_PSK", "WPA2", "WPA2_PSK", "WPA2_EAP", "WAI_CERT", "WAI_PSK" ]
                    },
                    "ip4" : {
                      "type" : "string"
                    },
                    "ip6" : {
                      "type" : "string"
                    },
                    "dhcp" : {
                      "type" : "boolean"
                    },
                    "subnetmask" : {
                      "type" : "string"
                    },
                    "gateway" : {
                      "type" : "string"
                    },
                    "dns" : {
                      "type" : "object",
                      "properties" : {
                        "dns1" : {
                          "type" : "string"
                        },
                        "dns2" : {
                          "type" : "string"
                        },
                        "adapterName" : {
                          "type" : "string"
                        }
                      }
                    },
                    "macAddress" : {
                      "type" : "string"
                    },
                    "connectionStatus" : {
                      "type" : "string",
                      "enum" : [ "CONNECTING", "CONNECTED", "DISCONNECTED" ]
                    },
                    "hasInternet" : {
                      "type" : "boolean"
                    },
                    "adapterName" : {
                      "type" : "string"
                    },
                    "frequency" : {
                      "description" : "Expressed in MHz",
                      "type" : "integer"
                    }
                  }
                }
              },
              "cable" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "ip4" : {
                      "type" : "string"
                    },
                    "ip6" : {
                      "type" : "string"
                    },
                    "dhcp" : {
                      "type" : "boolean"
                    },
                    "subnetmask" : {
                      "type" : "string"
                    },
                    "gateway" : {
                      "type" : "string"
                    },
                    "dns" : {
                      "type" : "object",
                      "properties" : {
                        "dns1" : {
                          "type" : "string"
                        },
                        "dns2" : {
                          "type" : "string"
                        },
                        "adapterName" : {
                          "type" : "string"
                        }
                      }
                    },
                    "hasConnection" : {
                      "type" : "boolean"
                    },
                    "hasInternet" : {
                      "type" : "boolean"
                    },
                    "macAddress" : {
                      "type" : "string"
                    },
                    "adapterName" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "ap" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "ssid" : {
                      "type" : "string"
                    },
                    "ip" : {
                      "type" : "string"
                    },
                    "encryption" : {
                      "type" : "string",
                      "enum" : [ "UNSECURE", "SHARE", "WEP", "WPA", "WPA_PSK", "WPA_OR_WPA2", "WPA_OR_WPA2_PSK", "WPA2", "WPA2_PSK", "WPA2_EAP", "WAI_CERT", "WAI_PSK" ]
                    },
                    "hasConnection" : {
                      "type" : "boolean"
                    },
                    "hasInternet" : {
                      "type" : "boolean"
                    },
                    "adapterName" : {
                      "type" : "string"
                    },
                    "frequency" : {
                      "description" : "Expressed in MHz",
                      "type" : "integer"
                    }
                  }
                }
              },
              "cellular" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "hasConnection" : {
                      "type" : "boolean"
                    },
                    "hasInternet" : {
                      "type" : "boolean"
                    },
                    "macAddress" : {
                      "type" : "string"
                    },
                    "adapterName" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "name" : "ConnectionStatus",
          "examples" : [ {
            "payload" : {
              "wifi" : [ {
                "ssid" : "ZoraBotsNetwork",
                "encryption" : "WPA2_PSK",
                "ip4" : "192.168.0.5",
                "ip6" : "2a02:1811:b282:ae00:5850:a744:3c37:711b",
                "dhcp" : true,
                "subnetmask" : "255.255.254.0",
                "gateway" : "192.168.0.1",
                "dns" : {
                  "dns1" : "8.8.8.8",
                  "dns2" : "8.8.4.4",
                  "valid" : true
                },
                "macAddress" : "76:EA:A5:27:6B:B6",
                "connectionStatus" : "CONNECTED",
                "hasInternet" : true,
                "adapterName" : "wlan0",
                "frequency" : 2400
              } ],
              "cable" : [ {
                "ip4" : "192.168.0.4",
                "ip6" : "2a02:1811:b282:ae00:5850:a744:3c37:711a",
                "dhcp" : true,
                "subnetmask" : "255.255.254.0",
                "gateway" : "192.168.0.1",
                "dns" : {
                  "dns1" : "8.8.8.8",
                  "dns2" : "8.8.4.4",
                  "valid" : true
                },
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "eth0"
              } ],
              "ap" : [ {
                "ssid" : "ZoraBotsHotspot",
                "ip" : "192.168.60.1",
                "encryption" : "WPA2_PSK",
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "teth0",
                "frequency" : 2400
              } ],
              "cellular" : [ {
                "hasConnection" : true,
                "hasInternet" : true,
                "macAddress" : "some-mac-address",
                "adapterName" : "ccmni0"
              } ]
            }
          }, {
            "payload" : {
              "cable" : [ {
                "ip4" : "192.168.0.4",
                "ip6" : "2a02:1811:b282:ae00:5850:a744:3c37:711a",
                "dhcp" : true,
                "subnetmask" : "255.255.254.0",
                "gateway" : "192.168.0.1",
                "dns" : {
                  "dns1" : "8.8.8.8",
                  "dns2" : "8.8.4.4",
                  "valid" : true
                },
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "eth0"
              } ]
            }
          }, {
            "payload" : {
              "wifi" : [ {
                "ssid" : "ZoraBotsNetwork",
                "encryption" : "WPA2_PSK",
                "ip4" : "192.168.0.5",
                "ip6" : "2a02:1811:b282:ae00:5850:a744:3c37:711b",
                "dhcp" : true,
                "subnetmask" : "255.255.254.0",
                "gateway" : "192.168.0.1",
                "dns" : {
                  "dns1" : "8.8.8.8",
                  "dns2" : "8.8.4.4",
                  "valid" : true
                },
                "macAddress" : "76:EA:A5:27:6B:B6",
                "connectionStatus" : "CONNECTED",
                "hasInternet" : true,
                "adapterName" : "wlan0",
                "frequency" : 2400
              } ]
            }
          }, {
            "payload" : {
              "ap" : [ {
                "ssid" : "ZoraBotsHotspot",
                "ip" : "192.168.60.1",
                "encryption" : "WPA2_PSK",
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "teth0",
                "frequency" : 2400
              }, {
                "ssid" : "ZoraBotsHotspot5GHz",
                "ip" : "192.168.60.1",
                "encryption" : "WPA2_PSK",
                "hasConnection" : true,
                "hasInternet" : true,
                "adapterName" : "teth1",
                "frequency" : 5000
              } ]
            }
          }, {
            "payload" : {
              "cellular" : [ {
                "hasConnection" : true,
                "hasInternet" : true,
                "macAddress" : "some-mac-address",
                "adapterName" : "ccmni0"
              } ]
            }
          } ]
        }
      }
    },
    "zbos/connection/wifi/scan" : {
      "publish" : {
        "summary" : "Scan for WiFi networks",
        "description" : "Start scanning for WiFi networks\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/connection/wifi/scan/event" : {
      "subscribe" : {
        "summary" : "response: Scan for WiFi networks",
        "description" : "A list of all the scanned WiFi networks the robot can connect to\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "ssid" : {
                  "type" : "string"
                },
                "encryption" : {
                  "type" : "string",
                  "enum" : [ "UNSECURE", "SHARE", "WEP", "WPA", "WPA_PSK", "WPA_OR_WPA2", "WPA_OR_WPA2_PSK", "WPA2", "WPA2_PSK", "WPA2_EAP", "WAI_CERT", "WAI_PSK" ]
                },
                "signal" : {
                  "type" : "integer"
                },
                "isSaved" : {
                  "type" : "boolean"
                },
                "macAddress" : {
                  "type" : "string"
                },
                "channel" : {
                  "type" : "integer"
                },
                "frequency" : {
                  "description" : "Expressed in MHz",
                  "type" : "integer"
                }
              }
            }
          },
          "name" : "Array<ScannedNetwork>",
          "examples" : [ {
            "payload" : {
              "ssid" : "ZoraBotsNetwork",
              "encryption" : "WPA2_PSK",
              "signal" : -60,
              "macAddress" : "83:E0:F9:55:95:AF",
              "frequency" : 2400,
              "saved" : false
            }
          }, {
            "payload" : {
              "ssid" : "ZoraBotsNetworkEnterprise",
              "encryption" : "WPA2_EAP",
              "signal" : -55,
              "macAddress" : "83:E0:F9:55:95:AF",
              "frequency" : 5000,
              "saved" : false
            }
          }, {
            "payload" : {
              "ssid" : "ZoraBotsNetworkOpen",
              "encryption" : "UNSECURE",
              "signal" : -50,
              "macAddress" : "83:E0:F9:55:95:AF",
              "frequency" : 900,
              "saved" : false
            }
          }, {
            "payload" : {
              "ssid" : "ZoraBotsNetworkWEP",
              "encryption" : "WEP",
              "signal" : -70,
              "macAddress" : "83:E0:F9:55:95:AF",
              "frequency" : 3650,
              "saved" : false
            }
          } ]
        }
      }
    },
    "zbos/connection/wifi/connect" : {
      "publish" : {
        "summary" : "Connect to a network",
        "description" : "Connect to a specific WiFi network\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "ssid" : {
                "type" : "string"
              },
              "encryption" : {
                "type" : "string",
                "enum" : [ "UNSECURE", "SHARE", "WEP", "WPA", "WPA_PSK", "WPA_OR_WPA2", "WPA_OR_WPA2_PSK", "WPA2", "WPA2_PSK", "WPA2_EAP", "WAI_CERT", "WAI_PSK" ]
              },
              "password" : {
                "type" : "string"
              },
              "username" : {
                "type" : "string"
              },
              "macAddress" : {
                "type" : "string"
              },
              "isSaved" : {
                "type" : "boolean"
              },
              "hidden" : {
                "type" : "boolean"
              },
              "channel" : {
                "type" : "integer"
              },
              "adapterName" : {
                "type" : "string"
              }
            }
          },
          "name" : "ConnectToNetwork",
          "examples" : [ {
            "payload" : {
              "ssid" : "ZoraNetwork1",
              "encryption" : "WPA2_PSK",
              "password" : "Nice_try123",
              "macAddress" : "83:E0:F9:55:95:AF",
              "hidden" : false,
              "adapterName" : "wlan0",
              "enterpriseNetwork" : false,
              "saved" : false,
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/connection/wifi/connect/event" : {
      "subscribe" : {
        "summary" : "event: Connect to a network",
        "description" : "A (json) message is published when the connection request was successful or not\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "name" : "ConnectionResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "message" : "ZoraBotsNetwork"
            }
          }, {
            "payload" : {
              "success" : true,
              "message" : ""
            }
          }, {
            "payload" : {
              "success" : false,
              "message" : "INVALID_CREDENTIALS"
            }
          } ]
        }
      }
    },
    "zbos/connection/wifi/forget" : {
      "publish" : {
        "summary" : "Forget a network",
        "description" : "Forget a network. If the robot is connected to the given network, it will disconnect\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "ssid" : {
                "type" : "string"
              },
              "macAddress" : {
                "type" : "string"
              },
              "adapterName" : {
                "type" : "string"
              }
            }
          },
          "name" : "ForgetNetwork",
          "examples" : [ {
            "payload" : {
              "ssid" : "ZoraBotsNetworkEnterprise",
              "macAddress" : "wifi_wxvze5651",
              "adapterName" : "wlan0",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/connection/wifi/forget/event" : {
      "subscribe" : {
        "summary" : "event: Forget a network",
        "description" : "A (json) message is published when the forget request was successful or not\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "name" : "ConnectionResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "message" : "ZoraBotsNetwork"
            }
          }, {
            "payload" : {
              "success" : true,
              "message" : ""
            }
          }, {
            "payload" : {
              "success" : false,
              "message" : "INVALID_CREDENTIALS"
            }
          } ]
        }
      }
    },
    "zbos/connection/wifi/list/saved/get" : {
      "publish" : {
        "summary" : "Get the saved networks",
        "description" : "Get an overview of all the networks that are saved on the robotsee <<zbos/connection/wifi/list/saved/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/connection/wifi/list/saved/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get the saved networks",
        "description" : "A list of all the saved networks that are stored on the robot\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "ssid" : {
                  "type" : "string"
                },
                "encryption" : {
                  "type" : "string",
                  "enum" : [ "UNSECURE", "SHARE", "WEP", "WPA", "WPA_PSK", "WPA_OR_WPA2", "WPA_OR_WPA2_PSK", "WPA2", "WPA2_PSK", "WPA2_EAP", "WAI_CERT", "WAI_PSK" ]
                },
                "password" : {
                  "type" : "string"
                },
                "username" : {
                  "type" : "string"
                },
                "hidden" : {
                  "type" : "boolean"
                },
                "networkConfig" : {
                  "type" : "object",
                  "properties" : {
                    "dhcp" : {
                      "type" : "boolean"
                    },
                    "fixedIp4" : {
                      "type" : "string"
                    },
                    "fixedIp6" : {
                      "type" : "string"
                    },
                    "subnetmask" : {
                      "type" : "string"
                    },
                    "gateway" : {
                      "type" : "string"
                    },
                    "adapterName" : {
                      "type" : "string"
                    }
                  }
                },
                "dns" : {
                  "type" : "object",
                  "properties" : {
                    "dns1" : {
                      "type" : "string"
                    },
                    "dns2" : {
                      "type" : "string"
                    },
                    "adapterName" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "name" : "Array<SavedNetwork>",
          "examples" : [ {
            "payload" : {
              "ssid" : "ZoraBotsNetwork",
              "encryption" : "WPA2_PSK",
              "password" : "Nice_try123",
              "hidden" : false,
              "networkConfig" : {
                "dhcp" : false,
                "fixedIp4" : "192.168.5.2",
                "subnetmask" : "255.255.255.0",
                "gateway" : "192.168.5.1",
                "valid" : true
              },
              "dns" : {
                "dns1" : "8.8.8.8",
                "dns2" : "8.8.4.4",
                "valid" : true
              }
            }
          }, {
            "payload" : {
              "ssid" : "ZoraBotsNetworkEnterprise",
              "encryption" : "WPA2_EAP",
              "password" : "Nice_try123",
              "username" : "let_me_see",
              "hidden" : false
            }
          }, {
            "payload" : {
              "ssid" : "ZoraBotsNetworkOpen",
              "encryption" : "UNSECURE",
              "hidden" : false
            }
          }, {
            "payload" : {
              "ssid" : "ZoraBotsNetworkHidden",
              "encryption" : "WEP",
              "password" : "Nice_try123",
              "hidden" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/connection/wifi/network/configure/set" : {
      "publish" : {
        "summary" : "Set network configuration",
        "description" : "Set specific WiFi network configuration (DHCP, IPv4, IPv6, subnetmask, default gateway).see <<zbos/connection/wifi/network/configure/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "dhcp" : {
                "type" : "boolean"
              },
              "fixedIp4" : {
                "type" : "string"
              },
              "fixedIp6" : {
                "type" : "string"
              },
              "subnetmask" : {
                "type" : "string"
              },
              "gateway" : {
                "type" : "string"
              },
              "adapterName" : {
                "type" : "string"
              }
            }
          },
          "name" : "NetworkConfig",
          "examples" : [ {
            "payload" : {
              "dhcp" : false,
              "fixedIp4" : "192.168.0.101",
              "subnetmask" : "255.255.254.0",
              "gateway" : "192.168.0.2",
              "adapterName" : "wlan0",
              "valid" : true
            }
          }, {
            "payload" : {
              "dhcp" : false,
              "fixedIp4" : "192.168.0.101",
              "fixedIp6" : "2a02:1811:b282:ae00:5850:a744:3c37:711b",
              "subnetmask" : "255.255.254.0",
              "gateway" : "192.168.0.2",
              "adapterName" : "wlan1",
              "valid" : true
            }
          }, {
            "payload" : {
              "dhcp" : true,
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/connection/wifi/network/configure/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Set network configuration",
        "description" : "A (json) message is published when saving the configuration was successful or not\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "name" : "ConnectionResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "message" : "ZoraBotsNetwork"
            }
          }, {
            "payload" : {
              "success" : true,
              "message" : ""
            }
          }, {
            "payload" : {
              "success" : false,
              "message" : "INVALID_CREDENTIALS"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/connection/wifi/dns/get" : {
      "publish" : {
        "summary" : "Get DNS configuration",
        "description" : "Get the DNS configuration of the network the robot is connected tosee <<zbos/connection/wifi/dns/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/connection/wifi/dns/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get DNS configuration",
        "description" : "Response with the DNS configuration of the connected network\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "dns1" : {
                "type" : "string"
              },
              "dns2" : {
                "type" : "string"
              },
              "adapterName" : {
                "type" : "string"
              }
            }
          },
          "name" : "DNSConfig",
          "examples" : [ {
            "payload" : {
              "dns1" : "8.8.8.8",
              "dns2" : "8.8.4.4",
              "adapterName" : "wlan0",
              "valid" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/connection/wifi/dns/set" : {
      "publish" : {
        "summary" : "Set DNS configuration",
        "description" : "Set the DNS configuration of the network the robot is connected to.see <<zbos/connection/wifi/dns/set/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "dns1" : {
                "type" : "string"
              },
              "dns2" : {
                "type" : "string"
              },
              "adapterName" : {
                "type" : "string"
              }
            }
          },
          "name" : "DNSConfig",
          "examples" : [ {
            "payload" : {
              "dns1" : "1.1.1.1",
              "dns2" : "1.0.0.1",
              "adapterName" : "wlan0",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/connection/wifi/dns/set/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Set DNS configuration",
        "description" : "A (json) message is published when saving the DNS configuration was successful or not\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "name" : "ConnectionResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "message" : "ZoraBotsNetwork"
            }
          }, {
            "payload" : {
              "success" : true,
              "message" : ""
            }
          }, {
            "payload" : {
              "success" : false,
              "message" : "INVALID_CREDENTIALS"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/connection/ap/config/get" : {
      "publish" : {
        "summary" : "Get access point configuration",
        "description" : "Get the access point configuration of the network that the robot is broadcastingsee <<zbos/connection/ap/config/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/connection/ap/config/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get access point configuration",
        "description" : "Response about the access point that the robot is broadcasting\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "enabled" : {
                "type" : "boolean"
              },
              "ssid" : {
                "type" : "string"
              },
              "password" : {
                "type" : "string"
              },
              "adapterName" : {
                "type" : "string"
              },
              "frequency" : {
                "description" : "Expressed in MHz",
                "type" : "integer"
              }
            }
          },
          "name" : "APConfig",
          "examples" : [ {
            "payload" : {
              "enabled" : true,
              "ssid" : "ZoraBotsHotspot",
              "password" : "hotspot_123",
              "frequency" : 2400
            }
          }, {
            "payload" : {
              "enabled" : false,
              "ssid" : "ZoraBotsHotspot",
              "password" : "hotspot_123",
              "adapterName" : "teth1",
              "frequency" : 5000
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/connection/ap/config/set" : {
      "publish" : {
        "summary" : "Set access point configuration",
        "description" : "Set the access point configuration of the network that the robot is broadcasting.see <<zbos/connection/ap/config/set/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "enabled" : {
                "type" : "boolean"
              },
              "ssid" : {
                "type" : "string"
              },
              "password" : {
                "type" : "string"
              },
              "adapterName" : {
                "type" : "string"
              },
              "frequency" : {
                "description" : "Expressed in MHz",
                "type" : "integer"
              }
            }
          },
          "name" : "APConfig",
          "examples" : [ {
            "payload" : {
              "enabled" : true,
              "ssid" : "ZoraBotsHotspot",
              "password" : "hotspot_123"
            }
          }, {
            "payload" : {
              "enabled" : false,
              "ssid" : "ZoraBotsHotspot",
              "password" : "hotspot_123",
              "adapterName" : "teth1"
            }
          } ]
        }
      }
    },
    "zbos/connection/ap/config/set/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Set access point configuration",
        "description" : "A (json) message is published when saving the access point configuration was successful or not\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "name" : "ConnectionResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "message" : "ZoraBotsNetwork"
            }
          }, {
            "payload" : {
              "success" : true,
              "message" : ""
            }
          }, {
            "payload" : {
              "success" : false,
              "message" : "INVALID_CREDENTIALS"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/connection/ap/enable/event" : {
      "subscribe" : {
        "summary" : "event: Access point enabled",
        "description" : "Triggered when the access point/hotspot is turned on\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/connection/ap/disable/event" : {
      "subscribe" : {
        "summary" : "event: Access point disabled",
        "description" : "Triggered when the access point/hotspot is turned off\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/connection/usb/config/start" : {
      "publish" : {
        "summary" : "Start connecting to a wifi config",
        "description" : "Look for a wifi config on the robot and attempt to connect to it\n",
        "tags" : [ {
          "name" : "Connection",
          "description" : "All connection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/diagnostics/chassis/get" : {
      "publish" : {
        "summary" : "Get diagnostics for chassis",
        "description" : "see <<zbos/diagnostics/chassis/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Diagnostics",
          "description" : "All diagnostics related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/diagnostics/chassis/event" : {
      "subscribe" : {
        "summary" : "event: Chassis state changed",
        "description" : "An event will be published when there is a problem detected with a motor or motor controller.\n",
        "tags" : [ {
          "name" : "Diagnostics",
          "description" : "All diagnostics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "partId" : {
                "description" : "Name of the part",
                "type" : "string"
              },
              "partType" : {
                "description" : "Type of the part",
                "type" : "string",
                "enum" : [ "MOTOR", "MOTOR_CONTROLLER", "SERVO", "SERVO_CONTROLLER", "CPU", "MEMORY", "LIDAR", "POWER_BOARD", "BATTERY" ]
              },
              "info" : {
                "type" : "object",
                "properties" : {
                  "translationKey" : {
                    "description" : "status code",
                    "type" : "string"
                  },
                  "message" : {
                    "description" : "status message",
                    "type" : "string"
                  }
                }
              },
              "temperature" : {
                "description" : "optional, depending on robot",
                "type" : "string"
              }
            }
          },
          "name" : "DiagnosticState",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/diagnostics/chassis/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Diagnostics chassis",
        "description" : "",
        "tags" : [ {
          "name" : "Diagnostics",
          "description" : "All diagnostics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "partId" : {
                  "description" : "Name of the part",
                  "type" : "string"
                },
                "partType" : {
                  "description" : "Type of the part",
                  "type" : "string",
                  "enum" : [ "MOTOR", "MOTOR_CONTROLLER", "SERVO", "SERVO_CONTROLLER", "CPU", "MEMORY", "LIDAR", "POWER_BOARD", "BATTERY" ]
                },
                "info" : {
                  "type" : "object",
                  "properties" : {
                    "translationKey" : {
                      "description" : "status code",
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "status message",
                      "type" : "string"
                    }
                  }
                },
                "temperature" : {
                  "description" : "optional, depending on robot",
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<DiagnosticState>",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/diagnostics/servos/get" : {
      "publish" : {
        "summary" : "Get diagnostics for servos",
        "description" : "see <<zbos/diagnostics/servos/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Diagnostics",
          "description" : "All diagnostics related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/diagnostics/servos/event" : {
      "subscribe" : {
        "summary" : "event: Servo state changed",
        "description" : "An event will be published when there is a problem detected with a servo.\n",
        "tags" : [ {
          "name" : "Diagnostics",
          "description" : "All diagnostics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "partId" : {
                "description" : "Name of the part",
                "type" : "string"
              },
              "partType" : {
                "description" : "Type of the part",
                "type" : "string",
                "enum" : [ "MOTOR", "MOTOR_CONTROLLER", "SERVO", "SERVO_CONTROLLER", "CPU", "MEMORY", "LIDAR", "POWER_BOARD", "BATTERY" ]
              },
              "info" : {
                "type" : "object",
                "properties" : {
                  "translationKey" : {
                    "description" : "status code",
                    "type" : "string"
                  },
                  "message" : {
                    "description" : "status message",
                    "type" : "string"
                  }
                }
              },
              "temperature" : {
                "description" : "optional, depending on robot",
                "type" : "string"
              }
            }
          },
          "name" : "DiagnosticState",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/diagnostics/servos/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Diagnostics servos",
        "description" : "",
        "tags" : [ {
          "name" : "Diagnostics",
          "description" : "All diagnostics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "partId" : {
                  "description" : "Name of the part",
                  "type" : "string"
                },
                "partType" : {
                  "description" : "Type of the part",
                  "type" : "string",
                  "enum" : [ "MOTOR", "MOTOR_CONTROLLER", "SERVO", "SERVO_CONTROLLER", "CPU", "MEMORY", "LIDAR", "POWER_BOARD", "BATTERY" ]
                },
                "info" : {
                  "type" : "object",
                  "properties" : {
                    "translationKey" : {
                      "description" : "status code",
                      "type" : "string"
                    },
                    "message" : {
                      "description" : "status message",
                      "type" : "string"
                    }
                  }
                },
                "temperature" : {
                  "description" : "optional, depending on robot",
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<DiagnosticState>",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/domotics/systems/get" : {
      "publish" : {
        "summary" : "Get domotics systems",
        "description" : "see <<zbos/domotics/systems/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/domotics/systems/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Get domotics systems response",
        "description" : "All domotics systems that are configured\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "unique id of the domotics system",
                  "type" : "string"
                },
                "brand" : {
                  "description" : "brand of the domotics system, eg: homeassistant, creadomotics, ...",
                  "type" : "string"
                },
                "state" : {
                  "description" : "state of the domotics system",
                  "type" : "string",
                  "enum" : [ "initializing", "connecting", "connected", "not_connected" ]
                },
                "name" : {
                  "description" : "human-readable name of the domotics system",
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<DomoticsSystem>",
          "examples" : [ {
            "payload" : [ {
              "id" : "homeassistant_0d8cfe8b42594518975c10ebafe04c0c",
              "brand" : "homeassistant",
              "state" : "initializing",
              "name" : "Home Assistant - Home"
            } ]
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/domotics/systems/changed/event" : {
      "subscribe" : {
        "summary" : "Domotics systems changed event",
        "description" : "Fires all systems when the configuration of any of the domotics systems changes\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "unique id of the domotics system",
                  "type" : "string"
                },
                "brand" : {
                  "description" : "brand of the domotics system, eg: homeassistant, creadomotics, ...",
                  "type" : "string"
                },
                "state" : {
                  "description" : "state of the domotics system",
                  "type" : "string",
                  "enum" : [ "initializing", "connecting", "connected", "not_connected" ]
                },
                "name" : {
                  "description" : "human-readable name of the domotics system",
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<DomoticsSystem>",
          "examples" : [ {
            "payload" : [ {
              "id" : "homeassistant_0d8cfe8b42594518975c10ebafe04c0c",
              "brand" : "homeassistant",
              "state" : "connected",
              "name" : "Home Assistant - Home"
            } ]
          } ]
        }
      }
    },
    "zbos/domotics/devices/get" : {
      "publish" : {
        "summary" : "Get domotics devices",
        "description" : "see <<zbos/domotics/devices/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "ids" : {
                "description" : "Optional, device ids to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "rooms" : {
                "description" : "Optional, room ids to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tags" : {
                "description" : "Optional, tags to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "type" : {
                "description" : "Optional, device type to filter on",
                "type" : "string"
              },
              "system_ids" : {
                "description" : "Optional, system ids to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "with_actions_only" : {
                "description" : "Optional, if set to true, only devices with actions will be returned",
                "type" : "boolean"
              },
              "language" : {
                "description" : "Optional. Set the language for all labels. Otherwise it will be the default language.\nThe language format is ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              }
            }
          },
          "name" : "DomoticsDevicesGetRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc"
            }
          }, {
            "payload" : {
              "key" : "abc",
              "ids" : [ "light.kitchen" ]
            }
          }, {
            "payload" : {
              "key" : "abc",
              "rooms" : [ "kitchen" ]
            }
          }, {
            "payload" : {
              "key" : "abc",
              "tags" : [ "kitchen", "central" ]
            }
          }, {
            "payload" : {
              "key" : "abc",
              "type" : "light"
            }
          }, {
            "payload" : {
              "key" : "abc",
              "system_ids" : [ "homeassistant_0d8cfe8b42594518975c10ebafe04c0c" ]
            }
          }, {
            "payload" : {
              "key" : "abc",
              "with_actions_only" : true
            }
          } ]
        }
      }
    },
    "zbos/domotics/devices/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Get domotics devices response",
        "description" : "All domotics devices that are configured\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "Unique id",
                  "type" : "string"
                },
                "type" : {
                  "description" : "Device type. Different brands have different types",
                  "type" : "string"
                },
                "type_generic" : {
                  "description" : "Generic brand-independent device type",
                  "type" : "string"
                },
                "type_translation" : {
                  "description" : "Human-readable representation of the generic type",
                  "type" : "string"
                },
                "name" : {
                  "description" : "Human-readable name",
                  "type" : "string"
                },
                "room" : {
                  "description" : "Optional, id of the room the device is in",
                  "type" : "string"
                },
                "tags" : {
                  "description" : "Optional, list of tags the device has",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "system_id" : {
                  "description" : "System ID this device belongs to",
                  "type" : "string"
                },
                "brand" : {
                  "description" : "Brand of the system this device belongs to",
                  "type" : "string"
                },
                "actions" : {
                  "description" : "Definitions of all actions you can perform with the device",
                  "type" : "object"
                },
                "attributes" : {
                  "description" : "Definitions of all attributes of the device",
                  "type" : "object"
                }
              }
            }
          },
          "name" : "Array<DomoticsDevice>",
          "examples" : [ {
            "payload" : [ {
              "id" : "light.kitchen",
              "type" : "light",
              "name" : "Central light in the kitchen",
              "room" : "kitchen",
              "tags" : [ "kitchen", "central" ],
              "brand" : "homeassistant",
              "actions" : {
                "turn_on" : {
                  "label" : "Turn On",
                  "components" : {
                    "brightness" : {
                      "required" : false,
                      "type" : "integer",
                      "label" : "Brightness",
                      "range" : {
                        "min" : 0,
                        "max" : 255
                      }
                    }
                  }
                },
                "turn_off" : {
                  "label" : "Turn Off"
                },
                "toggle" : {
                  "label" : "Toggle",
                  "components" : {
                    "brightness" : {
                      "required" : false,
                      "type" : "integer",
                      "label" : "Brightness",
                      "range" : {
                        "min" : 0,
                        "max" : 255
                      }
                    }
                  }
                }
              },
              "attributes" : {
                "state" : {
                  "type" : "select_single",
                  "label" : "State",
                  "options" : [ {
                    "key" : "on",
                    "value" : "on",
                    "label" : "On"
                  }, {
                    "key" : "off",
                    "value" : "off",
                    "label" : "Off"
                  } ]
                },
                "brightness" : {
                  "type" : "integer",
                  "label" : "Brightness",
                  "range" : {
                    "min" : 0,
                    "max" : 255
                  }
                }
              },
              "type_generic" : "light",
              "type_translation" : "Light",
              "system_id" : "homeassistant_0d8cfe8b42594518975c10ebafe04c0c"
            } ]
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/domotics/devices/actions/execute" : {
      "publish" : {
        "summary" : "Update device state",
        "description" : "Updates all devices that match the \"ids\", \"rooms\", \"tags\", and \"system_ids\" filter\n                |Leave any of the filters empty to ignore them.\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "ids" : {
                "description" : "Optional, Ids of the devices",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "rooms" : {
                "description" : "Optional, Rooms of the devices",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tags" : {
                "description" : "Optional, Tags of the devices",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "system_ids" : {
                "description" : "Optional, System Ids of devices",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "type" : {
                "description" : "Type of the device",
                "type" : "string"
              },
              "action" : {
                "description" : "Action that should be performed",
                "type" : "string"
              },
              "attributes" : {
                "description" : "Map of attributes for the action",
                "type" : "object"
              }
            }
          },
          "name" : "DomoticsDevicesActionsExecuteRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "ids" : [ "light.kitchen" ],
              "type" : "light",
              "action" : "turn_on",
              "attributes" : {
                "brightness" : 112
              }
            }
          }, {
            "payload" : {
              "key" : "abc",
              "rooms" : [ "kitchen" ],
              "tags" : [ "central" ],
              "type" : "light",
              "action" : "turn_off",
              "system_ids" : [ "homeassistant_0d8cfe8b42594518975c10ebafe04c0c" ]
            }
          } ]
        }
      }
    },
    "zbos/domotics/devices/actions/execute/response" : {
      "subscribe" : {
        "summary" : "Update device state response",
        "description" : "",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/domotics/states/get" : {
      "publish" : {
        "summary" : "Get domotics states",
        "description" : "see <<zbos/domotics/states/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "ids" : {
                "description" : "Optional, ids to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "rooms" : {
                "description" : "Optional, room ids to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tags" : {
                "description" : "Optional, tags to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "type" : {
                "description" : "Optional, type to filter on",
                "type" : "string"
              },
              "system_ids" : {
                "description" : "Optional, system ids to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "DomoticsStatesGetRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc"
            }
          }, {
            "payload" : {
              "key" : "abc",
              "ids" : [ "light.kitchen" ]
            }
          }, {
            "payload" : {
              "key" : "abc",
              "rooms" : [ "kitchen" ]
            }
          }, {
            "payload" : {
              "key" : "abc",
              "tags" : [ "kitchen", "central" ]
            }
          }, {
            "payload" : {
              "key" : "abc",
              "type" : "light"
            }
          }, {
            "payload" : {
              "key" : "abc",
              "system_ids" : [ "homeassistant_0d8cfe8b42594518975c10ebafe04c0c" ]
            }
          } ]
        }
      }
    },
    "zbos/domotics/states/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Get domotics states response",
        "description" : "All the domotics states with their full data\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "Unique id",
                  "type" : "string"
                },
                "type" : {
                  "description" : "Device type",
                  "type" : "string"
                },
                "name" : {
                  "description" : "Human-readable name",
                  "type" : "string"
                },
                "room" : {
                  "description" : "Optional, id of the room the device is in",
                  "type" : "string"
                },
                "tags" : {
                  "description" : "Optional, list of tags the device has",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "system_id" : {
                  "description" : "System ID this device belongs to",
                  "type" : "string"
                },
                "brand" : {
                  "description" : "Brand of the system this device belongs to",
                  "type" : "string"
                },
                "state" : {
                  "description" : "The main state value",
                  "type" : "string"
                },
                "data" : {
                  "description" : "The entire JSON as returned by the domotics system",
                  "type" : "object"
                }
              }
            }
          },
          "name" : "Array<DomoticsState>",
          "examples" : [ {
            "payload" : [ {
              "id" : "light.kitchen",
              "type" : "light",
              "name" : "Central light in the kitchen",
              "room" : "kitchen",
              "tags" : [ "kitchen", "central" ],
              "brand" : "homeassistant",
              "state" : "on",
              "data" : {
                "entity_id" : {
                  "content" : "light.kitchen",
                  "string" : true
                },
                "state" : {
                  "content" : "on",
                  "string" : true
                },
                "attributes" : {
                  "supported_color_modes" : [ {
                    "content" : "brightness",
                    "string" : true
                  } ],
                  "color_mode" : {
                    "content" : "brightness",
                    "string" : true
                  },
                  "brightness" : {
                    "content" : "22",
                    "string" : false
                  },
                  "friendly_name" : {
                    "content" : "Central light in the kitchen",
                    "string" : true
                  },
                  "supported_features" : {
                    "content" : "0",
                    "string" : false
                  }
                },
                "last_changed" : {
                  "content" : "2021-07-08T07:06:46.351322+00:00",
                  "string" : true
                },
                "last_updated" : {
                  "content" : "2021-07-08T07:07:14.279327+00:00",
                  "string" : true
                },
                "context" : {
                  "id" : {
                    "content" : "4dd02cfa0ba03df611e6b468d84a61b0",
                    "string" : true
                  },
                  "parent_id" : {
                    "content" : "null",
                    "string" : false
                  },
                  "user_id" : {
                    "content" : "null",
                    "string" : false
                  }
                }
              },
              "system_id" : "homeassistant_0d8cfe8b42594518975c10ebafe04c0c"
            } ]
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/domotics/states/changed/event" : {
      "subscribe" : {
        "summary" : "Domotics state changed event",
        "description" : "Fired when a state changed\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "description" : "Unique id",
                "type" : "string"
              },
              "type" : {
                "description" : "Device type",
                "type" : "string"
              },
              "name" : {
                "description" : "Human-readable name",
                "type" : "string"
              },
              "room" : {
                "description" : "Optional, id of the room the device is in",
                "type" : "string"
              },
              "tags" : {
                "description" : "Optional, list of tags the device has",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "system_id" : {
                "description" : "System ID this device belongs to",
                "type" : "string"
              },
              "brand" : {
                "description" : "Brand of the system this device belongs to",
                "type" : "string"
              },
              "state" : {
                "description" : "The main state value",
                "type" : "string"
              },
              "data" : {
                "description" : "The entire JSON as returned by the domotics system",
                "type" : "object"
              }
            }
          },
          "name" : "DomoticsState",
          "examples" : [ {
            "payload" : {
              "id" : "light.kitchen",
              "type" : "light",
              "name" : "Central light in the kitchen",
              "room" : "kitchen",
              "tags" : [ "kitchen", "central" ],
              "brand" : "homeassistant",
              "state" : "on",
              "data" : {
                "entity_id" : {
                  "content" : "light.kitchen",
                  "string" : true
                },
                "old_state" : {
                  "entity_id" : {
                    "content" : "light.kitchen",
                    "string" : true
                  },
                  "state" : {
                    "content" : "on",
                    "string" : true
                  },
                  "attributes" : {
                    "supported_color_modes" : [ {
                      "content" : "brightness",
                      "string" : true
                    } ],
                    "color_mode" : {
                      "content" : "brightness",
                      "string" : true
                    },
                    "brightness" : {
                      "content" : "22",
                      "string" : false
                    },
                    "friendly_name" : {
                      "content" : "Central light in the kitchen",
                      "string" : true
                    },
                    "supported_features" : {
                      "content" : "0",
                      "string" : false
                    }
                  },
                  "last_changed" : {
                    "content" : "2021-07-08T07:06:46.351322+00:00",
                    "string" : true
                  },
                  "last_updated" : {
                    "content" : "2021-07-08T07:07:14.279327+00:00",
                    "string" : true
                  },
                  "context" : {
                    "id" : {
                      "content" : "4dd02cfa0ba03df611e6b468d84a61b0",
                      "string" : true
                    },
                    "parent_id" : {
                      "content" : "null",
                      "string" : false
                    },
                    "user_id" : {
                      "content" : "null",
                      "string" : false
                    }
                  }
                },
                "new_state" : {
                  "entity_id" : {
                    "content" : "light.kitchen",
                    "string" : true
                  },
                  "state" : {
                    "content" : "off",
                    "string" : true
                  },
                  "attributes" : {
                    "supported_color_modes" : [ {
                      "content" : "brightness",
                      "string" : true
                    } ],
                    "color_mode" : {
                      "content" : "brightness",
                      "string" : true
                    },
                    "brightness" : {
                      "content" : "0",
                      "string" : false
                    },
                    "friendly_name" : {
                      "content" : "Central light in the kitchen",
                      "string" : true
                    },
                    "supported_features" : {
                      "content" : "0",
                      "string" : false
                    }
                  },
                  "last_changed" : {
                    "content" : "2021-07-08T07:06:46.351322+00:00",
                    "string" : true
                  },
                  "last_updated" : {
                    "content" : "2021-07-08T07:07:14.279327+00:00",
                    "string" : true
                  },
                  "context" : {
                    "id" : {
                      "content" : "4dd02cfa0ba03df611e6b468d84a61b0",
                      "string" : true
                    },
                    "parent_id" : {
                      "content" : "null",
                      "string" : false
                    },
                    "user_id" : {
                      "content" : "null",
                      "string" : false
                    }
                  }
                }
              },
              "system_id" : "homeassistant_0d8cfe8b42594518975c10ebafe04c0c"
            }
          } ]
        }
      }
    },
    "zbos/domotics/events/types/get" : {
      "publish" : {
        "summary" : "Get domotics event types",
        "description" : "see <<zbos/domotics/events/types/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "system_ids" : {
                "description" : "Optional, system ids to filter on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "DomoticsEventTypesGetRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "system_ids" : [ "homeassistant_0d8cfe8b42594518975c10ebafe04c0c" ]
            }
          } ]
        }
      }
    },
    "zbos/domotics/events/types/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Get domotics event types response",
        "description" : "All the possible event types that can occur\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "description" : "Type key of the event type",
                  "type" : "string"
                },
                "system_ids" : {
                  "description" : "System ids that have this event type",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "name" : "Array<DomoticsEventType>",
          "examples" : [ {
            "payload" : [ {
              "type" : "knx_event",
              "system_ids" : [ "homeassistant_0d8cfe8b42594518975c10ebafe04c0c" ]
            } ]
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/domotics/events/event" : {
      "subscribe" : {
        "summary" : "Domotics event",
        "description" : "Fired when a domotics event is fired\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "type" : {
                "description" : "Type of the event",
                "type" : "string"
              },
              "system_id" : {
                "description" : "System ID this event originates from",
                "type" : "string"
              },
              "data" : {
                "description" : "The entire JSON of the event data, as returned by the domotics system",
                "type" : "object"
              }
            }
          },
          "name" : "DomoticsEvent",
          "examples" : [ {
            "payload" : {
              "type" : "knx_event",
              "data" : {
                "data" : [ {
                  "content" : "255",
                  "string" : false
                } ],
                "destination" : {
                  "content" : "0/4/1",
                  "string" : true
                },
                "direction" : {
                  "content" : "Incoming",
                  "string" : true
                },
                "source" : {
                  "content" : "1.1.1",
                  "string" : true
                },
                "telegramtype" : {
                  "content" : "GroupValueWrite",
                  "string" : true
                }
              },
              "system_id" : "homeassistant_0d8cfe8b42594518975c10ebafe04c0c"
            }
          } ]
        }
      }
    },
    "zbos/domotics/camera/image/get" : {
      "publish" : {
        "summary" : "Get camera image",
        "description" : "see <<zbos/domotics/camera/image/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "id" : {
                "description" : "Required ID of the camera device",
                "type" : "string"
              },
              "system_id" : {
                "description" : "Optional, system id to filter on",
                "type" : "string"
              }
            }
          },
          "name" : "DomoticsCameraImageGetRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "camera.frontdoor",
              "system_id" : "homeassistant_0d8cfe8b42594518975c10ebafe04c0c"
            }
          } ]
        }
      }
    },
    "zbos/domotics/camera/image/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Get domotics image response",
        "description" : "Image of the camera\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "base64" : {
                "description" : "Base64-encoded representation of the image",
                "type" : "string"
              }
            }
          },
          "name" : "DomoticsCameraImageResponse",
          "examples" : [ {
            "payload" : {
              "base64" : "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mM81MX1HwAFwwJXcxcsuQAAAABJRU5ErkJggg"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/domotics/homeassistant/services/call" : {
      "publish" : {
        "summary" : "Call Home Assistant service",
        "description" : "Call a Home Assistant service, see https://www.home-assistant.io/docs/scripts/service-calls[^] for more information.\n",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "domain" : {
                "description" : "The domain of the service, eg: 'light'",
                "type" : "string"
              },
              "service" : {
                "description" : "The service itself, eg: 'turn_on'",
                "type" : "string"
              },
              "data" : {
                "description" : "The data that should be passed to the service",
                "type" : "object"
              },
              "system_ids" : {
                "description" : "Optional, system ids of Home Assistant instances this call should execute on",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "HomeAssistantServiceCall",
          "examples" : [ {
            "payload" : {
              "domain" : "light",
              "service" : "turn_on",
              "data" : {
                "entity_id" : "light.kitchen",
                "brightness" : 50
              },
              "system_ids" : [ "homeassistant_0d8cfe8b42594518975c10ebafe04c0c" ]
            }
          } ]
        }
      }
    },
    "zbos/domotics/homeassistant/services/call_response" : {
      "subscribe" : {
        "summary" : "Call Home Assistant service response",
        "description" : "",
        "tags" : [ {
          "name" : "Domotics",
          "description" : "All domotics related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/facetracking/start" : {
      "publish" : {
        "summary" : "Start continuous facetracking, see <<zbos/facetracking/detected/faces>> for events",
        "description" : "",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/facetracking/stop" : {
      "publish" : {
        "summary" : "Stop continuous facetracking",
        "description" : "",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/facetracking/detected/faces" : {
      "subscribe" : {
        "summary" : "event: Detected faces",
        "description" : "",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "uuid" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "role" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<Person>",
          "examples" : [ {
            "payload" : {
              "uuid" : "some uuid",
              "name" : "some name",
              "role" : "some description"
            }
          }, {
            "payload" : {
              "name" : "unknown"
            }
          } ]
        }
      }
    },
    "zbos/facetracking/response" : {
      "subscribe" : {
        "summary" : "Faces found in picture",
        "description" : "This topic will be published when faces are detected in a picture.\n",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "uuid" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "role" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<Person>",
          "examples" : [ {
            "payload" : {
              "uuid" : "some uuid",
              "name" : "some name",
              "role" : "some description"
            }
          }, {
            "payload" : {
              "name" : "unknown"
            }
          } ]
        }
      }
    },
    "zbos/facetracking/add_request" : {
      "publish" : {
        "summary" : "Add a person",
        "description" : "see <<zbos/facetracking/add_response>> for response\n",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string"
              },
              "role" : {
                "description" : "Optional, a descriptor for this person",
                "type" : "string"
              },
              "ImageString" : {
                "description" : "Optional, if this has a value (in base64) the given image will be used. Otherwise, a stream will be started to find a new person",
                "type" : "string"
              },
              "options" : {
                "description" : "Optional, the global options will be used if no value is given",
                "type" : "object",
                "properties" : {
                  "mode" : {
                    "description" : "How closely the person must match",
                    "type" : "string",
                    "enum" : [ "LOOSE", "NORMAL", "STRICT" ]
                  },
                  "tries" : {
                    "description" : "How many times to check for a person before giving up",
                    "type" : "integer"
                  },
                  "timeout" : {
                    "description" : "How long to look for a person before giving up",
                    "type" : "integer"
                  }
                }
              }
            }
          },
          "name" : "PersonAddRequest",
          "examples" : [ {
            "payload" : {
              "name" : "some name",
              "role" : "some description"
            }
          }, {
            "payload" : {
              "name" : "another name",
              "options" : {
                "mode" : "STRICT",
                "tries" : 5,
                "timeout" : 60
              },
              "role" : "another description",
              "ImageString" : "some base64 image"
            }
          } ]
        }
      }
    },
    "zbos/facetracking/add_response" : {
      "subscribe" : {
        "summary" : "response: Add a person",
        "description" : "",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/facetracking/update_request" : {
      "publish" : {
        "summary" : "Add a new face to an existing person",
        "description" : "[DEPRECATED]\nAdding multiple faces is no longer necessary or supported\n\nsee <<zbos/facetracking/update_response>> for response\n",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/facetracking/update_response" : {
      "subscribe" : {
        "summary" : "response: Add a new face to an existing person",
        "description" : "[DEPRECATED]\nAdding multiple faces is no longer necessary or supported\n\n",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/facetracking/update_person_request" : {
      "publish" : {
        "summary" : "Update a person",
        "description" : "see <<zbos/facetracking/update_person_response>> for response\n",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "uuid" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "role" : {
                "type" : "string"
              }
            }
          },
          "name" : "Person",
          "examples" : [ {
            "payload" : {
              "uuid" : "some uuid",
              "name" : "some new name",
              "role" : "some new description"
            }
          } ]
        }
      }
    },
    "zbos/facetracking/update_person_response" : {
      "subscribe" : {
        "summary" : "response: Update a person",
        "description" : "",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/facetracking/delete_request" : {
      "publish" : {
        "summary" : "Delete a person",
        "description" : "see <<zbos/facetracking/delete_response>> for response\n",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "uuid" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "role" : {
                "type" : "string"
              }
            }
          },
          "name" : "Person",
          "examples" : [ {
            "payload" : {
              "uuid" : "some uuid"
            }
          } ]
        }
      }
    },
    "zbos/facetracking/delete_response" : {
      "subscribe" : {
        "summary" : "response: Delete a person",
        "description" : "",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/facetracking/name_request" : {
      "publish" : {
        "summary" : "Request the list of registered persons",
        "description" : "see <<zbos/facetracking/name_response>> for response\n",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/facetracking/name_response" : {
      "subscribe" : {
        "summary" : "response: Request the list of registered persons",
        "description" : "",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "uuid" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "role" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<Person>"
        }
      }
    },
    "zbos/facetracking/persondata_request" : {
      "publish" : {
        "summary" : "Request all data of a person",
        "description" : "see <<zbos/facetracking/persondata_response>> for response\n",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "uuid" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "role" : {
                "type" : "string"
              }
            }
          },
          "name" : "Person",
          "examples" : [ {
            "payload" : {
              "uuid" : "some uuid"
            }
          } ]
        }
      }
    },
    "zbos/facetracking/persondata_response" : {
      "subscribe" : {
        "summary" : "response: Request all data of a person",
        "description" : "",
        "tags" : [ {
          "name" : "Face tracking",
          "description" : "All face tracking related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "uuid" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "role" : {
                "type" : "string"
              },
              "image" : {
                "description" : "A base64 image of this person",
                "type" : "string"
              }
            }
          },
          "name" : "PersonGetResponse",
          "examples" : [ {
            "payload" : {
              "uuid" : "some uuid",
              "name" : "some name",
              "image" : "some base64 image",
              "role" : "some description"
            }
          } ]
        }
      }
    },
    "zbos/kiosk/resume/event" : {
      "subscribe" : {
        "summary" : "event: Kiosk is active",
        "description" : "Fired when kiosk is active after being moved to the background\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/kiosk/view/change/event" : {
      "subscribe" : {
        "summary" : "event: Kiosk view has changed",
        "description" : "Fired when the kiosk view has changed\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "view" : {
                "type" : "string",
                "enum" : [ "kiosk", "settings", "wifi", "hotspot", "quiet_hours", "voip_errors", "reset", "language", "account_link", "local_account_link", "activate_hotword", "action_button", "website", "image", "video", "input", "print", "text_overlay", "loading", "subtitle_overlay", "screensaver" ]
              }
            }
          },
          "name" : "KioskViewChangedEvent",
          "examples" : [ {
            "payload" : {
              "view" : "kiosk"
            }
          } ]
        }
      }
    },
    "zbos/kiosk/ready/get" : {
      "subscribe" : {
        "summary" : "Get kiosk ready",
        "description" : "see <<zbos/kiosk/ready/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/kiosk/ready/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Kiosk ready",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "is_ready" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "KioskReadyPayload",
          "examples" : [ {
            "payload" : {
              "ready" : true,
              "is_ready" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/kiosk/ready/event" : {
      "subscribe" : {
        "summary" : "event: Kiosk ready",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "is_ready" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "KioskReadyPayload",
          "examples" : [ {
            "payload" : {
              "ready" : true,
              "is_ready" : true
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/apps/home" : {
      "publish" : {
        "summary" : "Open home screen",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/remote/kiosk/apps/start" : {
      "publish" : {
        "summary" : "Start application remotely on Kiosk",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "appName" : {
                "type" : "string"
              },
              "extras" : {
                "type" : "object"
              }
            }
          },
          "name" : "ApplicationStartRequest",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/apps/get" : {
      "publish" : {
        "summary" : "Get installed applications on Kiosk",
        "description" : "Request a list of all installed & listed applications from the Kiosksee <<zbos/remote/kiosk/apps/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/remote/kiosk/apps/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get installed applications on Kiosk",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "app_name" : {
                  "type" : "string"
                },
                "package_name" : {
                  "type" : "string"
                },
                "image_base64" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<SimpleApplicationNodeDto>",
          "examples" : [ {
            "payload" : {
              "app_name" : "string",
              "package_name" : "string",
              "image_base64" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/apps/all/get" : {
      "publish" : {
        "summary" : "Get installed applications on Kiosk",
        "description" : "Request a list of all installed & listed applications from the Kiosksee <<zbos/remote/kiosk/apps/all/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/remote/kiosk/apps/all/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get installed applications on Kiosk",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "app_name" : {
                  "type" : "string"
                },
                "package_name" : {
                  "type" : "string"
                },
                "image_base64" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<SimpleApplicationNodeDto>",
          "examples" : [ {
            "payload" : {
              "app_name" : "string",
              "package_name" : "string",
              "image_base64" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/input/show" : {
      "publish" : {
        "summary" : "Show input prompt",
        "description" : "see <<zbos/remote/kiosk/input/show/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "question" : {
                "type" : "string"
              },
              "textType" : {
                "type" : "string"
              },
              "confirmText" : {
                "type" : "string"
              },
              "executionId" : {
                "type" : "string"
              }
            }
          },
          "name" : "ShowInputRequest",
          "examples" : [ {
            "payload" : {
              "question" : "string",
              "textType" : "string",
              "confirmText" : "string"
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/input/show/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Show input prompt",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "input" : {
                "type" : "string"
              }
            }
          },
          "name" : "InputResponse",
          "examples" : [ {
            "payload" : {
              "input" : "input"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/print/show" : {
      "publish" : {
        "summary" : "Show print dialog",
        "description" : "see <<zbos/remote/kiosk/print/show/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "file_path" : {
                "description" : "Required. The path to a PDF file to print.",
                "type" : "string"
              },
              "media_size" : {
                "description" : "Optional. The format of the paper to be printed, defaults to 'Letter'",
                "type" : "string"
              },
              "printer_name" : {
                "description" : "Optional, only used when auto print is enabled. The name of or part of the name of a printer, defaults to first available printer",
                "type" : "string"
              },
              "auto_print" : {
                "description" : "Optional. Whether to use the accessibility service to automatically print to the desired printer without user input",
                "type" : "boolean"
              },
              "execution_id" : {
                "type" : "string"
              }
            }
          },
          "name" : "PrintOptions",
          "examples" : [ {
            "payload" : {
              "key" : "some_key",
              "file_path" : "/sdcard/zbos_media_library/dummy.pdf",
              "media_size" : "ISO_A4",
              "printer_name" : "HP LaserJet Pro",
              "auto_print" : true
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/print/show/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Show print dialog",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/text/overlay/show" : {
      "publish" : {
        "summary" : "Show text overlay",
        "description" : "see <<zbos/remote/kiosk/text/overlay/show/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "text" : {
                "type" : "string"
              },
              "textColor" : {
                "type" : "string"
              },
              "backgroundColor" : {
                "type" : "string"
              },
              "executionId" : {
                "type" : "string"
              }
            }
          },
          "name" : "TextOverlayOptions",
          "examples" : [ {
            "payload" : {
              "key" : "some_key",
              "text" : "Hello George, nice to meet you!",
              "textColor" : "#00FF00",
              "backgroundColor" : "#FF0000",
              "executionId" : "execution_id_1"
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/text/overlay/show/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Show text overlay",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/text/overlay/hide" : {
      "publish" : {
        "summary" : "Hide text overlay",
        "description" : "see <<zbos/remote/kiosk/text/overlay/hide/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/remote/kiosk/text/overlay/hide/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Hide text overlay",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/microphone/show" : {
      "publish" : {
        "summary" : "Show microphone in composition",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "showMic" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "VoiceInfo",
          "examples" : [ {
            "payload" : {
              "showMic" : true
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/multimedia/image/show" : {
      "publish" : {
        "summary" : "Show image",
        "description" : "see <<zbos/remote/kiosk/multimedia/image/show/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "path" : {
                "type" : "string"
              },
              "extension" : {
                "type" : "string"
              },
              "fileName" : {
                "type" : "string"
              },
              "style" : {
                "type" : "object",
                "properties" : {
                  "backgroundColor" : {
                    "type" : "string"
                  },
                  "scaleType" : {
                    "type" : "string",
                    "enum" : [ "MATRIX", "FIT_XY", "FIT_START", "FIT_CENTER", "FIT_END", "CENTER", "CENTER_CROP", "CENTER_INSIDE" ]
                  }
                }
              },
              "url" : {
                "type" : "string"
              },
              "executionId" : {
                "type" : "string"
              },
              "targetDisplayId" : {
                "type" : "string"
              }
            }
          },
          "name" : "Image",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "style" : {
                "backgroundColor" : "string",
                "scaleType" : "FIT_CENTER"
              },
              "url" : "string",
              "targetDisplayId" : "main_display"
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/multimedia/image/show/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Show image",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "path" : {
                "type" : "string"
              },
              "extension" : {
                "type" : "string"
              },
              "fileName" : {
                "type" : "string"
              },
              "style" : {
                "type" : "object",
                "properties" : {
                  "backgroundColor" : {
                    "type" : "string"
                  },
                  "scaleType" : {
                    "type" : "string",
                    "enum" : [ "MATRIX", "FIT_XY", "FIT_START", "FIT_CENTER", "FIT_END", "CENTER", "CENTER_CROP", "CENTER_INSIDE" ]
                  }
                }
              },
              "url" : {
                "type" : "string"
              },
              "executionId" : {
                "type" : "string"
              },
              "targetDisplayId" : {
                "type" : "string"
              }
            }
          },
          "name" : "Image",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "style" : {
                "backgroundColor" : "string",
                "scaleType" : "CENTER_INSIDE"
              },
              "url" : "string",
              "targetDisplayId" : "main_display"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/multimedia/image/stop" : {
      "publish" : {
        "summary" : "Stop showing image",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/remote/kiosk/multimedia/image/{filename}/end" : {
      "subscribe" : {
        "summary" : "event: Image ended",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "filename" : {
          "description" : "Name of the file",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/multimedia/video/show" : {
      "publish" : {
        "summary" : "Show video",
        "description" : "see <<zbos/remote/kiosk/multimedia/video/show/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "url" : {
                "type" : "string"
              },
              "repeat" : {
                "type" : "boolean"
              },
              "audioUrl" : {
                "type" : "string"
              },
              "videoOnly" : {
                "type" : "boolean"
              },
              "showControls" : {
                "type" : "boolean"
              },
              "executionId" : {
                "type" : "string"
              },
              "targetDisplayId" : {
                "type" : "string"
              }
            }
          },
          "name" : "Video",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "url" : "string",
              "repeat" : true,
              "audioUrl" : "string",
              "videoOnly" : false,
              "showControls" : true,
              "targetDisplayId" : "main_display",
              "remoteVideo" : false
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/multimedia/video/show/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Show video",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "url" : {
                "type" : "string"
              },
              "repeat" : {
                "type" : "boolean"
              },
              "audioUrl" : {
                "type" : "string"
              },
              "videoOnly" : {
                "type" : "boolean"
              },
              "showControls" : {
                "type" : "boolean"
              },
              "executionId" : {
                "type" : "string"
              },
              "targetDisplayId" : {
                "type" : "string"
              }
            }
          },
          "name" : "Video",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "url" : "string",
              "repeat" : true,
              "audioUrl" : "string",
              "videoOnly" : false,
              "showControls" : true,
              "targetDisplayId" : "main_display",
              "remoteVideo" : false
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/multimedia/video/stop" : {
      "publish" : {
        "summary" : "Stop video",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/remote/kiosk/multimedia/video/{filename}/end" : {
      "subscribe" : {
        "summary" : "event: Video ended",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "filename" : {
          "description" : "Name of the file",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/multimedia/page/show" : {
      "publish" : {
        "summary" : "Show page in kiosk",
        "description" : "see <<zbos/remote/kiosk/multimedia/page/show/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "url" : {
                "type" : "string"
              },
              "executionId" : {
                "type" : "string"
              }
            }
          },
          "name" : "OpenBrowserRequest",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "url" : "string"
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/multimedia/page/show/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Show page in kiosk",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "url" : {
                "type" : "string"
              },
              "executionId" : {
                "type" : "string"
              }
            }
          },
          "name" : "OpenBrowserRequest",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "url" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/remote/kiosk/action/start" : {
      "publish" : {
        "summary" : "Start action",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : { }
          },
          "name" : "Action"
        }
      }
    },
    "zbos/remote/kiosk/settings/lock/state/get" : {
      "publish" : {
        "summary" : "Get current lockstate",
        "description" : "see <<zbos/remote/kiosk/settings/lock/state/response>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/remote/kiosk/settings/lock/state/response" : {
      "subscribe" : {
        "summary" : "response: Get current lockstate",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "isLocked" : {
                "type" : "boolean"
              },
              "isPincodeSet" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "LockStatus",
          "examples" : [ {
            "payload" : {
              "locked" : true,
              "pincodeSet" : false
            }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/settings/unlock" : {
      "publish" : {
        "summary" : "Unlock settings page",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/remote/kiosk/settings/lock" : {
      "publish" : {
        "summary" : "Lock settings page",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/remote/kiosk/settings/lock/event" : {
      "subscribe" : {
        "summary" : "response: Lock settings page",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "response" : {
                "type" : "string"
              },
              "success" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "LockResponse",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/settings/unlock/event" : {
      "subscribe" : {
        "summary" : "response: Unlock settings page",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "response" : {
                "type" : "string"
              },
              "success" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "LockResponse",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/settings/pincode/change/event" : {
      "subscribe" : {
        "summary" : "response: Change current pincode",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "response" : {
                "type" : "string"
              },
              "success" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "LockResponse",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/remote/kiosk/settings/pincode/remove" : {
      "publish" : {
        "summary" : "Remove current pincode",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/remote/kiosk/settings/pincode/remove/event" : {
      "subscribe" : {
        "summary" : "response: Remove current pincode",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "response" : {
                "type" : "string"
              },
              "success" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "LockResponse",
          "examples" : [ {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/kiosk/datasource/get/all" : {
      "publish" : {
        "summary" : "Get all datasources",
        "description" : "see <<zbos/kiosk/datasource/get/all/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/kiosk/datasource/get/all/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get all datasources",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<SimpleDataSource>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/kiosk/datasource/get" : {
      "publish" : {
        "summary" : "Get specific datasources",
        "description" : "see <<zbos/kiosk/datasource/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleDataSource",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "string"
            }
          } ]
        }
      }
    },
    "zbos/kiosk/datasource/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get specific datasources",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/kiosk/datasource/current/get" : {
      "publish" : {
        "summary" : "Get active datasource ID",
        "description" : "see <<zbos/kiosk/datasource/current/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/kiosk/datasource/current/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get active datasource ID",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/kiosk/datasource/set" : {
      "publish" : {
        "summary" : "Set current Kiosk datasources",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              }
            }
          },
          "name" : "ChangeDatasourceRequest",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/kiosk/datasource/save" : {
      "publish" : {
        "summary" : "Save or add a datasource",
        "description" : "see <<zbos/kiosk/datasource/save/event/{kiosk_id}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleDataSource",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "String"
            }
          } ]
        }
      }
    },
    "zbos/kiosk/datasource/save/event/{kiosk_id}" : {
      "subscribe" : {
        "summary" : "response: Get active datasources",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "kiosk_id" : {
          "description" : "ID of kiosk",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/kiosk/datasource/delete" : {
      "publish" : {
        "summary" : "Delete a datasource",
        "description" : "see <<zbos/kiosk/datasource/delete/event/{kiosk_id}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleDataSource",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/kiosk/datasource/delete/event/{kiosk_id}" : {
      "subscribe" : {
        "summary" : "response: Delete a datasource",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "kiosk_id" : {
          "description" : "ID of kiosk",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/kiosk/datasource/layout/info/get" : {
      "publish" : {
        "summary" : "Get datasource layout info",
        "description" : "see <<zbos/kiosk/datasource/layout/info/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/kiosk/datasource/layout/info/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get datasource layout info",
        "description" : "",
        "tags" : [ {
          "name" : "Kiosk",
          "description" : "All kiosk related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "grid_info" : {
                "type" : "object",
                "properties" : {
                  "default_columns" : {
                    "type" : "integer"
                  },
                  "default_rows" : {
                    "type" : "integer"
                  },
                  "max_columns" : {
                    "type" : "integer"
                  },
                  "max_rows" : {
                    "type" : "integer"
                  }
                }
              }
            }
          },
          "name" : "LayoutInfo",
          "examples" : [ {
            "payload" : {
              "grid_info" : {
                "default_columns" : 4,
                "default_rows" : 2,
                "max_columns" : 6,
                "max_rows" : 4
              }
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/leds/chestlight/set" : {
      "publish" : {
        "summary" : "Set chest light color",
        "description" : "",
        "tags" : [ {
          "name" : "Leds",
          "description" : "All leds related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "part" : {
                "type" : "string",
                "enum" : [ "CHEST", "MOUTH", "EYES", "HEAD", "SPEECH" ]
              },
              "color" : {
                "description" : "The format is \"#FF0000\" (red)",
                "type" : "string"
              },
              "breathe" : {
                "type" : "boolean"
              },
              "breathDuration" : {
                "type" : "integer"
              },
              "duration" : {
                "type" : "integer"
              }
            }
          },
          "name" : "LedOptions",
          "examples" : [ {
            "payload" : {
              "part" : "CHEST",
              "color" : "#ff077e",
              "breathDuration" : 1500,
              "duration" : -1
            }
          } ]
        }
      }
    },
    "zbos/media/library/list" : {
      "publish" : {
        "summary" : "List all media libraries",
        "description" : "[DEPRECATED]\nPlease use <<zbos/media/library/list/get>>\n\n",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/media/library/list/event" : {
      "subscribe" : {
        "summary" : "event: Listing all media libraries",
        "description" : "",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/media/library/list/get" : {
      "publish" : {
        "summary" : "Get a list of media items",
        "description" : "see <<zbos/media/library/list/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "limit" : {
                "type" : "integer"
              },
              "offset" : {
                "type" : "integer"
              },
              "filters" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "field" : {
                      "description" : "Field to check on. Note that the field should be camelCase, not snake_case",
                      "type" : "string"
                    },
                    "value" : {
                      "description" : "Value to check on. For numbers you should use 'min' and 'max'.",
                      "type" : "string"
                    },
                    "min" : {
                      "description" : "Minimum value, only usable for number fields",
                      "type" : "number"
                    },
                    "max" : {
                      "description" : "Maximum value, only usable for number fields",
                      "type" : "number"
                    },
                    "direction" : {
                      "description" : "Direction to sort on.\nCan be 'asc' or 'desc'.\nThe default direction is 'asc'",
                      "type" : "string",
                      "enum" : [ "asc", "desc" ]
                    },
                    "operator" : {
                      "description" : "Operator for either the child filters, or this filter object itself.\nCan be 'and', 'or' or 'not'.\nDefault is 'and'.\nThe root operator is always 'and'",
                      "type" : "string",
                      "enum" : [ "and", "or", "not" ]
                    },
                    "match_type" : {
                      "description" : "Match type for string values.\nCan be 'exact', 'contains', 'starts_with', 'ends_with'.\nThe default match_type is 'contains'",
                      "type" : "string",
                      "enum" : [ "exact", "contains", "starts_with", "ends_with" ]
                    },
                    "filters" : {
                      "description" : "Filters on which the operator will be applied.\nIf there are no child filters, the operator will be applied to the filter object itself.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "field_filters" : {
                      "description" : "Filters to apply on the child fields of the field.\nWill only work if the field is an object, array/list or map.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                }
              },
              "sort" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "field" : {
                      "description" : "Field to check on. Note that the field should be camelCase, not snake_case",
                      "type" : "string"
                    },
                    "value" : {
                      "description" : "Value to check on. For numbers you should use 'min' and 'max'.",
                      "type" : "string"
                    },
                    "min" : {
                      "description" : "Minimum value, only usable for number fields",
                      "type" : "number"
                    },
                    "max" : {
                      "description" : "Maximum value, only usable for number fields",
                      "type" : "number"
                    },
                    "direction" : {
                      "description" : "Direction to sort on.\nCan be 'asc' or 'desc'.\nThe default direction is 'asc'",
                      "type" : "string",
                      "enum" : [ "asc", "desc" ]
                    },
                    "operator" : {
                      "description" : "Operator for either the child filters, or this filter object itself.\nCan be 'and', 'or' or 'not'.\nDefault is 'and'.\nThe root operator is always 'and'",
                      "type" : "string",
                      "enum" : [ "and", "or", "not" ]
                    },
                    "match_type" : {
                      "description" : "Match type for string values.\nCan be 'exact', 'contains', 'starts_with', 'ends_with'.\nThe default match_type is 'contains'",
                      "type" : "string",
                      "enum" : [ "exact", "contains", "starts_with", "ends_with" ]
                    },
                    "filters" : {
                      "description" : "Filters on which the operator will be applied.\nIf there are no child filters, the operator will be applied to the filter object itself.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "field_filters" : {
                      "description" : "Filters to apply on the child fields of the field.\nWill only work if the field is an object, array/list or map.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "FilteringRequest",
          "examples" : [ {
            "payload" : {
              "key" : "Test123",
              "limit" : 50,
              "offset" : 10,
              "filters" : [ {
                "operator" : "or",
                "match_type" : "contains"
              }, {
                "field" : "type",
                "value" : "image",
                "operator" : "and",
                "match_type" : "contains"
              }, {
                "field" : "date",
                "operator" : "and",
                "match_type" : "contains"
              } ],
              "sort" : [ {
                "field" : "extension",
                "operator" : "and",
                "match_type" : "contains"
              }, {
                "field" : "name",
                "operator" : "and",
                "match_type" : "contains"
              } ]
            }
          } ]
        }
      }
    },
    "zbos/media/library/list/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get a list of media items",
        "description" : "",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "fileId" : {
                  "type" : "string"
                },
                "path" : {
                  "type" : "string"
                },
                "fileName" : {
                  "type" : "string"
                },
                "extension" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string"
                },
                "mimeType" : {
                  "type" : "string"
                },
                "downloadPath" : {
                  "type" : "string"
                },
                "previewPath" : {
                  "type" : "string"
                },
                "thumbnailPath" : {
                  "type" : "string"
                },
                "checksum" : {
                  "type" : "string"
                },
                "cloudFileId" : {
                  "type" : "string"
                },
                "size" : {
                  "type" : "number"
                },
                "modifiedAt" : {
                  "type" : "number"
                },
                "isDefaultAsset" : {
                  "type" : "boolean"
                },
                "fullPath" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<MediaFile>",
          "examples" : [ {
            "payload" : [ {
              "fileId" : "string",
              "path" : "string",
              "fileName" : "string",
              "extension" : "string",
              "type" : "string",
              "mimeType" : "string",
              "downloadPath" : "string",
              "previewPath" : "string",
              "thumbnailPath" : "string",
              "checksum" : "string",
              "cloudFileId" : "string",
              "size" : 0,
              "modifiedAt" : 0,
              "defaultAsset" : false
            } ]
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/media/library/event" : {
      "subscribe" : {
        "summary" : "Library item changed event",
        "description" : "This event is published when an item in the media library list changes\n",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/media/sync/device/get" : {
      "publish" : {
        "summary" : "Get media sync devices",
        "description" : "",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/media/sync/device/event" : {
      "subscribe" : {
        "summary" : "event: Media sync devices",
        "description" : "",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/media/export/get" : {
      "publish" : {
        "summary" : "Get all media exports",
        "description" : "",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "clientId" : {
                "type" : "string"
              },
              "compositionId" : {
                "type" : "string"
              },
              "compositionName" : {
                "type" : "string"
              },
              "mediaPaths" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "ExportRequestDto",
          "examples" : [ {
            "payload" : {
              "clientId" : "string",
              "compositionId" : "string",
              "compositionName" : "string",
              "mediaPaths" : [ "string" ]
            }
          } ]
        }
      }
    },
    "zbos/media/export/event" : {
      "subscribe" : {
        "summary" : "event: All media exported",
        "description" : "",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "clientId" : {
                "type" : "string"
              },
              "compositionId" : {
                "type" : "string"
              },
              "compositionName" : {
                "type" : "string"
              },
              "mediaPaths" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "ExportRequestDto",
          "examples" : [ {
            "payload" : {
              "clientId" : "string",
              "compositionId" : "string",
              "compositionName" : "string",
              "mediaPaths" : [ "string" ]
            }
          } ]
        }
      }
    },
    "zbos/media/apk/install" : {
      "publish" : {
        "summary" : "Install APK",
        "description" : "",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/media/delete/all" : {
      "publish" : {
        "summary" : "Delete all media",
        "description" : "",
        "tags" : [ {
          "name" : "Media",
          "description" : "All media related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/monitoring/event/{source}/{type}" : {
      "subscribe" : {
        "summary" : "Monitoring event",
        "description" : "",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "description" : "Mandatory. A unique ID for the event",
                "type" : "string"
              },
              "timestamp" : {
                "description" : "Mandatory. The time at which the event occurred",
                "type" : "number"
              },
              "type" : {
                "description" : "Mandatory. The type of event this is, no dots allowed",
                "type" : "string"
              },
              "source" : {
                "description" : "Mandatory. What device produced this event, no dots allowed",
                "type" : "string"
              },
              "value" : {
                "description" : "Optional. A value relating to the event such as a temperature",
                "type" : "string"
              },
              "data" : {
                "description" : "Optional. Extra data related to the event",
                "type" : "object"
              },
              "unit" : {
                "description" : "Optional. The type of unit the value is expressed in such as °C",
                "type" : "string"
              },
              "alarms" : {
                "description" : "Optional. Alarms attached to this event",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "description" : "Mandatory. The type of alarm",
                      "type" : "string",
                      "enum" : [ "ItemOmission", "ItemCommission", "ServiceOmission", "ServiceCommission", "TransientServiceOmission", "TransientServiceCommission", "EarlyServiceOmission", "LateServiceCommission", "EarlyServiceStart", "LateServiceStart", "BoundedOmissionInterval", "UndetectableValueError", "BelowRange", "AboveRange", "BoundedValueChange", "StuckValue", "OutOfBounds", "OutOfOrder", "OutOfCalibration", "EarlyDelivery", "LateDelivery", "HighRate", "LowRate", "RateJitter", "EarlyService", "DelayedService", "SymmetricReplicationError", "AsymmetricApproximateValue", "AsymmetricExactValue", "AsymmetricItemOmission", "AsymmetricServiceOmission", "AsymmetricTiming", "ReadWriteRace", "WriteWriteRace", "Deadlock", "Starvation", "AuthorizationError", "AuthenticationError" ]
                    },
                    "severity" : {
                      "description" : "Mandatory. How critical the alarm is",
                      "type" : "integer"
                    },
                    "persist" : {
                      "description" : "Mandatory. If this is an ongoing alarm",
                      "type" : "boolean"
                    },
                    "timestamp" : {
                      "description" : "Mandatory. When the alarm initially started",
                      "type" : "number"
                    }
                  }
                }
              }
            }
          },
          "name" : "MonitoringEvent"
        }
      },
      "parameters" : {
        "source" : {
          "description" : "Source of monitoring event",
          "schema" : {
            "type" : "string"
          }
        },
        "type" : {
          "description" : "Type of monitoring event",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/monitoring/list/get" : {
      "publish" : {
        "summary" : "Get monitoring events",
        "description" : "",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "limit" : {
                "type" : "integer"
              },
              "offset" : {
                "type" : "integer"
              },
              "filters" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "field" : {
                      "description" : "Field to check on. Note that the field should be camelCase, not snake_case",
                      "type" : "string"
                    },
                    "value" : {
                      "description" : "Value to check on. For numbers you should use 'min' and 'max'.",
                      "type" : "string"
                    },
                    "min" : {
                      "description" : "Minimum value, only usable for number fields",
                      "type" : "number"
                    },
                    "max" : {
                      "description" : "Maximum value, only usable for number fields",
                      "type" : "number"
                    },
                    "direction" : {
                      "description" : "Direction to sort on.\nCan be 'asc' or 'desc'.\nThe default direction is 'asc'",
                      "type" : "string",
                      "enum" : [ "asc", "desc" ]
                    },
                    "operator" : {
                      "description" : "Operator for either the child filters, or this filter object itself.\nCan be 'and', 'or' or 'not'.\nDefault is 'and'.\nThe root operator is always 'and'",
                      "type" : "string",
                      "enum" : [ "and", "or", "not" ]
                    },
                    "match_type" : {
                      "description" : "Match type for string values.\nCan be 'exact', 'contains', 'starts_with', 'ends_with'.\nThe default match_type is 'contains'",
                      "type" : "string",
                      "enum" : [ "exact", "contains", "starts_with", "ends_with" ]
                    },
                    "filters" : {
                      "description" : "Filters on which the operator will be applied.\nIf there are no child filters, the operator will be applied to the filter object itself.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "field_filters" : {
                      "description" : "Filters to apply on the child fields of the field.\nWill only work if the field is an object, array/list or map.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                }
              },
              "sort" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "field" : {
                      "description" : "Field to check on. Note that the field should be camelCase, not snake_case",
                      "type" : "string"
                    },
                    "value" : {
                      "description" : "Value to check on. For numbers you should use 'min' and 'max'.",
                      "type" : "string"
                    },
                    "min" : {
                      "description" : "Minimum value, only usable for number fields",
                      "type" : "number"
                    },
                    "max" : {
                      "description" : "Maximum value, only usable for number fields",
                      "type" : "number"
                    },
                    "direction" : {
                      "description" : "Direction to sort on.\nCan be 'asc' or 'desc'.\nThe default direction is 'asc'",
                      "type" : "string",
                      "enum" : [ "asc", "desc" ]
                    },
                    "operator" : {
                      "description" : "Operator for either the child filters, or this filter object itself.\nCan be 'and', 'or' or 'not'.\nDefault is 'and'.\nThe root operator is always 'and'",
                      "type" : "string",
                      "enum" : [ "and", "or", "not" ]
                    },
                    "match_type" : {
                      "description" : "Match type for string values.\nCan be 'exact', 'contains', 'starts_with', 'ends_with'.\nThe default match_type is 'contains'",
                      "type" : "string",
                      "enum" : [ "exact", "contains", "starts_with", "ends_with" ]
                    },
                    "filters" : {
                      "description" : "Filters on which the operator will be applied.\nIf there are no child filters, the operator will be applied to the filter object itself.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "field_filters" : {
                      "description" : "Filters to apply on the child fields of the field.\nWill only work if the field is an object, array/list or map.",
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "FilteringRequest",
          "examples" : [ {
            "payload" : {
              "key" : "Test123",
              "limit" : 50,
              "offset" : 10,
              "filters" : [ {
                "operator" : "or",
                "match_type" : "contains"
              }, {
                "field" : "type",
                "value" : "image",
                "operator" : "and",
                "match_type" : "contains"
              }, {
                "field" : "date",
                "operator" : "and",
                "match_type" : "contains"
              } ],
              "sort" : [ {
                "field" : "extension",
                "operator" : "and",
                "match_type" : "contains"
              }, {
                "field" : "name",
                "operator" : "and",
                "match_type" : "contains"
              } ]
            }
          } ]
        }
      }
    },
    "zbos/monitoring/list/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get monitoring events",
        "description" : "",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "Mandatory. A unique ID for the event",
                  "type" : "string"
                },
                "timestamp" : {
                  "description" : "Mandatory. The time at which the event occurred",
                  "type" : "number"
                },
                "type" : {
                  "description" : "Mandatory. The type of event this is, no dots allowed",
                  "type" : "string"
                },
                "source" : {
                  "description" : "Mandatory. What device produced this event, no dots allowed",
                  "type" : "string"
                },
                "value" : {
                  "description" : "Optional. A value relating to the event such as a temperature",
                  "type" : "string"
                },
                "data" : {
                  "description" : "Optional. Extra data related to the event",
                  "type" : "object"
                },
                "unit" : {
                  "description" : "Optional. The type of unit the value is expressed in such as °C",
                  "type" : "string"
                },
                "alarms" : {
                  "description" : "Optional. Alarms attached to this event",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "type" : {
                        "description" : "Mandatory. The type of alarm",
                        "type" : "string",
                        "enum" : [ "ItemOmission", "ItemCommission", "ServiceOmission", "ServiceCommission", "TransientServiceOmission", "TransientServiceCommission", "EarlyServiceOmission", "LateServiceCommission", "EarlyServiceStart", "LateServiceStart", "BoundedOmissionInterval", "UndetectableValueError", "BelowRange", "AboveRange", "BoundedValueChange", "StuckValue", "OutOfBounds", "OutOfOrder", "OutOfCalibration", "EarlyDelivery", "LateDelivery", "HighRate", "LowRate", "RateJitter", "EarlyService", "DelayedService", "SymmetricReplicationError", "AsymmetricApproximateValue", "AsymmetricExactValue", "AsymmetricItemOmission", "AsymmetricServiceOmission", "AsymmetricTiming", "ReadWriteRace", "WriteWriteRace", "Deadlock", "Starvation", "AuthorizationError", "AuthenticationError" ]
                      },
                      "severity" : {
                        "description" : "Mandatory. How critical the alarm is",
                        "type" : "integer"
                      },
                      "persist" : {
                        "description" : "Mandatory. If this is an ongoing alarm",
                        "type" : "boolean"
                      },
                      "timestamp" : {
                        "description" : "Mandatory. When the alarm initially started",
                        "type" : "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "Array<MonitoringEvent>"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/monitoring/registration/request" : {
      "subscribe" : {
        "summary" : "Request monitoring registrations",
        "description" : "Request all monitoring services to register themselves using the topics below.\n",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/monitoring/add" : {
      "publish" : {
        "summary" : "Add monitoring service",
        "description" : "Add monitoring service with their default values and extra settings.\nSettings can be retrieved using the settings API, see <<zbos/settings/get>>\n",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "service" : {
                "type" : "object",
                "properties" : {
                  "source" : {
                    "description" : "Mandatory. The source of this monitoring service",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "Mandatory. The type of this monitoring service",
                    "type" : "string"
                  },
                  "default_settings" : {
                    "description" : "Optional. Any default settings to be overridden",
                    "type" : "object",
                    "properties" : {
                      "enabled" : {
                        "type" : "boolean"
                      },
                      "storage_type" : {
                        "type" : "string",
                        "enum" : [ "disk", "memory" ]
                      },
                      "persistence_type" : {
                        "type" : "string",
                        "enum" : [ "hours", "days", "weeks", "months", "items" ]
                      },
                      "persistence_value" : {
                        "type" : "integer"
                      },
                      "cloud_sync" : {
                        "type" : "boolean"
                      },
                      "push_notifications" : {
                        "type" : "boolean"
                      },
                      "email_notifications" : {
                        "type" : "boolean"
                      }
                    }
                  },
                  "hidden_default_settings" : {
                    "description" : "Optional. Hide certain default settings so the user can't change it",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "extraSettings" : {
                    "description" : "Optional. Any extra settings to be registered",
                    "type" : "object"
                  }
                }
              }
            }
          },
          "name" : "AddMonitoringServiceRequest",
          "examples" : [ {
            "payload" : {
              "key" : "some_key",
              "service" : {
                "source" : "camera",
                "type" : "mask",
                "extraSettings" : {
                  "some_setting" : {
                    "type" : "boolean",
                    "default_value" : "true",
                    "label_key" : "some_setting"
                  }
                },
                "default_settings" : {
                  "enabled" : true,
                  "storage_type" : "disk",
                  "persistence_type" : "days",
                  "persistence_value" : 7
                }
              }
            }
          } ]
        }
      }
    },
    "zbos/monitoring/add/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: Add monitoring service",
        "description" : "",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/monitoring/event/add" : {
      "publish" : {
        "summary" : "Add a new event",
        "description" : "",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "event" : {
                "type" : "object",
                "properties" : {
                  "type" : {
                    "description" : "Mandatory. The type of event this is, no dots allowed",
                    "type" : "string"
                  },
                  "source" : {
                    "description" : "Mandatory. What device produced this event, no dots allowed",
                    "type" : "string"
                  },
                  "timestamp" : {
                    "description" : "Optional. The time at which the event occurred",
                    "type" : "number"
                  },
                  "value" : {
                    "description" : "Optional. A value relating to the event such as a temperature",
                    "type" : "string"
                  },
                  "data" : {
                    "description" : "Optional. Extra data related to the event",
                    "type" : "object"
                  },
                  "unit" : {
                    "description" : "Optional. The type of unit the value is expressed in such as °C",
                    "type" : "string"
                  },
                  "alarms" : {
                    "description" : "Optional. Alarms attached to this event",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "description" : "Mandatory. The type of alarm",
                          "type" : "string",
                          "enum" : [ "ItemOmission", "ItemCommission", "ServiceOmission", "ServiceCommission", "TransientServiceOmission", "TransientServiceCommission", "EarlyServiceOmission", "LateServiceCommission", "EarlyServiceStart", "LateServiceStart", "BoundedOmissionInterval", "UndetectableValueError", "BelowRange", "AboveRange", "BoundedValueChange", "StuckValue", "OutOfBounds", "OutOfOrder", "OutOfCalibration", "EarlyDelivery", "LateDelivery", "HighRate", "LowRate", "RateJitter", "EarlyService", "DelayedService", "SymmetricReplicationError", "AsymmetricApproximateValue", "AsymmetricExactValue", "AsymmetricItemOmission", "AsymmetricServiceOmission", "AsymmetricTiming", "ReadWriteRace", "WriteWriteRace", "Deadlock", "Starvation", "AuthorizationError", "AuthenticationError" ]
                        },
                        "severity" : {
                          "description" : "Mandatory. How critical the alarm is",
                          "type" : "integer"
                        },
                        "persist" : {
                          "description" : "Mandatory. If this is an ongoing alarm",
                          "type" : "boolean"
                        },
                        "timestamp" : {
                          "description" : "Mandatory. When the alarm initially started",
                          "type" : "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "AddMonitoringEventRequest",
          "examples" : [ {
            "payload" : {
              "key" : "some_key",
              "event" : {
                "type" : "SomeType",
                "source" : "SomeSource",
                "timestamp" : 1.349333576093E12,
                "valid" : true
              }
            }
          } ]
        }
      }
    },
    "zbos/monitoring/event/add/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Add a new event",
        "description" : "",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/monitoring/event/delete" : {
      "publish" : {
        "summary" : "Delete an event",
        "description" : "",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "description" : "Mandatory. A unique ID for the event",
                "type" : "string"
              },
              "timestamp" : {
                "description" : "Mandatory. The time at which the event occurred",
                "type" : "number"
              },
              "type" : {
                "description" : "Mandatory. The type of event this is, no dots allowed",
                "type" : "string"
              },
              "source" : {
                "description" : "Mandatory. What device produced this event, no dots allowed",
                "type" : "string"
              },
              "value" : {
                "description" : "Optional. A value relating to the event such as a temperature",
                "type" : "string"
              },
              "data" : {
                "description" : "Optional. Extra data related to the event",
                "type" : "object"
              },
              "unit" : {
                "description" : "Optional. The type of unit the value is expressed in such as °C",
                "type" : "string"
              },
              "alarms" : {
                "description" : "Optional. Alarms attached to this event",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "description" : "Mandatory. The type of alarm",
                      "type" : "string",
                      "enum" : [ "ItemOmission", "ItemCommission", "ServiceOmission", "ServiceCommission", "TransientServiceOmission", "TransientServiceCommission", "EarlyServiceOmission", "LateServiceCommission", "EarlyServiceStart", "LateServiceStart", "BoundedOmissionInterval", "UndetectableValueError", "BelowRange", "AboveRange", "BoundedValueChange", "StuckValue", "OutOfBounds", "OutOfOrder", "OutOfCalibration", "EarlyDelivery", "LateDelivery", "HighRate", "LowRate", "RateJitter", "EarlyService", "DelayedService", "SymmetricReplicationError", "AsymmetricApproximateValue", "AsymmetricExactValue", "AsymmetricItemOmission", "AsymmetricServiceOmission", "AsymmetricTiming", "ReadWriteRace", "WriteWriteRace", "Deadlock", "Starvation", "AuthorizationError", "AuthenticationError" ]
                    },
                    "severity" : {
                      "description" : "Mandatory. How critical the alarm is",
                      "type" : "integer"
                    },
                    "persist" : {
                      "description" : "Mandatory. If this is an ongoing alarm",
                      "type" : "boolean"
                    },
                    "timestamp" : {
                      "description" : "Mandatory. When the alarm initially started",
                      "type" : "number"
                    }
                  }
                }
              }
            }
          },
          "name" : "MonitoringEvent",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "timestamp" : 1.349333576093E12,
              "type" : "SomeType",
              "source" : "SomeSource",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/monitoring/event/delete/event" : {
      "subscribe" : {
        "summary" : "event: Delete an event",
        "description" : "",
        "tags" : [ {
          "name" : "Monitoring",
          "description" : "All monitoring related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "The key used by the add request",
                "type" : "string"
              },
              "success" : {
                "description" : "Did the operation succeed",
                "type" : "boolean"
              },
              "id" : {
                "description" : "The ID of the new event",
                "type" : "string"
              }
            }
          },
          "name" : "MonitoringResponse"
        }
      }
    },
    "zbos/motion/animation/run" : {
      "publish" : {
        "summary" : "Fires specific animation ID",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "requestId" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string"
              },
              "animationId" : {
                "type" : "string"
              }
            }
          },
          "name" : "AnimationOptions",
          "examples" : [ {
            "payload" : {
              "requestId" : "string",
              "type" : "string",
              "animationId" : "string"
            }
          } ]
        }
      }
    },
    "zbos/motion/animation/stop" : {
      "publish" : {
        "summary" : "Stops all animations",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/motion/animation/get" : {
      "publish" : {
        "summary" : "Get available animations",
        "description" : "see <<zbos/motion/animation/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/motion/animation/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get available animations",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "animation" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<AvailableAnimation>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "string",
              "animation" : "string",
              "type" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/motion/animation/event" : {
      "subscribe" : {
        "summary" : "Event: animation started/stopped",
        "description" : "A message (Boolean) is publish on this topic when an animation started or stopped running\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "boolean"
          },
          "name" : "Boolean"
        }
      }
    },
    "zbos/motion/dance/start" : {
      "publish" : {
        "summary" : "Starts dance",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "requestId" : {
                "type" : "string"
              },
              "danceId" : {
                "type" : "string"
              }
            }
          },
          "name" : "DanceOptions",
          "examples" : [ {
            "payload" : {
              "requestId" : "string",
              "danceId" : "string"
            }
          } ]
        }
      }
    },
    "zbos/motion/dance/start/random" : {
      "publish" : {
        "summary" : "Start random dance",
        "description" : "Start a random default dance\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/motion/dance/stop" : {
      "publish" : {
        "summary" : "Stops dance",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/motion/dance/get" : {
      "publish" : {
        "summary" : "Get available dances",
        "description" : "see <<zbos/motion/dance/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/motion/dance/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get available dances",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "animation" : {
                  "type" : "string"
                },
                "song" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<AvailableDance>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "string",
              "animation" : "string",
              "song" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/motion/control/head" : {
      "publish" : {
        "summary" : "Move the robot head",
        "description" : "Publish on this topic to move the head of the robot\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "yaw" : {
                "description" : "Desired yaw for this part if supported, -100 to 100",
                "type" : "number"
              },
              "pitch" : {
                "description" : "Desired pitch for this part if supported, -100 to 100",
                "type" : "number"
              },
              "angle" : {
                "description" : "The direction the part should move in",
                "type" : "object",
                "properties" : {
                  "degree" : {
                    "description" : "Angle between 0 and 360",
                    "type" : "number",
                    "maximum" : 360,
                    "minimum" : 0
                  }
                }
              },
              "force" : {
                "description" : "How strongly to perform the movement, 0 to 100",
                "type" : "number"
              },
              "distance" : {
                "description" : "How far the part should move, in meters",
                "type" : "number"
              },
              "relative_rotation" : {
                "description" : "The direction the part should move in relative to its current rotation where negative values rotate to the left and positive values rotate to the right, -360 to 360",
                "type" : "number"
              },
              "partName" : {
                "type" : "string"
              }
            }
          },
          "name" : "MobilityRequest",
          "examples" : [ {
            "payload" : {
              "yaw" : 10.0,
              "pitch" : 0.0,
              "angle" : {
                "degree" : 90.0
              },
              "force" : 50.0,
              "distance" : 2.0,
              "relative_rotation" : 0.0
            }
          } ]
        }
      }
    },
    "zbos/motion/control/movement" : {
      "publish" : {
        "summary" : "Drive the robot",
        "description" : "Publish on this topic to drive the robot\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "yaw" : {
                "description" : "Desired yaw for this part if supported, -100 to 100",
                "type" : "number"
              },
              "pitch" : {
                "description" : "Desired pitch for this part if supported, -100 to 100",
                "type" : "number"
              },
              "angle" : {
                "description" : "The direction the part should move in",
                "type" : "object",
                "properties" : {
                  "degree" : {
                    "description" : "Angle between 0 and 360",
                    "type" : "number",
                    "maximum" : 360,
                    "minimum" : 0
                  }
                }
              },
              "force" : {
                "description" : "How strongly to perform the movement, 0 to 100",
                "type" : "number"
              },
              "distance" : {
                "description" : "How far the part should move, in meters",
                "type" : "number"
              },
              "relative_rotation" : {
                "description" : "The direction the part should move in relative to its current rotation where negative values rotate to the left and positive values rotate to the right, -360 to 360",
                "type" : "number"
              },
              "partName" : {
                "type" : "string"
              }
            }
          },
          "name" : "MobilityRequest",
          "examples" : [ {
            "payload" : {
              "yaw" : 10.0,
              "pitch" : 0.0,
              "angle" : {
                "degree" : 90.0
              },
              "force" : 50.0,
              "distance" : 2.0,
              "relative_rotation" : 0.0
            }
          } ]
        }
      }
    },
    "zbos/motion/control/part/{name}" : {
      "publish" : {
        "summary" : "Move a specific part of the robot",
        "description" : "Publish on this topic to move a specific part of the robot, like an arm or a leg\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "yaw" : {
                "description" : "Desired yaw for this part if supported, -100 to 100",
                "type" : "number"
              },
              "pitch" : {
                "description" : "Desired pitch for this part if supported, -100 to 100",
                "type" : "number"
              },
              "angle" : {
                "description" : "The direction the part should move in",
                "type" : "object",
                "properties" : {
                  "degree" : {
                    "description" : "Angle between 0 and 360",
                    "type" : "number",
                    "maximum" : 360,
                    "minimum" : 0
                  }
                }
              },
              "force" : {
                "description" : "How strongly to perform the movement, 0 to 100",
                "type" : "number"
              },
              "distance" : {
                "description" : "How far the part should move, in meters",
                "type" : "number"
              },
              "relative_rotation" : {
                "description" : "The direction the part should move in relative to its current rotation where negative values rotate to the left and positive values rotate to the right, -360 to 360",
                "type" : "number"
              },
              "partName" : {
                "type" : "string"
              }
            }
          },
          "name" : "MobilityRequest",
          "examples" : [ {
            "payload" : {
              "yaw" : 10.0,
              "pitch" : 0.0,
              "angle" : {
                "degree" : 90.0
              },
              "force" : 50.0,
              "distance" : 2.0,
              "relative_rotation" : 0.0
            }
          } ]
        }
      },
      "parameters" : {
        "name" : {
          "description" : "Name of the part which you want to control",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/motion/event" : {
      "subscribe" : {
        "summary" : "Event: started/stopped",
        "description" : "A message (Boolean) is publish on this topic when the robot chassis starts, or stops moving.\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "boolean"
          },
          "name" : "Boolean"
        }
      }
    },
    "zbos/emotion/eyes/run" : {
      "publish" : {
        "summary" : "Run animation for the eyes",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "requestId" : {
                "type" : "string"
              },
              "emotionId" : {
                "type" : "string"
              }
            }
          },
          "name" : "EmotionOptions",
          "examples" : [ {
            "payload" : {
              "emotionId" : "2"
            }
          } ]
        }
      }
    },
    "zbos/emotion/eyes/get" : {
      "publish" : {
        "summary" : "Get list of available emotions for the eyes",
        "description" : "see <<zbos/emotion/eyes/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/emotion/eyes/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get list of available emotions for the eyes",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "animation" : {
                  "type" : "string"
                },
                "translationkey" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<AvailableEmotion>",
          "examples" : [ {
            "payload" : {
              "id" : "2",
              "name" : "Eyeroll"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/followme/enable" : {
      "publish" : {
        "summary" : "Enable follow me",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/followme/disable" : {
      "publish" : {
        "summary" : "Disable follow me",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/followme/event" : {
      "subscribe" : {
        "summary" : "response: follow me status",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/gestures/data" : {
      "publish" : {
        "summary" : "Gestures data",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/gestures/enable" : {
      "publish" : {
        "summary" : "Enable gestures",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/gestures/disable" : {
      "publish" : {
        "summary" : "Disable gestures",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/gym/get/all" : {
      "publish" : {
        "summary" : "Get all the gym movements that can be used in the composer",
        "description" : "see <<zbos/gym/get/all/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/gym/get/all/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get all gym movements",
        "description" : "",
        "tags" : [ {
          "name" : "Motion",
          "description" : "All motion related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string"
                },
                "translation" : {
                  "type" : "string"
                },
                "exercises" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "type" : "string"
                      },
                      "translation" : {
                        "type" : "string"
                      },
                      "speedIn_min" : {
                        "type" : "number"
                      },
                      "speedIn_max" : {
                        "type" : "number"
                      },
                      "speedOut_min" : {
                        "type" : "number"
                      },
                      "speedOut_max" : {
                        "type" : "number"
                      },
                      "duty_min" : {
                        "type" : "number"
                      },
                      "duty_max" : {
                        "type" : "number"
                      },
                      "period_min" : {
                        "type" : "number"
                      },
                      "period_max" : {
                        "type" : "number"
                      },
                      "cycles_min" : {
                        "type" : "integer"
                      },
                      "cycles_max" : {
                        "type" : "integer"
                      },
                      "profiles" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "name" : {
                              "type" : "string"
                            },
                            "code" : {
                              "type" : "string"
                            },
                            "translation" : {
                              "type" : "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "Array<GymCategory>",
          "examples" : [ {
            "payload" : {
              "name" : "string",
              "translation" : "string",
              "exercises" : [ {
                "name" : "string",
                "translation" : "string",
                "profiles" : [ {
                  "name" : "string",
                  "code" : "string",
                  "translation" : "string"
                } ],
                "speedIn_min" : 15.0,
                "speedIn_max" : 50.0,
                "speedOut_min" : 25.0,
                "speedOut_max" : 60.0,
                "duty_min" : 5.0,
                "duty_max" : 10.0,
                "period_min" : 5.0,
                "period_max" : 10.0,
                "cycles_min" : 5,
                "cycles_max" : 10
              } ]
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/security/motiondetect/start" : {
      "publish" : {
        "summary" : "Start motion detection",
        "description" : "",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "unit" : {
                "description" : "Can be \"s\", \"h\" or \"m\" (seconds, hours, minutes), used for duration. Defaults to seconds",
                "type" : "string"
              },
              "initialDelay" : {
                "description" : "How long to wait until starting motion detection, in milliseconds. Defaults to 2000, lower values may cause false positives",
                "type" : "number",
                "minimum" : 0
              },
              "interval" : {
                "description" : "How often the camera should check for motion, in milliseconds. Defaults to 200",
                "type" : "number",
                "minimum" : 0
              },
              "duration" : {
                "description" : "The maximum time the motion detection will be active, after the time is elapsed, the motion detection will stop. Defaults to 10",
                "type" : "number",
                "minimum" : 0
              },
              "stopOnDetection" : {
                "description" : "If true the motion detection will stop after the first detection. Defaults to true",
                "type" : "boolean"
              },
              "upload" : {
                "description" : "If true, the picture with motion detected will be uploaded to the cloud. A notification is sent to zbos-control (if enabled). Defaults to false",
                "type" : "boolean"
              },
              "stopAfterDuration" : {
                "description" : "If true the motion detection will stop at the end of the duration. Defaults to true",
                "type" : "boolean"
              }
            }
          },
          "name" : "MotionDetectionOptions",
          "examples" : [ {
            "payload" : {
              "key" : "test",
              "unit" : "h",
              "initialDelay" : 2500,
              "interval" : 250,
              "duration" : 7,
              "stopOnDetection" : true,
              "upload" : true,
              "stopAfterDuration" : true
            }
          } ]
        }
      }
    },
    "zbos/security/motiondetect/stop" : {
      "publish" : {
        "summary" : "Stop motion detection",
        "description" : "",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/security/motiondetect/event/{key}" : {
      "subscribe" : {
        "summary" : "event: Motion detected",
        "description" : "",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "image" : {
                "description" : "Image of the detected motion, only given if upload is enabled in motion detection options.",
                "type" : "string"
              }
            }
          },
          "name" : "MotionDetectionEvent",
          "examples" : [ {
            "payload" : {
              "image" : "SomeBase64Image"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/security/motiondetect/started/{key}" : {
      "subscribe" : {
        "summary" : "Motion detection started",
        "description" : "",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/security/motiondetect/stopped/{key}" : {
      "subscribe" : {
        "summary" : "Motion detection stopped",
        "description" : "",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/security/motiondetect/timeout/event/{key}" : {
      "subscribe" : {
        "summary" : "event: Motion detection timeout",
        "description" : "",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/security/motiondetect/ready/get" : {
      "publish" : {
        "summary" : "Get motion detection ready",
        "description" : "see <<zbos/security/motiondetect/ready/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/security/motiondetect/ready/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Motion detection ready",
        "description" : "",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/security/motiondetect/ready/event" : {
      "subscribe" : {
        "summary" : "event: Ready to start motion detection",
        "description" : "",
        "tags" : [ {
          "name" : "Motion detection",
          "description" : "All motion detection related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/sensors/touch/get" : {
      "publish" : {
        "summary" : "Get all touch sensors",
        "description" : "see <<zbos/sensors/touch/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Sensors",
          "description" : "All sensors related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/sensors/touch/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get all touch sensors",
        "description" : "",
        "tags" : [ {
          "name" : "Sensors",
          "description" : "All sensors related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "TOUCHSENSOR", "TOUCHSENSOR_GROUP" ]
              },
              "translationkey" : {
                "type" : "string"
              }
            }
          },
          "name" : "AvailableSensor",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "type" : "TOUCHSENSOR",
              "translationkey" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/sensors/event" : {
      "subscribe" : {
        "summary" : "event: Sensor",
        "description" : "[DEPRECATED]\nPlease use zbos/monitoring/event/{source}/{type}\n\n",
        "tags" : [ {
          "name" : "Sensors",
          "description" : "All sensors related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string"
              },
              "source" : {
                "type" : "string"
              },
              "state" : {
                "type" : "string"
              }
            }
          },
          "name" : "SensorEvent",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "type" : "string",
              "state" : "string"
            }
          } ]
        }
      }
    },
    "zbos/settings/get" : {
      "publish" : {
        "summary" : "Get settings",
        "description" : "Get all settings for the provided category\n",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "category" : {
                "type" : "string"
              },
              "setting_keys" : {
                "description" : "Optional, will return all settings if not set.",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "subcategories" : {
                "description" : "Optional, will return all subcategories if not set.",
                "type" : "object"
              }
            }
          },
          "name" : "GetSettingsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "category" : "category_1"
            }
          }, {
            "payload" : {
              "key" : "abc",
              "category" : "category_1",
              "setting_keys" : [ "setting_key_1", "setting_key_2" ]
            }
          } ]
        }
      }
    },
    "zbos/settings/get/response/{key}" : {
      "publish" : {
        "summary" : "Response: Get settings",
        "description" : "",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "label_key" : {
                "description" : "Translation key should use the dot notation: {category}.{key}",
                "type" : "string"
              },
              "description_key" : {
                "description" : "Optional description key\nTranslation key should use the dot notation: {category}.{key}",
                "type" : "string"
              },
              "settings" : {
                "type" : "object"
              },
              "subcategories" : {
                "description" : "Optional subcategories",
                "type" : "object"
              },
              "orphaned" : {
                "description" : "The orphaned state indicates that this category was not added again since boot.",
                "type" : "boolean"
              }
            }
          },
          "name" : "SettingsCategory",
          "examples" : [ {
            "payload" : {
              "category" : {
                "settings" : {
                  "setting_key_1" : {
                    "value" : "Value 1",
                    "type" : "string",
                    "required" : true,
                    "label_key" : "translations_category.setting_1_label",
                    "description_key" : "translations_category.setting_1_description"
                  },
                  "setting_key_2" : {
                    "value" : "100",
                    "type" : "integer",
                    "range" : {
                      "min" : 0,
                      "max" : 150
                    },
                    "required" : false,
                    "label_key" : "translations_category.setting_2_label",
                    "description_key" : "translations_category.setting_2_description"
                  },
                  "setting_key_3" : {
                    "value" : "100.50",
                    "type" : "number",
                    "range" : {
                      "min" : 1,
                      "max" : 150
                    },
                    "required" : true,
                    "label_key" : "translations_category.setting_3_label",
                    "description_key" : "translations_category.setting_3_description"
                  },
                  "setting_key_4" : {
                    "value" : "true",
                    "type" : "boolean",
                    "label_key" : "translations_category.setting_4_label",
                    "description_key" : "translations_category.setting_4_description"
                  },
                  "setting_key_5" : {
                    "value" : "option_1",
                    "type" : "select_single",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_5_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_5_option_2"
                    } ],
                    "label_key" : "translations_category.translations_category.setting_5_label",
                    "description_key" : "translations_category.setting_5_description"
                  },
                  "setting_key_6" : {
                    "values" : [ "option_1", "option_2" ],
                    "type" : "select_multi",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_6_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_6_option_2"
                    }, {
                      "key" : "option_3",
                      "value" : "Option 3",
                      "label_key" : "translations_category.setting_6_option_3"
                    } ],
                    "label_key" : "translations_category.setting_6_label",
                    "description_key" : "translations_category.setting_6_description"
                  }
                },
                "label_key" : "translations_category.category_1_label"
              }
            }
          }, {
            "payload" : {
              "category" : {
                "settings" : {
                  "setting_key_1" : {
                    "value" : "Value 1",
                    "type" : "string",
                    "required" : true,
                    "label_key" : "translations_category.setting_1_label",
                    "description_key" : "translations_category.setting_1_description"
                  },
                  "setting_key_2" : {
                    "value" : "100",
                    "type" : "integer",
                    "range" : {
                      "min" : 0,
                      "max" : 150
                    },
                    "required" : false,
                    "label_key" : "translations_category.setting_2_label",
                    "description_key" : "translations_category.setting_2_description"
                  },
                  "setting_key_3" : {
                    "value" : "100.50",
                    "type" : "number",
                    "range" : {
                      "min" : 1,
                      "max" : 150
                    },
                    "required" : true,
                    "label_key" : "translations_category.setting_3_label",
                    "description_key" : "translations_category.setting_3_description"
                  },
                  "setting_key_4" : {
                    "value" : "true",
                    "type" : "boolean",
                    "label_key" : "translations_category.setting_4_label",
                    "description_key" : "translations_category.setting_4_description"
                  },
                  "setting_key_5" : {
                    "value" : "option_1",
                    "type" : "select_single",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_5_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_5_option_2"
                    } ],
                    "label_key" : "translations_category.translations_category.setting_5_label",
                    "description_key" : "translations_category.setting_5_description"
                  },
                  "setting_key_6" : {
                    "values" : [ "option_1", "option_2" ],
                    "type" : "select_multi",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_6_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_6_option_2"
                    }, {
                      "key" : "option_3",
                      "value" : "Option 3",
                      "label_key" : "translations_category.setting_6_option_3"
                    } ],
                    "label_key" : "translations_category.setting_6_label",
                    "description_key" : "translations_category.setting_6_description"
                  }
                },
                "subcategories" : {
                  "category_2a" : {
                    "settings" : { },
                    "label_key" : "translations_category.category_2a_label"
                  }
                },
                "label_key" : "translations_category.category_2_label"
              }
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/settings/request" : {
      "publish" : {
        "summary" : "Request settings registrations",
        "description" : "Request all setting providers to register their settings using the topics below.\n",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/settings/add" : {
      "publish" : {
        "summary" : "Add settings",
        "description" : "Add settings with their default values.\nThese default values will be used as long as they are not updated via <<zbos/settings/update>>\n",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "category_name" : {
                "type" : "string"
              },
              "file" : {
                "description" : "Optional. Use either category or file",
                "type" : "string"
              },
              "category" : {
                "description" : "Optional. Use either category or file",
                "type" : "object",
                "properties" : {
                  "label_key" : {
                    "description" : "Translation key should use the dot notation: {category}.{key}",
                    "type" : "string"
                  },
                  "description_key" : {
                    "description" : "Optional description key\nTranslation key should use the dot notation: {category}.{key}",
                    "type" : "string"
                  },
                  "settings" : {
                    "type" : "object"
                  },
                  "subcategories" : {
                    "description" : "Optional subcategories",
                    "type" : "object"
                  }
                }
              }
            }
          },
          "name" : "AddSettingsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "category" : {
                "settings" : {
                  "setting_key_1" : {
                    "type" : "string",
                    "required" : true,
                    "default_value" : "Value 1",
                    "label_key" : "translations_category.setting_1_label",
                    "description_key" : "translations_category.setting_1_description"
                  },
                  "setting_key_2" : {
                    "type" : "integer",
                    "range" : {
                      "min" : 0,
                      "max" : 150
                    },
                    "required" : false,
                    "default_value" : "100",
                    "label_key" : "translations_category.setting_2_label",
                    "description_key" : "translations_category.setting_2_description"
                  },
                  "setting_key_3" : {
                    "type" : "number",
                    "range" : {
                      "min" : 1,
                      "max" : 150
                    },
                    "required" : true,
                    "default_value" : "100.50",
                    "label_key" : "translations_category.setting_3_label",
                    "description_key" : "translations_category.setting_3_description"
                  },
                  "setting_key_4" : {
                    "type" : "boolean",
                    "default_value" : "true",
                    "label_key" : "translations_category.setting_4_label",
                    "description_key" : "translations_category.setting_4_description"
                  },
                  "setting_key_5" : {
                    "type" : "select_single",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_5_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_5_option_2"
                    } ],
                    "default_value" : "option_1",
                    "label_key" : "translations_category.translations_category.setting_5_label",
                    "description_key" : "translations_category.setting_5_description"
                  },
                  "setting_key_6" : {
                    "type" : "select_multi",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_6_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_6_option_2"
                    }, {
                      "key" : "option_3",
                      "value" : "Option 3",
                      "label_key" : "translations_category.setting_6_option_3"
                    } ],
                    "label_key" : "translations_category.setting_6_label",
                    "description_key" : "translations_category.setting_6_description"
                  }
                },
                "label_key" : "translations_category.category_1_label"
              },
              "category_name" : "category_1"
            }
          }, {
            "payload" : {
              "key" : "abc",
              "category" : {
                "settings" : {
                  "setting_key_1" : {
                    "type" : "string",
                    "required" : true,
                    "default_value" : "Value 1",
                    "label_key" : "translations_category.setting_1_label",
                    "description_key" : "translations_category.setting_1_description"
                  },
                  "setting_key_2" : {
                    "type" : "integer",
                    "range" : {
                      "min" : 0,
                      "max" : 150
                    },
                    "required" : false,
                    "default_value" : "100",
                    "label_key" : "translations_category.setting_2_label",
                    "description_key" : "translations_category.setting_2_description"
                  },
                  "setting_key_3" : {
                    "type" : "number",
                    "range" : {
                      "min" : 1,
                      "max" : 150
                    },
                    "required" : true,
                    "default_value" : "100.50",
                    "label_key" : "translations_category.setting_3_label",
                    "description_key" : "translations_category.setting_3_description"
                  },
                  "setting_key_4" : {
                    "type" : "boolean",
                    "default_value" : "true",
                    "label_key" : "translations_category.setting_4_label",
                    "description_key" : "translations_category.setting_4_description"
                  },
                  "setting_key_5" : {
                    "type" : "select_single",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_5_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_5_option_2"
                    } ],
                    "default_value" : "option_1",
                    "label_key" : "translations_category.translations_category.setting_5_label",
                    "description_key" : "translations_category.setting_5_description"
                  },
                  "setting_key_6" : {
                    "type" : "select_multi",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_6_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_6_option_2"
                    }, {
                      "key" : "option_3",
                      "value" : "Option 3",
                      "label_key" : "translations_category.setting_6_option_3"
                    } ],
                    "label_key" : "translations_category.setting_6_label",
                    "description_key" : "translations_category.setting_6_description"
                  }
                },
                "subcategories" : {
                  "category_2a" : {
                    "settings" : { },
                    "label_key" : "translations_category.category_2a_label"
                  }
                },
                "label_key" : "translations_category.category_2_label"
              },
              "category_name" : "category_2"
            }
          }, {
            "payload" : {
              "key" : "abc",
              "file" : "path/to/file.json",
              "category_name" : "category_3"
            }
          } ]
        }
      }
    },
    "zbos/settings/add/response/{key}" : {
      "publish" : {
        "summary" : "Response: Add settings",
        "description" : "",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/settings/update" : {
      "publish" : {
        "summary" : "Update settings",
        "description" : "Update settings overriding the default values.\n",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "category_name" : {
                "type" : "string"
              },
              "category" : {
                "type" : "object",
                "properties" : {
                  "settings" : {
                    "type" : "object"
                  },
                  "subcategories" : {
                    "description" : "Optional subcategories",
                    "type" : "object"
                  }
                }
              }
            }
          },
          "name" : "UpdateSettingsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "category" : {
                "settings" : {
                  "setting_key_1" : {
                    "value" : "Value 1B"
                  },
                  "setting_key_2" : {
                    "value" : "50"
                  },
                  "setting_key_3" : {
                    "value" : "110.20"
                  },
                  "setting_key_4" : {
                    "value" : "false"
                  },
                  "setting_key_5" : {
                    "value" : "option_2"
                  },
                  "setting_key_6" : {
                    "values" : [ "option_2", "option_3" ]
                  },
                  "setting_key_7" : {
                    "hidden" : true
                  },
                  "setting_key_8" : {
                    "options" : [ {
                      "key" : "first",
                      "value" : "first",
                      "label" : "First Option"
                    }, {
                      "key" : "second",
                      "value" : "second",
                      "label" : "Second Option"
                    } ]
                  }
                },
                "subcategories" : {
                  "category_1a" : {
                    "settings" : {
                      "setting_key_1a" : {
                        "value" : "Value 1A"
                      }
                    }
                  }
                }
              },
              "category_name" : "category_1"
            }
          } ]
        }
      }
    },
    "zbos/settings/update/response/{key}" : {
      "publish" : {
        "summary" : "Response: Update settings",
        "description" : "",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/settings/changed/event/{category}" : {
      "publish" : {
        "summary" : "Event: Settings changed",
        "description" : "",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "category_name" : {
                "type" : "string"
              },
              "category" : {
                "type" : "object",
                "properties" : {
                  "settings" : {
                    "type" : "object"
                  },
                  "subcategories" : {
                    "description" : "Optional subcategories",
                    "type" : "object"
                  }
                }
              }
            }
          },
          "name" : "SettingsChangedEvent",
          "examples" : [ {
            "payload" : {
              "category" : {
                "settings" : {
                  "setting_key_1" : {
                    "type" : "string",
                    "value" : "Value 1"
                  },
                  "setting_key_2" : {
                    "type" : "integer",
                    "value" : "100"
                  },
                  "setting_key_3" : {
                    "type" : "number",
                    "value" : "100.50"
                  },
                  "setting_key_4" : {
                    "type" : "boolean",
                    "value" : "true"
                  },
                  "setting_key_5" : {
                    "type" : "select_single",
                    "value" : "option_1",
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_5_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_5_option_2"
                    } ]
                  },
                  "setting_key_6" : {
                    "type" : "select_multi",
                    "values" : [ "option_1", "option_2" ],
                    "options" : [ {
                      "key" : "option_1",
                      "value" : "Option 1",
                      "label_key" : "translations_category.setting_6_option_1"
                    }, {
                      "key" : "option_2",
                      "value" : "Option 2",
                      "label_key" : "translations_category.setting_6_option_2"
                    }, {
                      "key" : "option_3",
                      "value" : "Option 3",
                      "label_key" : "translations_category.setting_6_option_3"
                    } ]
                  }
                }
              },
              "category_name" : "category_1"
            }
          } ]
        }
      },
      "parameters" : {
        "category" : {
          "description" : "ID of the settings category that was changed",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/settings/reset" : {
      "publish" : {
        "summary" : "Reset settings",
        "description" : "Reset settings to their default values\n",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "category" : {
                "type" : "string"
              }
            }
          },
          "name" : "ResetSettingsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "category" : "category_1"
            }
          } ]
        }
      }
    },
    "zbos/settings/reset/response/{key}" : {
      "publish" : {
        "summary" : "Response: Reset settings",
        "description" : "",
        "tags" : [ {
          "name" : "Settings",
          "description" : "All settings related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/sip/config/event" : {
      "subscribe" : {
        "summary" : "SIP config changed",
        "description" : "",
        "tags" : [ {
          "name" : "SIP",
          "description" : "All sip related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/sip/errors/get" : {
      "publish" : {
        "summary" : "Get SIP errors",
        "description" : "see <<zbos/sip/errors/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SIP",
          "description" : "All sip related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/sip/errors/response/{key}" : {
      "subscribe" : {
        "summary" : "response: SIP errors",
        "description" : "",
        "tags" : [ {
          "name" : "SIP",
          "description" : "All sip related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "error" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<SipError>",
          "examples" : [ {
            "payload" : {
              "error" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/sip/call/end" : {
      "publish" : {
        "summary" : "End the current SIP call",
        "description" : "",
        "tags" : [ {
          "name" : "SIP",
          "description" : "All sip related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/sip/call/end/event" : {
      "subscribe" : {
        "summary" : "The current SIP call has ended",
        "description" : "",
        "tags" : [ {
          "name" : "SIP",
          "description" : "All sip related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "CallEndInfo",
          "examples" : [ {
            "payload" : {
              "success" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/start" : {
      "publish" : {
        "summary" : "Start slam service",
        "description" : "see <<zbos/slam/start/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/start/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Start slam",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/stop" : {
      "publish" : {
        "summary" : "Stop slam service",
        "description" : "see <<zbos/slam/stop/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/stop/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Stop slam",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/error" : {
      "subscribe" : {
        "summary" : "ERROR in Slam",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "errorCode" : {
                "type" : "string"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "name" : "SlamError",
          "examples" : [ {
            "payload" : {
              "errorCode" : "String",
              "message" : "string"
            }
          } ]
        }
      }
    },
    "zbos/slam/collision/start/event" : {
      "subscribe" : {
        "summary" : "One or more collisions have started",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [ "TOUCHSENSOR", "TOUCHSENSOR_GROUP" ]
                },
                "translationkey" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<AvailableSensor>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "type" : "TOUCHSENSOR",
              "translationkey" : "string"
            }
          } ]
        }
      }
    },
    "zbos/slam/collision/end/event" : {
      "subscribe" : {
        "summary" : "One or more collisions have stopped",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [ "TOUCHSENSOR", "TOUCHSENSOR_GROUP" ]
                },
                "translationkey" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<AvailableSensor>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "type" : "TOUCHSENSOR",
              "translationkey" : "string"
            }
          } ]
        }
      }
    },
    "zbos/slam/status/get" : {
      "publish" : {
        "summary" : "Get SLAM status",
        "description" : "see <<zbos/slam/status/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/status/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get SLAM status",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mappingConfigurable" : {
                "type" : "boolean"
              },
              "mappingEnabled" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "SlamStatus",
          "examples" : [ {
            "payload" : {
              "mappingConfigurable" : true,
              "mappingEnabled" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/status/event" : {
      "subscribe" : {
        "summary" : "event: Status SLAM",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mappingConfigurable" : {
                "type" : "boolean"
              },
              "mappingEnabled" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "SlamStatus",
          "examples" : [ {
            "payload" : {
              "mappingConfigurable" : true,
              "mappingEnabled" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/mapview/clear" : {
      "publish" : {
        "summary" : "Clear current map view",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapview/clear/event" : {
      "subscribe" : {
        "summary" : "event: Map view cleared",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapview/current" : {
      "subscribe" : {
        "summary" : "event: Map view changed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/slam/mapview/current/get" : {
      "publish" : {
        "summary" : "Get current map view",
        "description" : "see <<zbos/slam/mapview/current/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/mapview/current/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get current map view",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "data" : {
                "type" : "string"
              }
            }
          },
          "name" : "RemoteMapResponseObject",
          "examples" : [ {
            "payload" : {
              "mapId" : "123456",
              "mapName" : "string",
              "data" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/mapping/enable" : {
      "publish" : {
        "summary" : "Enable SLAM mapping",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapping/disable" : {
      "publish" : {
        "summary" : "Disable SLAM mapping",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapping/extend/start" : {
      "publish" : {
        "summary" : "Start extending SLAM mapping",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapping/extend/cancel" : {
      "publish" : {
        "summary" : "Stop extending SLAM mapping",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapping/extend/get" : {
      "publish" : {
        "summary" : "Get extending SLAM mapping",
        "description" : "see <<zbos/slam/mapping/extend/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/mapping/extend/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get extending SLAM mapping",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/mapping/extend/started" : {
      "subscribe" : {
        "summary" : "event: SLAM mapping extending started",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapping/extend/stopped" : {
      "subscribe" : {
        "summary" : "event: SLAM mapping extending stopped",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapping/extend/failed" : {
      "subscribe" : {
        "summary" : "event: SLAM mapping extending failed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/mapping/extend/canceled" : {
      "subscribe" : {
        "summary" : "event: SLAM mapping extending canceled",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/maps/list/get" : {
      "publish" : {
        "summary" : "Get all maps",
        "description" : "see <<zbos/slam/maps/list/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/maps/list/response/{key}" : {
      "subscribe" : {
        "summary" : "event: Get all maps",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : "Array<String>"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/maps/get" : {
      "publish" : {
        "summary" : "Get all maps",
        "description" : "see <<zbos/slam/maps/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/maps/get/response/{key}" : {
      "subscribe" : {
        "summary" : "event: Get all maps",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "mapName" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<SimpleMap>"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/maps/get/current" : {
      "publish" : {
        "summary" : "Get current maps",
        "description" : "see <<zbos/slam/maps/get/current/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/maps/get/current/response/{key}" : {
      "subscribe" : {
        "summary" : "event: Get current maps",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "poiList" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "uuid" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "DEFAULT", "CHARGING_STATION", "INTERACTIVE" ]
                    },
                    "coordinate" : {
                      "type" : "object",
                      "properties" : {
                        "x" : {
                          "type" : "number"
                        },
                        "y" : {
                          "type" : "number"
                        },
                        "z" : {
                          "type" : "number"
                        },
                        "rotation" : {
                          "type" : "number"
                        },
                        "rawX" : {
                          "type" : "number"
                        },
                        "rawY" : {
                          "type" : "number"
                        },
                        "rawZ" : {
                          "type" : "number"
                        },
                        "orientation" : {
                          "type" : "object",
                          "properties" : {
                            "yaw" : {
                              "type" : "number"
                            },
                            "pitch" : {
                              "type" : "number"
                            },
                            "roll" : {
                              "type" : "number"
                            }
                          }
                        }
                      }
                    },
                    "inAction" : {
                      "type" : "object",
                      "properties" : {
                        "actionType" : {
                          "type" : "string",
                          "enum" : [ "MQTT", "API" ]
                        },
                        "radius" : {
                          "type" : "number"
                        },
                        "target" : {
                          "description" : "Mqtt topic or API url",
                          "type" : "string"
                        },
                        "data" : {
                          "description" : "Mqtt payload or post body",
                          "type" : "string"
                        }
                      }
                    },
                    "outAction" : {
                      "type" : "object",
                      "properties" : {
                        "actionType" : {
                          "type" : "string",
                          "enum" : [ "MQTT", "API" ]
                        },
                        "radius" : {
                          "type" : "number"
                        },
                        "target" : {
                          "description" : "Mqtt topic or API url",
                          "type" : "string"
                        },
                        "data" : {
                          "description" : "Mqtt payload or post body",
                          "type" : "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "SlamMap",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "mapName" : "string",
              "poiList" : [ {
                "name" : "string",
                "uuid" : "string",
                "type" : "DEFAULT",
                "coordinate" : {
                  "x" : 15.0,
                  "y" : 15.0,
                  "rotation" : 90.0,
                  "rawX" : 14.8,
                  "rawY" : 15.4
                },
                "inAction" : {
                  "actionType" : "MQTT",
                  "radius" : 270.0,
                  "target" : "string",
                  "data" : "string"
                },
                "outAction" : {
                  "actionType" : "MQTT",
                  "radius" : 270.0,
                  "target" : "string",
                  "data" : "string"
                }
              } ]
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/maps/load" : {
      "publish" : {
        "summary" : "Load map",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleMap",
          "examples" : [ {
            "payload" : "string"
          } ]
        }
      }
    },
    "zbos/slam/maps/load/event" : {
      "subscribe" : {
        "summary" : "event: Load map",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/maps/save" : {
      "publish" : {
        "summary" : "Save map",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleMap",
          "examples" : [ {
            "payload" : "string"
          } ]
        }
      }
    },
    "zbos/slam/maps/save/event" : {
      "subscribe" : {
        "summary" : "event: Save map",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/maps/delete" : {
      "publish" : {
        "summary" : "Delete map",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleMap",
          "examples" : [ {
            "payload" : "string"
          } ]
        }
      }
    },
    "zbos/slam/maps/delete/all" : {
      "publish" : {
        "summary" : "Deletes all maps",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/maps/delete/event" : {
      "subscribe" : {
        "summary" : "event: Delete map",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/location/current" : {
      "subscribe" : {
        "summary" : "event: Location changed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "x" : {
                "type" : "number"
              },
              "y" : {
                "type" : "number"
              },
              "z" : {
                "type" : "number"
              },
              "rotation" : {
                "type" : "number"
              },
              "rawX" : {
                "type" : "number"
              },
              "rawY" : {
                "type" : "number"
              },
              "rawZ" : {
                "type" : "number"
              },
              "orientation" : {
                "type" : "object",
                "properties" : {
                  "yaw" : {
                    "type" : "number"
                  },
                  "pitch" : {
                    "type" : "number"
                  },
                  "roll" : {
                    "type" : "number"
                  }
                }
              }
            }
          },
          "name" : "ZbosLocation",
          "examples" : [ {
            "payload" : {
              "x" : 15.0,
              "y" : 15.0,
              "rotation" : 90.0,
              "rawX" : 14.8,
              "rawY" : 15.4
            }
          }, {
            "payload" : {
              "rawX" : 0.5,
              "rawY" : -0.4,
              "rawZ" : 0.8,
              "orientation" : {
                "yaw" : 0.0,
                "pitch" : 0.0,
                "roll" : 3.14
              }
            }
          } ]
        }
      }
    },
    "zbos/slam/location/current/get" : {
      "publish" : {
        "summary" : "Get robot location",
        "description" : "see <<zbos/slam/location/current/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/location/current/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get robot location",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "x" : {
                "type" : "number"
              },
              "y" : {
                "type" : "number"
              },
              "z" : {
                "type" : "number"
              },
              "rotation" : {
                "type" : "number"
              },
              "rawX" : {
                "type" : "number"
              },
              "rawY" : {
                "type" : "number"
              },
              "rawZ" : {
                "type" : "number"
              },
              "orientation" : {
                "type" : "object",
                "properties" : {
                  "yaw" : {
                    "type" : "number"
                  },
                  "pitch" : {
                    "type" : "number"
                  },
                  "roll" : {
                    "type" : "number"
                  }
                }
              }
            }
          },
          "name" : "ZbosLocation",
          "examples" : [ {
            "payload" : {
              "x" : 15.0,
              "y" : 15.0,
              "rotation" : 90.0,
              "rawX" : 14.8,
              "rawY" : 15.4
            }
          }, {
            "payload" : {
              "rawX" : 0.5,
              "rawY" : -0.4,
              "rawZ" : 0.8,
              "orientation" : {
                "yaw" : 0.0,
                "pitch" : 0.0,
                "roll" : 3.14
              }
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/location/current/set" : {
      "publish" : {
        "summary" : "Set robot location",
        "description" : "see <<zbos/slam/location/current/set/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "coordinate" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  },
                  "z" : {
                    "type" : "number"
                  },
                  "rotation" : {
                    "type" : "number"
                  },
                  "rawX" : {
                    "type" : "number"
                  },
                  "rawY" : {
                    "type" : "number"
                  },
                  "rawZ" : {
                    "type" : "number"
                  },
                  "orientation" : {
                    "type" : "object",
                    "properties" : {
                      "yaw" : {
                        "type" : "number"
                      },
                      "pitch" : {
                        "type" : "number"
                      },
                      "roll" : {
                        "type" : "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "ZbosSetLocationRequest",
          "examples" : [ {
            "payload" : {
              "key" : "string",
              "coordinate" : {
                "x" : 15.0,
                "y" : 15.0,
                "rotation" : 90.0,
                "rawX" : 14.8,
                "rawY" : 15.4
              }
            }
          } ]
        }
      }
    },
    "zbos/slam/location/current/set/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Set robot location",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/location/recover" : {
      "publish" : {
        "summary" : "Recover robot location",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/location/recover/started" : {
      "subscribe" : {
        "summary" : "Location revocery started",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/location/recover/stopped" : {
      "subscribe" : {
        "summary" : "Location revocery stopped",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/location/recover/failed" : {
      "subscribe" : {
        "summary" : "Location revocery failed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/location/reset/chargingstation" : {
      "publish" : {
        "summary" : "Reset robot to charging station",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/location/reset/chargingstation/started" : {
      "subscribe" : {
        "summary" : "Reset robot to charging station started",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/location/reset/chargingstation/stopped" : {
      "subscribe" : {
        "summary" : "Reset robot to charging station stopped",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/location/home" : {
      "subscribe" : {
        "summary" : "Home location changed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "x" : {
                "type" : "number"
              },
              "y" : {
                "type" : "number"
              },
              "z" : {
                "type" : "number"
              },
              "rotation" : {
                "type" : "number"
              },
              "rawX" : {
                "type" : "number"
              },
              "rawY" : {
                "type" : "number"
              },
              "rawZ" : {
                "type" : "number"
              },
              "orientation" : {
                "type" : "object",
                "properties" : {
                  "yaw" : {
                    "type" : "number"
                  },
                  "pitch" : {
                    "type" : "number"
                  },
                  "roll" : {
                    "type" : "number"
                  }
                }
              }
            }
          },
          "name" : "ZbosLocation",
          "examples" : [ {
            "payload" : {
              "x" : 15.0,
              "y" : 15.0,
              "rotation" : 90.0,
              "rawX" : 14.8,
              "rawY" : 15.4
            }
          } ]
        }
      }
    },
    "zbos/slam/location/home/get" : {
      "publish" : {
        "summary" : "Get home location",
        "description" : "see <<zbos/slam/location/home/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/location/home/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get home location",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "x" : {
                "type" : "number"
              },
              "y" : {
                "type" : "number"
              },
              "z" : {
                "type" : "number"
              },
              "rotation" : {
                "type" : "number"
              },
              "rawX" : {
                "type" : "number"
              },
              "rawY" : {
                "type" : "number"
              },
              "rawZ" : {
                "type" : "number"
              },
              "orientation" : {
                "type" : "object",
                "properties" : {
                  "yaw" : {
                    "type" : "number"
                  },
                  "pitch" : {
                    "type" : "number"
                  },
                  "roll" : {
                    "type" : "number"
                  }
                }
              }
            }
          },
          "name" : "ZbosLocation",
          "examples" : [ {
            "payload" : {
              "x" : 15.0,
              "y" : 15.0,
              "rotation" : 90.0,
              "rawX" : 14.8,
              "rawY" : 15.4
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/walls/clear" : {
      "publish" : {
        "summary" : "clear all walls",
        "description" : "Save is optional, if false, then the map will not be saved. By default the map will be saved.\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "WallClearRequest",
          "examples" : [ {
            "payload" : {
              "save" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/walls/clear/event" : {
      "subscribe" : {
        "summary" : "response: Clear all walls",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/walls/current" : {
      "subscribe" : {
        "summary" : "Walls changed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/slam/walls/current/get" : {
      "publish" : {
        "summary" : "Get current walls",
        "description" : "see <<zbos/slam/walls/current/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/walls/current/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get current walls",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "startPoint" : {
                  "type" : "object",
                  "properties" : {
                    "x" : {
                      "type" : "number"
                    },
                    "y" : {
                      "type" : "number"
                    }
                  }
                },
                "endPoint" : {
                  "type" : "object",
                  "properties" : {
                    "x" : {
                      "type" : "number"
                    },
                    "y" : {
                      "type" : "number"
                    }
                  }
                },
                "segmentId" : {
                  "type" : "string"
                },
                "save" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "name" : "Array<Wall>",
          "examples" : [ {
            "payload" : {
              "startPoint" : {
                "x" : 1.0,
                "y" : 1.0
              },
              "endPoint" : {
                "x" : 5.0,
                "y" : 5.0
              },
              "segmentId" : "string",
              "save" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/walls/add" : {
      "publish" : {
        "summary" : "Add wall",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "startPoint" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  }
                }
              },
              "endPoint" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  }
                }
              },
              "segmentId" : {
                "type" : "string"
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "Wall",
          "examples" : [ {
            "payload" : {
              "startPoint" : {
                "x" : 1.0,
                "y" : 1.0
              },
              "endPoint" : {
                "x" : 5.0,
                "y" : 5.0
              },
              "segmentId" : "string",
              "save" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/walls/add/event" : {
      "subscribe" : {
        "summary" : "event: Add wall",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "startPoint" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  }
                }
              },
              "endPoint" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  }
                }
              },
              "segmentId" : {
                "type" : "string"
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "Wall",
          "examples" : [ {
            "payload" : {
              "startPoint" : {
                "x" : 1.0,
                "y" : 1.0
              },
              "endPoint" : {
                "x" : 5.0,
                "y" : 5.0
              },
              "segmentId" : "string",
              "save" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/walls/remove" : {
      "publish" : {
        "summary" : "Remove wall",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "segmentId" : {
                "type" : "string"
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "WallRemoveRequest",
          "examples" : [ {
            "payload" : {
              "segmentId" : "id5",
              "save" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/walls/remove/multiple" : {
      "publish" : {
        "summary" : "Remove walls",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "segmentId" : {
                  "type" : "string"
                },
                "save" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "name" : "Array<WallRemoveRequest>",
          "examples" : [ {
            "payload" : [ {
              "segmentId" : "id5",
              "save" : true
            }, {
              "segmentId" : "id7",
              "save" : true
            } ]
          } ]
        }
      }
    },
    "zbos/slam/walls/remove/event" : {
      "subscribe" : {
        "summary" : "event: Remove wall",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/walls/update" : {
      "publish" : {
        "summary" : "Update wall",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "startPoint" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  }
                }
              },
              "endPoint" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  }
                }
              },
              "segmentId" : {
                "type" : "string"
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "Wall",
          "examples" : [ {
            "payload" : {
              "startPoint" : {
                "x" : 1.0,
                "y" : 1.0
              },
              "endPoint" : {
                "x" : 5.0,
                "y" : 5.0
              },
              "segmentId" : "string",
              "save" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/walls/update/multiple" : {
      "publish" : {
        "summary" : "Update walls",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "startPoint" : {
                  "type" : "object",
                  "properties" : {
                    "x" : {
                      "type" : "number"
                    },
                    "y" : {
                      "type" : "number"
                    }
                  }
                },
                "endPoint" : {
                  "type" : "object",
                  "properties" : {
                    "x" : {
                      "type" : "number"
                    },
                    "y" : {
                      "type" : "number"
                    }
                  }
                },
                "segmentId" : {
                  "type" : "string"
                },
                "save" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "name" : "Array<Wall>",
          "examples" : [ {
            "payload" : [ {
              "startPoint" : {
                "x" : 1.0,
                "y" : 1.0
              },
              "endPoint" : {
                "x" : 5.0,
                "y" : 5.0
              },
              "segmentId" : "string",
              "save" : true
            }, {
              "startPoint" : {
                "x" : 10.0,
                "y" : 5.0
              },
              "endPoint" : {
                "x" : 20.0,
                "y" : 10.0
              },
              "segmentId" : "another_id",
              "save" : true
            } ]
          } ]
        }
      }
    },
    "zbos/slam/walls/update/event" : {
      "subscribe" : {
        "summary" : "event: Update wall",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "startPoint" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  }
                }
              },
              "endPoint" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  }
                }
              },
              "segmentId" : {
                "type" : "string"
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "Wall",
          "examples" : [ {
            "payload" : {
              "startPoint" : {
                "x" : 1.0,
                "y" : 1.0
              },
              "endPoint" : {
                "x" : 5.0,
                "y" : 5.0
              },
              "segmentId" : "string",
              "save" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/interaction/moveto" : {
      "publish" : {
        "summary" : "Move robot to coordinates",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "coordinate" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  },
                  "z" : {
                    "type" : "number"
                  }
                }
              },
              "orientation" : {
                "type" : "object",
                "properties" : {
                  "yaw" : {
                    "type" : "number"
                  },
                  "pitch" : {
                    "type" : "number"
                  },
                  "roll" : {
                    "type" : "number"
                  }
                }
              },
              "speed" : {
                "type" : "integer"
              }
            }
          },
          "name" : "ZbosMoveToPointRequest",
          "examples" : [ {
            "payload" : {
              "mapId" : "123456",
              "mapName" : "First floor",
              "coordinate" : {
                "x" : 39.0,
                "y" : 40.0,
                "z" : 0.0
              }
            }
          } ]
        }
      }
    },
    "zbos/slam/interaction/moveto/started" : {
      "subscribe" : {
        "summary" : "MoveTo started",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/slam/interaction/moveto/stopped" : {
      "subscribe" : {
        "summary" : "MoveTo stopped",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/slam/interaction/moveto/failed" : {
      "subscribe" : {
        "summary" : "MoveTo failed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/slam/interaction/moveto/aborted" : {
      "subscribe" : {
        "summary" : "MoveTo aborted",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/slam/interaction/moveto/blocked" : {
      "subscribe" : {
        "summary" : "MoveTo Blocked",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/slam/interaction/moveto/retrying" : {
      "subscribe" : {
        "summary" : "MoveTo retrying",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/slam/interaction/stop" : {
      "publish" : {
        "summary" : "Stop moving",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/interaction/stop/event" : {
      "subscribe" : {
        "summary" : "event: Movement stopped",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/laserscan/enable" : {
      "publish" : {
        "summary" : "Enable laserscan",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/laserscan/disable" : {
      "publish" : {
        "summary" : "disable laserscan",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/laserscan/current" : {
      "subscribe" : {
        "summary" : "event: Laserscan changed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "angle" : {
                "type" : "number"
              },
              "distance" : {
                "type" : "number"
              }
            }
          },
          "name" : "ZbosLaserScan",
          "examples" : [ {
            "payload" : {
              "angle" : 0.0,
              "distance" : 15.0
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/current" : {
      "subscribe" : {
        "summary" : "event: POI changed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "poiList" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "uuid" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "DEFAULT", "CHARGING_STATION", "INTERACTIVE" ]
                    },
                    "coordinate" : {
                      "type" : "object",
                      "properties" : {
                        "x" : {
                          "type" : "number"
                        },
                        "y" : {
                          "type" : "number"
                        },
                        "z" : {
                          "type" : "number"
                        },
                        "rotation" : {
                          "type" : "number"
                        },
                        "rawX" : {
                          "type" : "number"
                        },
                        "rawY" : {
                          "type" : "number"
                        },
                        "rawZ" : {
                          "type" : "number"
                        },
                        "orientation" : {
                          "type" : "object",
                          "properties" : {
                            "yaw" : {
                              "type" : "number"
                            },
                            "pitch" : {
                              "type" : "number"
                            },
                            "roll" : {
                              "type" : "number"
                            }
                          }
                        }
                      }
                    },
                    "inAction" : {
                      "type" : "object",
                      "properties" : {
                        "actionType" : {
                          "type" : "string",
                          "enum" : [ "MQTT", "API" ]
                        },
                        "radius" : {
                          "type" : "number"
                        },
                        "target" : {
                          "description" : "Mqtt topic or API url",
                          "type" : "string"
                        },
                        "data" : {
                          "description" : "Mqtt payload or post body",
                          "type" : "string"
                        }
                      }
                    },
                    "outAction" : {
                      "type" : "object",
                      "properties" : {
                        "actionType" : {
                          "type" : "string",
                          "enum" : [ "MQTT", "API" ]
                        },
                        "radius" : {
                          "type" : "number"
                        },
                        "target" : {
                          "description" : "Mqtt topic or API url",
                          "type" : "string"
                        },
                        "data" : {
                          "description" : "Mqtt payload or post body",
                          "type" : "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "SlamMap",
          "examples" : [ {
            "payload" : {
              "id" : "123456",
              "mapName" : "First floor",
              "poiList" : [ {
                "name" : "string",
                "uuid" : "string",
                "type" : "DEFAULT",
                "coordinate" : {
                  "x" : 15.0,
                  "y" : 15.0,
                  "rotation" : 90.0,
                  "rawX" : 14.8,
                  "rawY" : 15.4
                },
                "inAction" : {
                  "actionType" : "MQTT",
                  "radius" : 270.0,
                  "target" : "string",
                  "data" : "string"
                },
                "outAction" : {
                  "actionType" : "MQTT",
                  "radius" : 270.0,
                  "target" : "string",
                  "data" : "string"
                }
              } ]
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/clear" : {
      "publish" : {
        "summary" : "Clear all pois",
        "description" : "Save is optional, if false, then the map will not be saved. By default the map will be saved.\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "ZbosClearPoiRequest",
          "examples" : [ {
            "payload" : {
              "mapId" : "123456",
              "mapName" : "First floor",
              "save" : true
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/clear/event" : {
      "subscribe" : {
        "summary" : "event: Clear all pois",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/poi/list/all/get" : {
      "publish" : {
        "summary" : "Get list of pois for all maps",
        "description" : "see <<zbos/slam/poi/list/all/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/slam/poi/list/all/response/{key}" : {
      "subscribe" : {
        "summary" : "event: Get list of pois for all maps",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "mapName" : {
                  "type" : "string"
                },
                "poiList" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "type" : "string"
                      },
                      "uuid" : {
                        "type" : "string"
                      },
                      "type" : {
                        "type" : "string",
                        "enum" : [ "DEFAULT", "CHARGING_STATION", "INTERACTIVE" ]
                      },
                      "coordinate" : {
                        "type" : "object",
                        "properties" : {
                          "x" : {
                            "type" : "number"
                          },
                          "y" : {
                            "type" : "number"
                          },
                          "z" : {
                            "type" : "number"
                          },
                          "rotation" : {
                            "type" : "number"
                          },
                          "rawX" : {
                            "type" : "number"
                          },
                          "rawY" : {
                            "type" : "number"
                          },
                          "rawZ" : {
                            "type" : "number"
                          },
                          "orientation" : {
                            "type" : "object",
                            "properties" : {
                              "yaw" : {
                                "type" : "number"
                              },
                              "pitch" : {
                                "type" : "number"
                              },
                              "roll" : {
                                "type" : "number"
                              }
                            }
                          }
                        }
                      },
                      "inAction" : {
                        "type" : "object",
                        "properties" : {
                          "actionType" : {
                            "type" : "string",
                            "enum" : [ "MQTT", "API" ]
                          },
                          "radius" : {
                            "type" : "number"
                          },
                          "target" : {
                            "description" : "Mqtt topic or API url",
                            "type" : "string"
                          },
                          "data" : {
                            "description" : "Mqtt payload or post body",
                            "type" : "string"
                          }
                        }
                      },
                      "outAction" : {
                        "type" : "object",
                        "properties" : {
                          "actionType" : {
                            "type" : "string",
                            "enum" : [ "MQTT", "API" ]
                          },
                          "radius" : {
                            "type" : "number"
                          },
                          "target" : {
                            "description" : "Mqtt topic or API url",
                            "type" : "string"
                          },
                          "data" : {
                            "description" : "Mqtt payload or post body",
                            "type" : "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "Array<SlamMap>",
          "examples" : [ {
            "payload" : {
              "id" : "123456",
              "mapName" : "First floor",
              "poiList" : [ {
                "name" : "string",
                "uuid" : "string",
                "type" : "DEFAULT",
                "coordinate" : {
                  "x" : 15.0,
                  "y" : 15.0,
                  "rotation" : 90.0,
                  "rawX" : 14.8,
                  "rawY" : 15.4
                },
                "inAction" : {
                  "actionType" : "MQTT",
                  "radius" : 270.0,
                  "target" : "string",
                  "data" : "string"
                },
                "outAction" : {
                  "actionType" : "MQTT",
                  "radius" : 270.0,
                  "target" : "string",
                  "data" : "string"
                }
              } ]
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/poi/list/get" : {
      "publish" : {
        "summary" : "Get list of pois for current map",
        "description" : "see <<zbos/slam/poi/list/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              },
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              }
            }
          },
          "name" : "ZbosMapDetailRequest",
          "examples" : [ {
            "payload" : {
              "key" : "_dfse",
              "mapId" : "123456",
              "mapName" : "First floor"
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/list/response/{key}" : {
      "subscribe" : {
        "summary" : "event: Get list of pois for current map",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "poiList" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "uuid" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "DEFAULT", "CHARGING_STATION", "INTERACTIVE" ]
                    },
                    "coordinate" : {
                      "type" : "object",
                      "properties" : {
                        "x" : {
                          "type" : "number"
                        },
                        "y" : {
                          "type" : "number"
                        },
                        "z" : {
                          "type" : "number"
                        },
                        "rotation" : {
                          "type" : "number"
                        },
                        "rawX" : {
                          "type" : "number"
                        },
                        "rawY" : {
                          "type" : "number"
                        },
                        "rawZ" : {
                          "type" : "number"
                        },
                        "orientation" : {
                          "type" : "object",
                          "properties" : {
                            "yaw" : {
                              "type" : "number"
                            },
                            "pitch" : {
                              "type" : "number"
                            },
                            "roll" : {
                              "type" : "number"
                            }
                          }
                        }
                      }
                    },
                    "inAction" : {
                      "type" : "object",
                      "properties" : {
                        "actionType" : {
                          "type" : "string",
                          "enum" : [ "MQTT", "API" ]
                        },
                        "radius" : {
                          "type" : "number"
                        },
                        "target" : {
                          "description" : "Mqtt topic or API url",
                          "type" : "string"
                        },
                        "data" : {
                          "description" : "Mqtt payload or post body",
                          "type" : "string"
                        }
                      }
                    },
                    "outAction" : {
                      "type" : "object",
                      "properties" : {
                        "actionType" : {
                          "type" : "string",
                          "enum" : [ "MQTT", "API" ]
                        },
                        "radius" : {
                          "type" : "number"
                        },
                        "target" : {
                          "description" : "Mqtt topic or API url",
                          "type" : "string"
                        },
                        "data" : {
                          "description" : "Mqtt payload or post body",
                          "type" : "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "SlamMap",
          "examples" : [ {
            "payload" : {
              "id" : "123456",
              "mapName" : "First floor",
              "poiList" : [ {
                "name" : "string",
                "uuid" : "string",
                "type" : "DEFAULT",
                "coordinate" : {
                  "x" : 15.0,
                  "y" : 15.0,
                  "rotation" : 90.0,
                  "rawX" : 14.8,
                  "rawY" : 15.4
                },
                "inAction" : {
                  "actionType" : "MQTT",
                  "radius" : 270.0,
                  "target" : "string",
                  "data" : "string"
                },
                "outAction" : {
                  "actionType" : "MQTT",
                  "radius" : 270.0,
                  "target" : "string",
                  "data" : "string"
                }
              } ]
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/slam/poi/add" : {
      "publish" : {
        "summary" : "Add poi",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "poi" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "uuid" : {
                    "type" : "string"
                  },
                  "type" : {
                    "type" : "string",
                    "enum" : [ "DEFAULT", "CHARGING_STATION", "INTERACTIVE" ]
                  },
                  "coordinate" : {
                    "type" : "object",
                    "properties" : {
                      "x" : {
                        "type" : "number"
                      },
                      "y" : {
                        "type" : "number"
                      },
                      "z" : {
                        "type" : "number"
                      },
                      "rotation" : {
                        "type" : "number"
                      },
                      "rawX" : {
                        "type" : "number"
                      },
                      "rawY" : {
                        "type" : "number"
                      },
                      "rawZ" : {
                        "type" : "number"
                      },
                      "orientation" : {
                        "type" : "object",
                        "properties" : {
                          "yaw" : {
                            "type" : "number"
                          },
                          "pitch" : {
                            "type" : "number"
                          },
                          "roll" : {
                            "type" : "number"
                          }
                        }
                      }
                    }
                  },
                  "inAction" : {
                    "type" : "object",
                    "properties" : {
                      "actionType" : {
                        "type" : "string",
                        "enum" : [ "MQTT", "API" ]
                      },
                      "radius" : {
                        "type" : "number"
                      },
                      "target" : {
                        "description" : "Mqtt topic or API url",
                        "type" : "string"
                      },
                      "data" : {
                        "description" : "Mqtt payload or post body",
                        "type" : "string"
                      }
                    }
                  },
                  "outAction" : {
                    "type" : "object",
                    "properties" : {
                      "actionType" : {
                        "type" : "string",
                        "enum" : [ "MQTT", "API" ]
                      },
                      "radius" : {
                        "type" : "number"
                      },
                      "target" : {
                        "description" : "Mqtt topic or API url",
                        "type" : "string"
                      },
                      "data" : {
                        "description" : "Mqtt payload or post body",
                        "type" : "string"
                      }
                    }
                  }
                }
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "ZbosAddPoiRequest",
          "examples" : [ {
            "payload" : {
              "mapId" : "123456",
              "mapName" : "First floor",
              "poi" : {
                "name" : "Home",
                "uuid" : "string",
                "type" : "DEFAULT",
                "coordinate" : {
                  "x" : 15.0,
                  "y" : 15.0,
                  "rotation" : 90.0
                }
              },
              "save" : false
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/add/event" : {
      "subscribe" : {
        "summary" : "event: Add poi",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string"
              },
              "uuid" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "DEFAULT", "CHARGING_STATION", "INTERACTIVE" ]
              },
              "coordinate" : {
                "type" : "object",
                "properties" : {
                  "x" : {
                    "type" : "number"
                  },
                  "y" : {
                    "type" : "number"
                  },
                  "z" : {
                    "type" : "number"
                  },
                  "rotation" : {
                    "type" : "number"
                  },
                  "rawX" : {
                    "type" : "number"
                  },
                  "rawY" : {
                    "type" : "number"
                  },
                  "rawZ" : {
                    "type" : "number"
                  },
                  "orientation" : {
                    "type" : "object",
                    "properties" : {
                      "yaw" : {
                        "type" : "number"
                      },
                      "pitch" : {
                        "type" : "number"
                      },
                      "roll" : {
                        "type" : "number"
                      }
                    }
                  }
                }
              },
              "inAction" : {
                "type" : "object",
                "properties" : {
                  "actionType" : {
                    "type" : "string",
                    "enum" : [ "MQTT", "API" ]
                  },
                  "radius" : {
                    "type" : "number"
                  },
                  "target" : {
                    "description" : "Mqtt topic or API url",
                    "type" : "string"
                  },
                  "data" : {
                    "description" : "Mqtt payload or post body",
                    "type" : "string"
                  }
                }
              },
              "outAction" : {
                "type" : "object",
                "properties" : {
                  "actionType" : {
                    "type" : "string",
                    "enum" : [ "MQTT", "API" ]
                  },
                  "radius" : {
                    "type" : "number"
                  },
                  "target" : {
                    "description" : "Mqtt topic or API url",
                    "type" : "string"
                  },
                  "data" : {
                    "description" : "Mqtt payload or post body",
                    "type" : "string"
                  }
                }
              }
            }
          },
          "name" : "Poi",
          "examples" : [ {
            "payload" : {
              "name" : "string",
              "uuid" : "string",
              "type" : "DEFAULT",
              "coordinate" : {
                "x" : 15.0,
                "y" : 15.0,
                "rotation" : 90.0
              }
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/edit" : {
      "publish" : {
        "summary" : "Edit poi",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "poi" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "uuid" : {
                    "type" : "string"
                  },
                  "type" : {
                    "type" : "string",
                    "enum" : [ "DEFAULT", "CHARGING_STATION", "INTERACTIVE" ]
                  },
                  "coordinate" : {
                    "type" : "object",
                    "properties" : {
                      "x" : {
                        "type" : "number"
                      },
                      "y" : {
                        "type" : "number"
                      },
                      "z" : {
                        "type" : "number"
                      },
                      "rotation" : {
                        "type" : "number"
                      },
                      "rawX" : {
                        "type" : "number"
                      },
                      "rawY" : {
                        "type" : "number"
                      },
                      "rawZ" : {
                        "type" : "number"
                      },
                      "orientation" : {
                        "type" : "object",
                        "properties" : {
                          "yaw" : {
                            "type" : "number"
                          },
                          "pitch" : {
                            "type" : "number"
                          },
                          "roll" : {
                            "type" : "number"
                          }
                        }
                      }
                    }
                  },
                  "inAction" : {
                    "type" : "object",
                    "properties" : {
                      "actionType" : {
                        "type" : "string",
                        "enum" : [ "MQTT", "API" ]
                      },
                      "radius" : {
                        "type" : "number"
                      },
                      "target" : {
                        "description" : "Mqtt topic or API url",
                        "type" : "string"
                      },
                      "data" : {
                        "description" : "Mqtt payload or post body",
                        "type" : "string"
                      }
                    }
                  },
                  "outAction" : {
                    "type" : "object",
                    "properties" : {
                      "actionType" : {
                        "type" : "string",
                        "enum" : [ "MQTT", "API" ]
                      },
                      "radius" : {
                        "type" : "number"
                      },
                      "target" : {
                        "description" : "Mqtt topic or API url",
                        "type" : "string"
                      },
                      "data" : {
                        "description" : "Mqtt payload or post body",
                        "type" : "string"
                      }
                    }
                  }
                }
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "ZbosEditPoiRequest",
          "examples" : [ {
            "payload" : {
              "mapId" : "123456",
              "mapName" : "First floor",
              "poi" : {
                "name" : "Home",
                "uuid" : "string",
                "type" : "DEFAULT",
                "coordinate" : {
                  "x" : 15.0,
                  "y" : 15.0,
                  "rotation" : 90.0
                }
              },
              "save" : false
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/edit/event" : {
      "subscribe" : {
        "summary" : "event: Edit poi",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/poi/remove/name" : {
      "publish" : {
        "summary" : "Remove poi by name",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "ZbosRemovePoiByNameRequest",
          "examples" : [ {
            "payload" : {
              "mapId" : "123456",
              "mapName" : "First floor",
              "name" : "Home",
              "save" : false
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/remove/name/event" : {
      "subscribe" : {
        "summary" : "event: Remove poi by name",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/poi/remove/uuid" : {
      "publish" : {
        "summary" : "Remove poi by uuid",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "uuid" : {
                "type" : "string"
              },
              "save" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "ZbosRemovePoiByUUIDRequest",
          "examples" : [ {
            "payload" : {
              "mapName" : "First floor",
              "uuid" : "abcd-qsdf-qsdfd-qsdf",
              "save" : false
            }
          } ]
        }
      }
    },
    "zbos/slam/poi/remove/uuid/event" : {
      "subscribe" : {
        "summary" : "event: Remove poi by uuid",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/poi/moveto/uuid" : {
      "publish" : {
        "summary" : "Move robot to poi",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "mapId" : {
                "type" : "string"
              },
              "mapName" : {
                "type" : "string"
              },
              "uuid" : {
                "type" : "string"
              },
              "speed" : {
                "type" : "integer",
                "$ref" : "#/components/schemas/percentage"
              }
            }
          },
          "name" : "ZbosMoveToPoiByUUIDRequest",
          "examples" : [ {
            "payload" : {
              "mapId" : "123456",
              "mapName" : "First floor",
              "uuid" : "abcd-qsdf-qsdfd-qsdf",
              "speed" : 50
            }
          } ]
        }
      }
    },
    "zbos/slam/path/remaining/current" : {
      "subscribe" : {
        "summary" : "Path remaining changed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "remainingPathPoints" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "x" : {
                      "type" : "number"
                    },
                    "y" : {
                      "type" : "number"
                    },
                    "z" : {
                      "type" : "number"
                    }
                  }
                }
              },
              "remainingMilestones" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "x" : {
                      "type" : "number"
                    },
                    "y" : {
                      "type" : "number"
                    },
                    "z" : {
                      "type" : "number"
                    }
                  }
                }
              }
            }
          },
          "name" : "ZbosRemainingPathObject",
          "examples" : [ {
            "payload" : {
              "remainingPathPoints" : [ {
                "x" : 50.0,
                "y" : 35.0,
                "z" : 1.0
              } ],
              "remainingMilestones" : [ {
                "x" : 50.0,
                "y" : 35.0,
                "z" : 1.0
              } ]
            }
          } ]
        }
      }
    },
    "zbos/slam/charging/required/started" : {
      "subscribe" : {
        "summary" : "Charging required",
        "description" : "Is published when battery is low/critical to indicate the robot is going to try charge itself.\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/charging/required/stopped" : {
      "subscribe" : {
        "summary" : "Battery is not critical",
        "description" : "Is published when robot has stopped charging itself\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/charging/goto" : {
      "publish" : {
        "summary" : "Go to charging station",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/charging/goto/started" : {
      "subscribe" : {
        "summary" : "Move to charging station started",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/charging/goto/stopped" : {
      "subscribe" : {
        "summary" : "Move to charging station stopped",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/charging/goto/failed" : {
      "subscribe" : {
        "summary" : "Move to charging station failed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/docking/undock/start" : {
      "publish" : {
        "summary" : "Undock",
        "description" : "Leave charging station\n",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/docking/undock/started" : {
      "subscribe" : {
        "summary" : "Undocking started",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/docking/undock/finished" : {
      "subscribe" : {
        "summary" : "Undocking finished",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/slam/docking/undock/failed" : {
      "subscribe" : {
        "summary" : "Undocking failed",
        "description" : "",
        "tags" : [ {
          "name" : "SLAM",
          "description" : "All slam related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/languages/available/get" : {
      "publish" : {
        "summary" : "Get available languages",
        "description" : "Legacy topic for getting all installed languages (both tts and asr combined). Better not to use this.see <<zbos/dialog/languages/available/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/dialog/languages/available/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get available languages",
        "description" : "response: Legacy topic for getting all installed languages (both tts and asr combined)\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : "Array<String>",
          "examples" : [ {
            "payload" : "en-US"
          }, {
            "payload" : "nl-BE"
          }, {
            "payload" : "fr-FR"
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/languages/available/event" : {
      "subscribe" : {
        "summary" : "event: Available languages changed",
        "description" : "Published when the available languages have changed\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "language_code" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<LanguageInfo>",
          "examples" : [ {
            "payload" : {
              "language_code" : "en-US"
            }
          }, {
            "payload" : {
              "language_code" : "nl-NL"
            }
          } ]
        }
      }
    },
    "zbos/dialog/languages/current/get" : {
      "publish" : {
        "summary" : "Get current language",
        "description" : "see <<zbos/dialog/languages/current/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/dialog/languages/current/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get current language",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "en-US"
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/languages/current/set" : {
      "publish" : {
        "summary" : "Set current language",
        "description" : "Set the active language, example: 'en-US'. Note: this will be probably be changed to <<zbos/dialog/set/language>> in a future release.\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "en-US"
          } ]
        }
      }
    },
    "zbos/dialog/set/message" : {
      "publish" : {
        "summary" : "Speak a message",
        "description" : "Use this to make the robot say something.\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "Hello world"
          } ]
        }
      }
    },
    "zbos/dialog/set" : {
      "publish" : {
        "summary" : "Speak a message with parameters",
        "description" : "Use this to make the robot say something with parameters. Only message is required, other params are optional.\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "requestId" : {
                "type" : "string"
              },
              "message" : {
                "type" : "string"
              },
              "speed" : {
                "type" : "integer"
              },
              "language" : {
                "description" : "Language string like \"en-US\"",
                "type" : "string"
              },
              "volume" : {
                "type" : "integer"
              },
              "gesticulation" : {
                "type" : "boolean"
              },
              "voice" : {
                "type" : "string"
              },
              "pitch" : {
                "type" : "integer"
              },
              "blocking" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "DialogOptions",
          "examples" : [ {
            "payload" : {
              "requestId" : "1",
              "message" : "Hello world",
              "speed" : 50,
              "language" : "en-US",
              "volume" : 50,
              "gesticulation" : true,
              "voice" : "Ava",
              "pitch" : 120
            }
          } ]
        }
      }
    },
    "zbos/dialog/languages/current/event" : {
      "subscribe" : {
        "summary" : "event: Current language",
        "description" : "Event when the system is done with changing language to a new language.\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "en-US"
          } ]
        }
      }
    },
    "zbos/dialog/animatedspeech/enable" : {
      "publish" : {
        "summary" : "Enable animated speech",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/animatedspeech/disable" : {
      "publish" : {
        "summary" : "Disable animated speech",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/animatedspeech/get" : {
      "publish" : {
        "summary" : "Get status of animated speech",
        "description" : "see <<zbos/dialog/animatedspeech/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/dialog/animatedspeech/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get status of animated speech",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "boolean"
          },
          "name" : "Boolean"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/tts/start" : {
      "publish" : {
        "summary" : "event: TTS started",
        "description" : "Event when the robot starts speaking and what it is saying\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "Hi, my name is James"
          } ]
        }
      }
    },
    "zbos/dialog/tts/stop" : {
      "publish" : {
        "summary" : "Stop robot speech",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/tts/end" : {
      "subscribe" : {
        "summary" : "event: TTS ended",
        "description" : "Event when the robot has finished speaking\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/hotword/recognised" : {
      "subscribe" : {
        "summary" : "event: robot has recognised a hotword",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/event/dialog/listen/started" : {
      "subscribe" : {
        "summary" : "event: robot starts listening",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/event/dialog/listen/stopped" : {
      "subscribe" : {
        "summary" : "event: robot stops listening",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/listen/start" : {
      "publish" : {
        "summary" : "Start listening",
        "description" : "Start listening for hotword and commands\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/listen/stop" : {
      "publish" : {
        "summary" : "Stop listening",
        "description" : "Cancel hotword recognition\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/service/start" : {
      "publish" : {
        "summary" : "Start dialog service",
        "description" : "Start the dialog service so the robot can listen to the mic.\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/service/stop" : {
      "publish" : {
        "summary" : "Stop dialog service",
        "description" : "Stop the dialog service so the mic is free to use by other applications.\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/service/stopped" : {
      "subscribe" : {
        "summary" : "Event: dialog service stopped",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/service/started" : {
      "subscribe" : {
        "summary" : "Event: dialog service started",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/iflytek/rotation/started" : {
      "subscribe" : {
        "summary" : "Iflytek rotation started",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/iflytek/rotation/stopped" : {
      "subscribe" : {
        "summary" : "Iflytek rotation stopped",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/tts/phonemereached" : {
      "subscribe" : {
        "summary" : "event. Phoneme reached",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "jawOpen" : {
                "type" : "boolean"
              },
              "lipTension" : {
                "type" : "integer"
              },
              "mouthHeight" : {
                "type" : "integer"
              },
              "mouthUpturn" : {
                "type" : "integer"
              },
              "mouthWidth" : {
                "type" : "integer"
              },
              "teethLowerVisible" : {
                "type" : "integer"
              },
              "teethUpperVisible" : {
                "type" : "integer"
              },
              "tonguePosition" : {
                "type" : "integer"
              }
            }
          },
          "name" : "PhonemeInfo",
          "examples" : [ {
            "payload" : {
              "jawOpen" : false,
              "lipTension" : 0,
              "mouthHeight" : 10,
              "mouthUpturn" : 0,
              "mouthWidth" : 5,
              "teethLowerVisible" : 1,
              "teethUpperVisible" : 1,
              "tonguePosition" : 1
            }
          } ]
        }
      }
    },
    "zbos/dialog/grammars/add/multiple" : {
      "publish" : {
        "summary" : "Grammars: add multiple",
        "description" : "This is an extension for the grammar add topic. It removes all grammars first and then triggers a single platform reload. Hence grammars are added a lot faster.see <<zbos/dialog/grammars/add/response>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "a unique id of the grammar. This must be unique among the application (next field).",
                  "type" : "string"
                },
                "app" : {
                  "description" : "The application name. This will be used to determined which MQTT topic will be used to post the json output to.",
                  "type" : "string"
                },
                "continuous" : {
                  "type" : "boolean"
                },
                "input" : {
                  "description" : "Contains an array for each language with all the possible sentences. The sentences need to be in a format that the speech software understands.",
                  "type" : "object"
                },
                "variables" : {
                  "type" : "object"
                }
              }
            }
          },
          "name" : "Array<CustomGrammar>",
          "examples" : [ {
            "payload" : {
              "id" : "question_1_variable",
              "app" : "App",
              "continuous" : true,
              "input" : {
                "nl-BE" : [ "Ken jij $name" ],
                "en-US" : [ "Do you know $name" ]
              },
              "variables" : {
                "name" : {
                  "nl-BE" : [ {
                    "input" : "Arno",
                    "data" : "name_in_dutch"
                  }, {
                    "input" : "Gilles",
                    "data" : "name_in_dutch"
                  } ],
                  "en-US" : [ {
                    "input" : "Arno",
                    "data" : "name_in_english"
                  }, {
                    "input" : "Gilles",
                    "data" : "name_in_english"
                  } ]
                }
              }
            }
          } ]
        }
      }
    },
    "zbos/dialog/grammars/add/response" : {
      "subscribe" : {
        "summary" : "response: grammar add",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/dialog/grammars/remove/multiple" : {
      "publish" : {
        "summary" : "Grammars: remove multiple",
        "description" : "This is an extension for the grammar remove topic. It removes all grammars first and then triggers a single platform reload. Hence grammars are removed a lot faster.see <<zbos/dialog/grammars/remove/response>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "a unique id of the grammar. This must be unique among the application (next field).",
                  "type" : "string"
                },
                "app" : {
                  "description" : "The application name. This will be used to determined which MQTT topic will be used to post the json output to.",
                  "type" : "string"
                },
                "continuous" : {
                  "type" : "boolean"
                },
                "input" : {
                  "description" : "Contains an array for each language with all the possible sentences. The sentences need to be in a format that the speech software understands.",
                  "type" : "object"
                },
                "variables" : {
                  "type" : "object"
                }
              }
            }
          },
          "name" : "Array<CustomGrammar>",
          "examples" : [ {
            "payload" : {
              "id" : "id send in add",
              "app" : "app from add"
            }
          } ]
        }
      }
    },
    "zbos/dialog/grammars/remove/response" : {
      "subscribe" : {
        "summary" : "response: grammar add",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/dialog/grammars/match/{appId}" : {
      "publish" : {
        "summary" : "Event: grammar match",
        "description" : "Event when a custom grammar match is found, the output data is posted here. \n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "app" : {
                "type" : "string"
              },
              "triggered-by" : {
                "description" : "The id of the grammer that has matched with the user input. This is the id from the input json.",
                "type" : "string"
              },
              "language" : {
                "description" : "Language that speech software was configured in when the sentence is recognised.",
                "type" : "string"
              },
              "variables" : {
                "type" : "object"
              }
            }
          },
          "name" : "GrammarMatch",
          "examples" : [ {
            "payload" : {
              "language" : "en-US",
              "variables" : {
                "beverage" : {
                  "input" : "Wine",
                  "data" : "this is wine"
                },
                "dish" : {
                  "input" : "hamburger",
                  "data" : "this is a hamburger"
                }
              },
              "triggered-by" : "input ID"
            }
          } ]
        }
      },
      "parameters" : {
        "appId" : {
          "description" : "Should be replaced by the app id used in the 'zbos/dialog/grammars/add/multiple' topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/custom/grammar/rules/get" : {
      "publish" : {
        "summary" : "Gets all custom grammar rules",
        "description" : "see <<zbos/dialog/custom/grammar/rules/get/response>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/custom/grammar/rules/get/response" : {
      "subscribe" : {
        "summary" : "response: Get all custom grammar rules",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "description" : "a unique id of the grammar. This must be unique among the application (next field).",
                  "type" : "string"
                },
                "app" : {
                  "description" : "The application name. This will be used to determined which MQTT topic will be used to post the json output to.",
                  "type" : "string"
                },
                "continuous" : {
                  "type" : "boolean"
                },
                "input" : {
                  "description" : "Contains an array for each language with all the possible sentences. The sentences need to be in a format that the speech software understands.",
                  "type" : "object"
                },
                "variables" : {
                  "type" : "object"
                }
              }
            }
          },
          "name" : "Array<CustomGrammar>"
        }
      }
    },
    "zbos/dialog/tts/languages/get" : {
      "publish" : {
        "summary" : "Get TTS languages",
        "description" : "Get a list of languages that the TTS engine can use to talk.see <<zbos/dialog/tts/languages/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/dialog/tts/languages/response/{key}" : {
      "subscribe" : {
        "summary" : "response: TTS languages list",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "service" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "age" : {
                  "type" : "string"
                },
                "language" : {
                  "type" : "string"
                },
                "languageCode" : {
                  "type" : "string"
                },
                "gender" : {
                  "type" : "string"
                },
                "languageVersion" : {
                  "type" : "string"
                },
                "frequency" : {
                  "type" : "integer"
                }
              }
            }
          },
          "name" : "Array<TtsVoiceInfo>",
          "examples" : [ {
            "payload" : "BE"
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/asr/languages/get" : {
      "publish" : {
        "summary" : "Get ASR languages",
        "description" : "Get a list of languages recognized by the ASR engine. note: For now this is limited to the language code defined in the config. No Vocon load check is done yet.see <<zbos/dialog/asr/languages/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/dialog/asr/languages/response/{key}" : {
      "subscribe" : {
        "summary" : "response: ASR languages list",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "languageCode" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<OdpAsrLanguagesResponse>",
          "examples" : [ {
            "payload" : "nl-BE"
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/asr/recognition/result" : {
      "subscribe" : {
        "summary" : "Speech recognised event",
        "description" : "Event sent by the dialog service when user said something. Mainly for subtitles.\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "Okay James"
          } ]
        }
      }
    },
    "zbos/dialog/asr/pause" : {
      "publish" : {
        "summary" : "Pause ASR",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/dialog/asr/pause/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Pause ASR",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/asr/pause/event" : {
      "subscribe" : {
        "summary" : "event: Pause ASR",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/asr/resume" : {
      "publish" : {
        "summary" : "Resume ASR",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/dialog/asr/resume/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Resume ASR",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/asr/resume/event" : {
      "subscribe" : {
        "summary" : "event: Resume ASR",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/asr/state/get" : {
      "publish" : {
        "summary" : "Get ASR state",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/dialog/asr/state/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get ASR state",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "paused" : {
                "type" : "boolean"
              },
              "enabled" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "AsrState",
          "examples" : [ {
            "payload" : {
              "paused" : true,
              "enabled" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/text/command" : {
      "publish" : {
        "summary" : "Send a text message to dialog system",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/dialog/language/setup/start" : {
      "publish" : {
        "summary" : "Start language setup",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/language/setup/stop" : {
      "publish" : {
        "summary" : "Stop language setup",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/dialog/set/config" : {
      "publish" : {
        "summary" : "Set the current speech config",
        "description" : "see <<zbos/dialog/set/config/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "config_items" : {
                "description" : "One or more config items.",
                "type" : "object"
              },
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              }
            }
          },
          "name" : "SetDialogConfigRequest",
          "examples" : [ {
            "payload" : {
              "key" : "ABCxyz",
              "config_items" : { }
            }
          } ]
        }
      }
    },
    "zbos/dialog/set/config/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Speech config was set",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/dialog/get/config" : {
      "publish" : {
        "summary" : "Get the current speech config",
        "description" : "see <<zbos/dialog/get/config/response>> for response\n",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "config_items" : {
                "description" : "One or more config keys.",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "key" : {
                "description" : "Required random key",
                "type" : "string"
              }
            }
          },
          "name" : "GetDialogConfigRequest",
          "examples" : [ {
            "payload" : {
              "key" : "ABCxyz",
              "config_items" : [ ]
            }
          } ]
        }
      }
    },
    "zbos/dialog/get/config/response" : {
      "subscribe" : {
        "summary" : "response: Current dialog config",
        "description" : "",
        "tags" : [ {
          "name" : "Speech",
          "description" : "All speech related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object"
          },
          "name" : "Map",
          "examples" : [ {
            "payload" : {
              "key" : "ABCxyz",
              "config_items" : [ ]
            }
          } ]
        }
      }
    },
    "zbos/notification/all/event" : {
      "subscribe" : {
        "summary" : "Notify everything",
        "description" : "",
        "tags" : [ {
          "name" : "Status",
          "description" : "All status related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/notificationMessage"
        }
      }
    },
    "zbos/notification/info/event" : {
      "subscribe" : {
        "summary" : "Notify information",
        "description" : "",
        "tags" : [ {
          "name" : "Status",
          "description" : "All status related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/notificationMessage"
        }
      }
    },
    "zbos/notification/warning/event" : {
      "subscribe" : {
        "summary" : "Notify warnings",
        "description" : "",
        "tags" : [ {
          "name" : "Status",
          "description" : "All status related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/notificationMessage"
        }
      }
    },
    "zbos/notification/error/event" : {
      "subscribe" : {
        "summary" : "Notify errors",
        "description" : "",
        "tags" : [ {
          "name" : "Status",
          "description" : "All status related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/notificationMessage"
        }
      }
    },
    "zbos/survey/start" : {
      "publish" : {
        "summary" : "Start the survey app",
        "description" : "Can specify survey ID or survey name, when left blank the survey picker will be shown\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "meta" : {
                "type" : "object",
                "properties" : {
                  "languages" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "default_language" : {
                    "type" : "string"
                  },
                  "version" : {
                    "type" : "string"
                  },
                  "created_on" : {
                    "type" : "string"
                  },
                  "last_updated_on" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "name" : "SimpleSurvey",
          "examples" : [ {
            "payload" : {
              "id" : "some_id"
            }
          }, {
            "payload" : {
              "name" : "some_name"
            }
          }, {
            "payload" : { }
          } ]
        }
      }
    },
    "zbos/survey/start/event" : {
      "subscribe" : {
        "summary" : "event: A survey has started",
        "description" : "Published when a survey has started\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "language" : {
                "type" : "string"
              }
            }
          },
          "name" : "SurveyEvent",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name",
              "type" : "SURVEY",
              "language" : "en-US"
            }
          } ]
        }
      }
    },
    "zbos/survey/question/event" : {
      "subscribe" : {
        "summary" : "event: A survey question has been asked",
        "description" : "Published when a survey question has been asked\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "language" : {
                "type" : "string"
              },
              "question" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "string"
                  },
                  "title" : {
                    "type" : "string"
                  },
                  "type" : {
                    "type" : "string",
                    "enum" : [ "SLIDER", "TEXT", "MULTIPLE_CHOICE" ]
                  },
                  "option_type" : {
                    "description" : "Only relevant for multiple choice questions",
                    "type" : "string",
                    "enum" : [ "HORIZONTAL", "VERTICAL" ]
                  },
                  "multi_select" : {
                    "description" : "Only relevant for multiple choice questions",
                    "type" : "boolean"
                  },
                  "options" : {
                    "description" : "Only relevant for multiple choice questions",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "string"
                        },
                        "image" : {
                          "type" : "string"
                        },
                        "text" : {
                          "type" : "string"
                        },
                        "text_position" : {
                          "type" : "string",
                          "enum" : [ "TOP", "BOTTOM" ]
                        }
                      }
                    }
                  },
                  "slider" : {
                    "description" : "Only relevant for slider questions",
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "type" : "string"
                      },
                      "min" : {
                        "type" : "integer"
                      },
                      "max" : {
                        "type" : "integer"
                      },
                      "correct_number" : {
                        "description" : "The slider value counted as a correct answer",
                        "type" : "integer"
                      },
                      "step" : {
                        "type" : "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "SurveyQuestionEvent",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name",
              "type" : "SURVEY",
              "language" : "en-US",
              "question" : {
                "id" : "some_question_id",
                "title" : "Please enter your favourite food",
                "type" : "TEXT"
              }
            }
          }, {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name",
              "type" : "QUIZ",
              "language" : "en-US",
              "question" : {
                "id" : "some_question_id",
                "title" : "When was the first world war?",
                "type" : "SLIDER"
              }
            }
          }, {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name",
              "type" : "SURVEY",
              "language" : "en-US",
              "question" : {
                "id" : "some_question_id",
                "title" : "Please select your favourite food",
                "type" : "MULTIPLE_CHOICE",
                "option_type" : "HORIZONTAL",
                "multi_select" : false
              }
            }
          } ]
        }
      }
    },
    "zbos/survey/answer/event" : {
      "subscribe" : {
        "summary" : "event: A survey question has been answered",
        "description" : "Published when a survey question has been answered\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "language" : {
                "type" : "string"
              },
              "question" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "string"
                  },
                  "title" : {
                    "type" : "string"
                  },
                  "type" : {
                    "type" : "string",
                    "enum" : [ "SLIDER", "TEXT", "MULTIPLE_CHOICE" ]
                  },
                  "option_type" : {
                    "description" : "Only relevant for multiple choice questions",
                    "type" : "string",
                    "enum" : [ "HORIZONTAL", "VERTICAL" ]
                  },
                  "multi_select" : {
                    "description" : "Only relevant for multiple choice questions",
                    "type" : "boolean"
                  },
                  "options" : {
                    "description" : "Only relevant for multiple choice questions",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "string"
                        },
                        "image" : {
                          "type" : "string"
                        },
                        "text" : {
                          "type" : "string"
                        },
                        "text_position" : {
                          "type" : "string",
                          "enum" : [ "TOP", "BOTTOM" ]
                        }
                      }
                    }
                  },
                  "slider" : {
                    "description" : "Only relevant for slider questions",
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "type" : "string"
                      },
                      "min" : {
                        "type" : "integer"
                      },
                      "max" : {
                        "type" : "integer"
                      },
                      "correct_number" : {
                        "description" : "The slider value counted as a correct answer",
                        "type" : "integer"
                      },
                      "step" : {
                        "type" : "integer"
                      }
                    }
                  }
                }
              },
              "answers" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "index" : {
                      "description" : "The index of the corresponding option, only relevant for multiple choice questions",
                      "type" : "integer"
                    },
                    "text" : {
                      "description" : "Only relevant for text input questions",
                      "type" : "string"
                    },
                    "correct" : {
                      "description" : "Only relevant for quizzes",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          },
          "name" : "SurveyAnswerEvent",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name",
              "type" : "SURVEY",
              "language" : "en-US",
              "question" : {
                "id" : "some_question_id",
                "title" : "Please enter your favourite food",
                "type" : "TEXT"
              },
              "answers" : [ {
                "text" : "Pizza"
              } ]
            }
          }, {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name",
              "type" : "SURVEY",
              "language" : "en-US",
              "question" : {
                "id" : "some_question_id",
                "title" : "Please select your favourite foods",
                "type" : "MULTIPLE_CHOICE",
                "option_type" : "HORIZONTAL",
                "multi_select" : true
              },
              "answers" : [ {
                "index" : 0
              }, {
                "index" : 1
              } ]
            }
          } ]
        }
      }
    },
    "zbos/survey/finish/event" : {
      "subscribe" : {
        "summary" : "event: A survey has finished",
        "description" : "Published when a survey has finished\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "language" : {
                "type" : "string"
              }
            }
          },
          "name" : "SurveyEvent",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name",
              "type" : "SURVEY",
              "language" : "en-US"
            }
          } ]
        }
      }
    },
    "zbos/survey/stop/event" : {
      "subscribe" : {
        "summary" : "event: A survey has stopped",
        "description" : "Published when a survey has stopped\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "language" : {
                "type" : "string"
              }
            }
          },
          "name" : "SurveyEvent",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name",
              "type" : "SURVEY",
              "language" : "en-US"
            }
          } ]
        }
      }
    },
    "zbos/survey/get" : {
      "publish" : {
        "summary" : "Get survey",
        "description" : "see <<zbos/survey/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/survey/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get survey",
        "description" : "",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/survey/all/get" : {
      "publish" : {
        "summary" : "Get all surveys",
        "description" : "see <<zbos/survey/all/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/survey/all/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get all surveys",
        "description" : "",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [ "SURVEY", "QUIZ" ]
                },
                "meta" : {
                  "type" : "object",
                  "properties" : {
                    "languages" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "default_language" : {
                      "type" : "string"
                    },
                    "version" : {
                      "type" : "string"
                    },
                    "created_on" : {
                      "type" : "string"
                    },
                    "last_updated_on" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "name" : "Array<SimpleSurvey>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/survey/current/get" : {
      "publish" : {
        "summary" : "Get active survey",
        "description" : "see <<zbos/survey/current/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/survey/current/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get active survey",
        "description" : "",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "language" : {
                "type" : "string"
              }
            }
          },
          "name" : "SurveyEvent",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "name" : "some_name"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/survey/save" : {
      "publish" : {
        "summary" : "Add/save survey",
        "description" : "",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "meta" : {
                "type" : "object",
                "properties" : {
                  "languages" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "default_language" : {
                    "type" : "string"
                  },
                  "version" : {
                    "type" : "string"
                  },
                  "created_on" : {
                    "type" : "string"
                  },
                  "last_updated_on" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "name" : "SimpleSurvey",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/survey/save/event" : {
      "subscribe" : {
        "summary" : "event: Survey added/saved",
        "description" : "",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/survey/delete" : {
      "publish" : {
        "summary" : "Delete survey",
        "description" : "",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string",
                "enum" : [ "SURVEY", "QUIZ" ]
              },
              "meta" : {
                "type" : "object",
                "properties" : {
                  "languages" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "default_language" : {
                    "type" : "string"
                  },
                  "version" : {
                    "type" : "string"
                  },
                  "created_on" : {
                    "type" : "string"
                  },
                  "last_updated_on" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "name" : "SimpleSurvey",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/survey/delete/event" : {
      "subscribe" : {
        "summary" : "event: Survey deleted",
        "description" : "",
        "tags" : [ {
          "name" : "Survey",
          "description" : "All survey related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/alarm/trigger" : {
      "publish" : {
        "summary" : "Call for help",
        "description" : "Send an Alarm message, trigger alarm, call for help.\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "serverDomain" : {
                "type" : "string"
              },
              "localUsername" : {
                "type" : "string"
              },
              "localPassword" : {
                "type" : "string"
              },
              "localPort" : {
                "type" : "integer"
              },
              "peerUsername" : {
                "type" : "string"
              },
              "peerPassword" : {
                "type" : "string"
              },
              "peerPort" : {
                "type" : "integer"
              },
              "metaData" : {
                "type" : "object"
              },
              "alarmType" : {
                "type" : "string",
                "enum" : [ "DEFAULT", "VERKLIZAN", "SENSOR" ]
              },
              "callTimeout" : {
                "type" : "integer"
              },
              "hangupAllowed" : {
                "type" : "boolean"
              },
              "enabled" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "SipConfig",
          "examples" : [ {
            "payload" : {
              "serverDomain" : "string",
              "localUsername" : "string",
              "localPassword" : "string",
              "localPort" : 5060,
              "peerUsername" : "string",
              "peerPassword" : "string",
              "peerPort" : 5060,
              "metaData" : { },
              "alarmType" : "DEFAULT",
              "callTimeout" : 120000,
              "hangupAllowed" : false,
              "enabled" : false
            }
          } ]
        }
      }
    },
    "zbos/alarm/trigger/event" : {
      "subscribe" : {
        "summary" : "event: Trigger alarm and call for help",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/alarm/call/started" : {
      "subscribe" : {
        "summary" : "Alarm call started",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/alarm/call/established" : {
      "subscribe" : {
        "summary" : "Alarm call established",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/alarm/call/ended" : {
      "subscribe" : {
        "summary" : "Alarm call ended",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/alarm/set" : {
      "publish" : {
        "summary" : "Set alarm call",
        "description" : "see <<zbos/alarm/set/response>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "alarmServiceProvider" : {
                "type" : "string",
                "enum" : [ "verklizan", "sensor" ]
              },
              "metadata" : {
                "type" : "object"
              }
            }
          },
          "name" : "ZbosAlarm",
          "examples" : [ {
            "payload" : {
              "key" : "string",
              "alarmServiceProvider" : "sensor",
              "metadata" : { }
            }
          } ]
        }
      }
    },
    "zbos/alarm/set/response" : {
      "subscribe" : {
        "summary" : "response: Set alarm call",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/alarm/event" : {
      "subscribe" : {
        "summary" : "Alarm has been received",
        "description" : "An event indicating an alarm was triggered\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object"
          },
          "name" : "Map"
        }
      }
    },
    "zbos/alarm/config/get" : {
      "publish" : {
        "summary" : "Get alarm configs",
        "description" : "Get an object containing all alarm configssee <<zbos/alarm/config/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/alarm/config/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Get alarm configs response",
        "description" : "Response of configs by alarm name\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object"
          },
          "name" : "HashMap"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/alarm/config/set" : {
      "publish" : {
        "summary" : "Set alarm config ",
        "description" : "Sets the config for a specific alarm type\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string"
              },
              "config" : {
                "type" : "object"
              }
            }
          },
          "name" : "AlarmConfigRequest",
          "examples" : [ {
            "payload" : {
              "type" : "string",
              "config" : {
                "string" : "string"
              }
            }
          } ]
        }
      }
    },
    "zbos/alarm/config/set/event" : {
      "subscribe" : {
        "summary" : "Set alarm config response",
        "description" : "An event indicating the alarm config was changed\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "error" : {
                "type" : "string",
                "enum" : [ "MALFORMED_REQUEST", "MISSING_CONFIG_PROPERTY", "TYPE_NOT_FOUND" ]
              }
            }
          },
          "name" : "AlarmConfigResult",
          "examples" : [ {
            "payload" : {
              "type" : "string",
              "config" : {
                "string" : "string"
              }
            }
          } ]
        }
      }
    },
    "zbos/alarm/database/get" : {
      "publish" : {
        "summary" : "Get alarm database",
        "description" : "Retrieves a list of all the alarms stored in the databasesee <<zbos/alarm/database/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/alarm/database/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Get alarm database response",
        "description" : "The response to a database get request\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "string"
                },
                "downloadPath" : {
                  "type" : "string"
                },
                "previewPath" : {
                  "type" : "string"
                },
                "mediaFile" : {
                  "type" : "string"
                },
                "timestamp" : {
                  "type" : "number"
                },
                "metadata" : {
                  "type" : "object"
                }
              }
            }
          },
          "name" : "Array<MonitoringResult>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "type" : "string",
              "downloadPath" : "string",
              "previewPath" : "string",
              "mediaFile" : "string",
              "timestamp" : 1012001,
              "metadata" : { }
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/alarm/database/remove" : {
      "publish" : {
        "summary" : "Remove alarm database",
        "description" : "Remove all alarms from the database\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/alarm/database/remove/event" : {
      "subscribe" : {
        "summary" : "Remove alarm database response",
        "description" : "An event indicating the alarm database was removed\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/alarm/images/remove" : {
      "publish" : {
        "summary" : "Remove alarm images",
        "description" : "Remove all alarm images from the robot\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/alarm/images/remove/event" : {
      "subscribe" : {
        "summary" : "Remove alarm images response",
        "description" : "An event indicating images were removed\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/alarm/all/remove" : {
      "publish" : {
        "summary" : "Remove alarm images and database",
        "description" : "Remove all alarm images and database entries from the robot\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/alarm/all/remove/event" : {
      "subscribe" : {
        "summary" : "Remove alarm images and database response",
        "description" : "An event indicating images and databases were removed\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/status/battery/get" : {
      "publish" : {
        "summary" : "Get battery status",
        "description" : "see <<zbos/status/battery/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/status/battery/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get battery status",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "level" : {
                "type" : "integer",
                "$ref" : "#/components/schemas/percentage"
              },
              "charging" : {
                "type" : "boolean"
              },
              "docked" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "BatteryEvent",
          "examples" : [ {
            "payload" : {
              "level" : 50,
              "charging" : true,
              "docked" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/status/battery/event" : {
      "subscribe" : {
        "summary" : "event: Battery change",
        "description" : "A message (json) is published on this topic when the robot battery status changes. Level is the battery level in percent. If the battery status is not yet available, then the level is -1.\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "level" : {
                "type" : "integer",
                "$ref" : "#/components/schemas/percentage"
              },
              "charging" : {
                "type" : "boolean"
              },
              "docked" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "BatteryEvent",
          "examples" : [ {
            "payload" : {
              "level" : 50,
              "charging" : true,
              "docked" : true
            }
          } ]
        }
      }
    },
    "zbos/status/battery/low/set" : {
      "publish" : {
        "summary" : "Set the battery low level threshold",
        "description" : "At what battery percentage the robot will act as if it is at low battery\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "percent" : {
                "type" : "integer",
                "$ref" : "#/components/schemas/percentage"
              }
            }
          },
          "name" : "BatterySetRequest",
          "examples" : [ {
            "payload" : {
              "percent" : 30
            }
          } ]
        }
      }
    },
    "zbos/status/battery/low/get" : {
      "publish" : {
        "summary" : "Get the battery low level threshold",
        "description" : "see <<zbos/status/battery/low/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/status/battery/low/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: battery low level",
        "description" : "Response which shows the battery low level threshold\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/status/battery/critical/set" : {
      "publish" : {
        "summary" : "Set the battery critical level threshold",
        "description" : "At what battery percentage the robot will act as if it is at critical battery\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "percent" : {
                "type" : "integer",
                "$ref" : "#/components/schemas/percentage"
              }
            }
          },
          "name" : "BatterySetRequest",
          "examples" : [ {
            "payload" : {
              "percent" : 10
            }
          } ]
        }
      }
    },
    "zbos/status/battery/critical/get" : {
      "publish" : {
        "summary" : "Get the battery critical level threshold",
        "description" : "see <<zbos/status/battery/critical/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/status/battery/critical/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: battery critical level",
        "description" : "Response which shows the battery critical level threshold\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/system/robot/identification/get" : {
      "publish" : {
        "summary" : "Request robot identification",
        "description" : "Use this to ask a detailed list of robot specifics like serial, features, ...\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/system/robot/identification/event" : {
      "subscribe" : {
        "summary" : "response: Robot identification",
        "description" : "A detailed list of robot specifics\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "robot_type" : {
                "type" : "string"
              },
              "body_id" : {
                "type" : "string"
              },
              "serial" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              },
              "versions" : {
                "type" : "object"
              },
              "network_info" : {
                "type" : "object",
                "properties" : {
                  "ip" : {
                    "type" : "string"
                  },
                  "mac_address" : {
                    "type" : "string"
                  },
                  "ssid" : {
                    "type" : "string"
                  }
                }
              },
              "features" : {
                "type" : "object",
                "properties" : {
                  "audio" : {
                    "type" : "object",
                    "properties" : {
                      "control_parameters" : {
                        "type" : "object",
                        "properties" : {
                          "pitch" : {
                            "type" : "object",
                            "properties" : {
                              "min" : {
                                "type" : "integer"
                              },
                              "step" : {
                                "type" : "integer"
                              },
                              "default" : {
                                "type" : "integer"
                              },
                              "max" : {
                                "type" : "integer"
                              }
                            }
                          },
                          "speed" : {
                            "type" : "object",
                            "properties" : {
                              "min" : {
                                "type" : "integer"
                              },
                              "step" : {
                                "type" : "integer"
                              },
                              "default" : {
                                "type" : "integer"
                              },
                              "max" : {
                                "type" : "integer"
                              }
                            }
                          },
                          "volume" : {
                            "type" : "object",
                            "properties" : {
                              "min" : {
                                "type" : "integer"
                              },
                              "step" : {
                                "type" : "integer"
                              },
                              "default" : {
                                "type" : "integer"
                              },
                              "max" : {
                                "type" : "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "external_displays" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "string"
                        },
                        "video" : {
                          "type" : "boolean"
                        },
                        "audio" : {
                          "type" : "boolean"
                        },
                        "width" : {
                          "type" : "integer"
                        },
                        "height" : {
                          "type" : "integer"
                        }
                      }
                    }
                  },
                  "cameras" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "key" : {
                          "type" : "string"
                        },
                        "primary" : {
                          "type" : "boolean"
                        },
                        "rotation" : {
                          "type" : "integer"
                        },
                        "image_rotation" : {
                          "type" : "integer"
                        },
                        "preview_scale_x" : {
                          "description" : "Scale the camera preview on the horizontal axis, can be mirrored using negative values",
                          "type" : "number"
                        }
                      }
                    }
                  },
                  "can_poi" : {
                    "type" : "boolean"
                  },
                  "can_move" : {
                    "type" : "boolean"
                  },
                  "can_dance" : {
                    "type" : "boolean"
                  },
                  "can_speech" : {
                    "type" : "boolean"
                  },
                  "can_execute_speech_commands" : {
                    "type" : "boolean"
                  },
                  "has_storage" : {
                    "type" : "boolean"
                  },
                  "can_animate" : {
                    "type" : "boolean"
                  },
                  "can_gym" : {
                    "type" : "boolean"
                  },
                  "has_sensors" : {
                    "type" : "boolean"
                  },
                  "has_emotions" : {
                    "type" : "boolean"
                  },
                  "can_video_stream" : {
                    "type" : "boolean"
                  },
                  "can_take_picture" : {
                    "type" : "boolean"
                  },
                  "has_slam_image_map" : {
                    "type" : "boolean"
                  },
                  "has_security_mode" : {
                    "type" : "boolean"
                  },
                  "can_detect_motion" : {
                    "type" : "boolean"
                  },
                  "can_face_recognize" : {
                    "type" : "boolean"
                  },
                  "can_poi_interactive" : {
                    "type" : "boolean"
                  },
                  "has_monitoring" : {
                    "type" : "boolean"
                  },
                  "has_qr_scanner" : {
                    "type" : "boolean"
                  },
                  "can_change_ntp_server" : {
                    "type" : "boolean"
                  },
                  "voice_feature" : {
                    "type" : "object",
                    "properties" : {
                      "supports_gesticulate" : {
                        "type" : "boolean"
                      },
                      "supports_language" : {
                        "type" : "boolean"
                      },
                      "supports_pitch" : {
                        "type" : "boolean"
                      },
                      "supports_speed" : {
                        "type" : "boolean"
                      },
                      "supports_volume" : {
                        "type" : "boolean"
                      },
                      "supports_speech_volume" : {
                        "type" : "boolean"
                      },
                      "control_parameters" : {
                        "type" : "object",
                        "properties" : {
                          "pitch" : {
                            "type" : "object",
                            "properties" : {
                              "min" : {
                                "type" : "integer"
                              },
                              "step" : {
                                "type" : "integer"
                              },
                              "default" : {
                                "type" : "integer"
                              },
                              "max" : {
                                "type" : "integer"
                              }
                            }
                          },
                          "speed" : {
                            "type" : "object",
                            "properties" : {
                              "min" : {
                                "type" : "integer"
                              },
                              "step" : {
                                "type" : "integer"
                              },
                              "default" : {
                                "type" : "integer"
                              },
                              "max" : {
                                "type" : "integer"
                              }
                            }
                          },
                          "volume" : {
                            "type" : "object",
                            "properties" : {
                              "min" : {
                                "type" : "integer"
                              },
                              "step" : {
                                "type" : "integer"
                              },
                              "default" : {
                                "type" : "integer"
                              },
                              "max" : {
                                "type" : "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "listen_feature" : {
                    "type" : "object",
                    "properties" : {
                      "can_trigger_manual" : {
                        "type" : "boolean"
                      },
                      "can_trigger_hotword" : {
                        "type" : "boolean"
                      }
                    }
                  },
                  "slam_feature" : {
                    "type" : "object",
                    "properties" : {
                      "can_navigate" : {
                        "type" : "boolean"
                      },
                      "can_extend_map" : {
                        "type" : "boolean"
                      },
                      "can_manage_pois" : {
                        "type" : "boolean"
                      },
                      "can_manage_walls" : {
                        "type" : "boolean"
                      },
                      "has_docking_station" : {
                        "type" : "boolean"
                      }
                    }
                  },
                  "voip_feature" : {
                    "type" : "object",
                    "properties" : {
                      "supports_voip" : {
                        "type" : "boolean"
                      }
                    }
                  },
                  "face_recognition_feature" : {
                    "type" : "object",
                    "properties" : {
                      "can_detect_known_faces" : {
                        "type" : "boolean"
                      },
                      "can_detect_number_of_faces" : {
                        "type" : "boolean"
                      }
                    }
                  },
                  "time_feature" : {
                    "type" : "object",
                    "properties" : {
                      "can_change_time_zone" : {
                        "type" : "boolean"
                      }
                    }
                  },
                  "print_feature" : {
                    "type" : "object",
                    "properties" : {
                      "can_print" : {
                        "type" : "boolean"
                      }
                    }
                  },
                  "health_certificates_feature" : {
                    "type" : "object",
                    "properties" : {
                      "can_check_certificates" : {
                        "type" : "boolean"
                      }
                    }
                  }
                }
              },
              "hardware" : {
                "type" : "object",
                "properties" : {
                  "heads" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "moveable" : {
                          "type" : "boolean"
                        },
                        "can_reset_to_default_position" : {
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "parts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "name" : {
                          "type" : "string"
                        },
                        "moveable" : {
                          "type" : "boolean"
                        },
                        "can_reset_to_default_position" : {
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "usb" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "type" : "string",
                          "enum" : [ "USB_1", "USB_1_1", "USB_2", "USB_3", "USB_3_1", "USB_3_2", "USB_4" ]
                        }
                      }
                    }
                  }
                }
              },
              "composer" : {
                "type" : "object",
                "properties" : {
                  "simple" : {
                    "type" : "object",
                    "properties" : {
                      "dance" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "speech" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "animation" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "emotion" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "wait_duration" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "wait_sensor" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "wait_face" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "wait_voice" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "wait_qr_code" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "wait_monitoring" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "motion_head" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "motion_detection" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "multimedia" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "poi" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "mqtt" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "mqtt_connection" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "app_start" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "change_datasource" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "input" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "multimedia_stop" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "browser" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "gym" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "print" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "text_overlay" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "domotics_action" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "domotics_wait" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "domotics_state" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "string_operation" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "settings" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      }
                    }
                  },
                  "advanced" : {
                    "type" : "object",
                    "properties" : {
                      "math_formula" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "math_operations" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "if_else" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "variables" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "api" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "loop" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "start" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "stop" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "health_certificate" : {
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "type" : "boolean"
                          },
                          "enabled_sources" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "enum" : [ "scheduler", "composer", "task_manager" ]
                            }
                          },
                          "can_block" : {
                            "type" : "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "supported_file_types" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "mime_type" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "connection_features" : {
                "type" : "object",
                "properties" : {
                  "has_wifi" : {
                    "type" : "boolean"
                  },
                  "has_cable" : {
                    "type" : "boolean"
                  },
                  "has_hotspot" : {
                    "type" : "boolean"
                  },
                  "cable_features" : {
                    "type" : "object",
                    "properties" : {
                      "adapter_names" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "wifi_features" : {
                    "type" : "object",
                    "properties" : {
                      "can_configure" : {
                        "type" : "boolean"
                      },
                      "adapter_names" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "hotspot_features" : {
                    "type" : "object",
                    "properties" : {
                      "can_activate" : {
                        "type" : "boolean"
                      },
                      "can_change_ssid" : {
                        "type" : "boolean"
                      },
                      "can_change_password" : {
                        "type" : "boolean"
                      },
                      "adapter_names" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "name" : "RobotIdentification",
          "examples" : [ {
            "payload" : {
              "serial" : "SH-J01-00096",
              "name" : "Jamesy",
              "versions" : { },
              "features" : {
                "audio" : {
                  "control_parameters" : {
                    "pitch" : {
                      "min" : 0,
                      "step" : 1,
                      "default" : 50,
                      "max" : 100
                    },
                    "speed" : {
                      "min" : 0,
                      "step" : 1,
                      "default" : 50,
                      "max" : 100
                    },
                    "volume" : {
                      "min" : 0,
                      "step" : 1,
                      "default" : 50,
                      "max" : 100
                    }
                  }
                },
                "cameras" : [ {
                  "key" : "kiosk",
                  "primary" : true,
                  "rotation" : 0,
                  "preview_scale_x" : -1.0
                } ],
                "external_displays" : [ {
                  "id" : "main_display",
                  "video" : true,
                  "audio" : true,
                  "width" : 1280,
                  "height" : 800
                } ],
                "can_poi" : true,
                "can_move" : true,
                "can_dance" : false,
                "can_speech" : true,
                "can_execute_speech_commands" : true,
                "has_storage" : true,
                "can_animate" : false,
                "can_gym" : false,
                "has_sensors" : true,
                "has_emotions" : false,
                "can_video_stream" : true,
                "can_take_picture" : true,
                "has_slam_image_map" : true,
                "has_security_mode" : true,
                "can_detect_motion" : true,
                "can_face_recognize" : true,
                "can_poi_interactive" : true,
                "has_monitoring" : false,
                "has_qr_scanner" : false,
                "can_change_ntp_server" : false,
                "voice_feature" : {
                  "supports_gesticulate" : false,
                  "supports_language" : true,
                  "supports_pitch" : true,
                  "supports_speed" : true,
                  "supports_volume" : true,
                  "supports_speech_volume" : true
                },
                "listen_feature" : {
                  "can_trigger_manual" : true,
                  "can_trigger_hotword" : true
                },
                "slam_feature" : {
                  "can_navigate" : true,
                  "can_extend_map" : true,
                  "can_manage_pois" : true,
                  "can_manage_walls" : true,
                  "has_docking_station" : false
                },
                "voip_feature" : {
                  "supports_voip" : true
                },
                "face_recognition_feature" : {
                  "can_detect_known_faces" : false,
                  "can_detect_number_of_faces" : true
                },
                "time_feature" : {
                  "can_change_time_zone" : true
                },
                "print_feature" : {
                  "can_print" : true
                },
                "health_certificates_feature" : {
                  "can_check_certificates" : true
                }
              },
              "hardware" : {
                "heads" : [ {
                  "moveable" : true,
                  "can_reset_to_default_position" : true
                } ],
                "parts" : [ {
                  "name" : "Leg",
                  "moveable" : false,
                  "can_reset_to_default_position" : false
                } ]
              },
              "composer" : {
                "simple" : {
                  "dance" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "speech" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  },
                  "animation" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "emotion" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "multimedia" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  },
                  "poi" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  },
                  "mqtt" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  },
                  "input" : {
                    "enabled" : true,
                    "enabled_sources" : [ "composer" ],
                    "can_block" : true
                  },
                  "browser" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  },
                  "gym" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "wait_duration" : {
                    "enabled" : true,
                    "enabled_sources" : [ "composer" ],
                    "can_block" : true
                  },
                  "wait_sensor" : {
                    "enabled" : true,
                    "enabled_sources" : [ "composer" ],
                    "can_block" : true
                  },
                  "wait_face" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "wait_voice" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "wait_qr_code" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "motion_head" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  },
                  "motion_detection" : {
                    "enabled" : true,
                    "enabled_sources" : [ "composer" ],
                    "can_block" : true
                  },
                  "app_start" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  },
                  "change_datasource" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  },
                  "multimedia_stop" : {
                    "enabled" : true,
                    "enabled_sources" : [ "scheduler", "composer", "task_manager" ],
                    "can_block" : true
                  }
                },
                "advanced" : {
                  "variables" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "api" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "loop" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "start" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "stop" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "math_formula" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "math_operations" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  },
                  "if_else" : {
                    "enabled" : false,
                    "enabled_sources" : [ ],
                    "can_block" : true
                  }
                }
              },
              "robot_type" : "James",
              "body_id" : "D2EE32C8F3EFF59FDFEAF6E21834F71C",
              "network_info" : {
                "ip" : "172.16.0.100",
                "ssid" : "string",
                "mac_address" : "02:00:00:00:00:00"
              },
              "supported_file_types" : [ {
                "type" : "string",
                "mime_type" : "string"
              } ],
              "connection_features" : {
                "has_wifi" : true,
                "has_cable" : false,
                "has_hotspot" : true,
                "cable_features" : {
                  "adapter_names" : [ ]
                },
                "wifi_features" : {
                  "can_configure" : false,
                  "adapter_names" : [ "wlan0" ]
                },
                "hotspot_features" : {
                  "can_activate" : true,
                  "can_change_ssid" : true,
                  "can_change_password" : true,
                  "adapter_names" : [ "WIFI1", "WIFI2" ]
                }
              }
            }
          } ]
        }
      }
    },
    "zbos/system/name/set" : {
      "publish" : {
        "summary" : "Set robot name",
        "description" : "Use this to change the robot name. The change will be published through <<zbos/system/robot/identification/event>>\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String",
          "examples" : [ {
            "payload" : "Betsy"
          } ]
        }
      }
    },
    "zbos/system/version/get" : {
      "publish" : {
        "summary" : "Get system version",
        "description" : "see <<zbos/system/version/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/system/version/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get system version",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string"
              },
              "version" : {
                "type" : "string"
              }
            }
          },
          "name" : "AppVersion",
          "examples" : [ {
            "payload" : {
              "name" : "CR-16",
              "version" : "4.2.0"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/system/serial/get" : {
      "publish" : {
        "summary" : "Get system serial number",
        "description" : "see <<zbos/system/serial/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/system/serial/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get system serial number",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/event/system/poke" : {
      "subscribe" : {
        "summary" : "Poke robot",
        "description" : "When robot receives this event, it responds by showing he received the event. This can be by flashing a led. This is useful to see which robot your are controlling.\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/event/system/poke/response" : {
      "subscribe" : {
        "summary" : "Poke robot response",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/system/ready/event" : {
      "subscribe" : {
        "summary" : "event: System ready",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/system/ready/request" : {
      "publish" : {
        "summary" : "Get system ready",
        "description" : "see <<zbos/system/ready/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/system/ready/response/{key}" : {
      "subscribe" : {
        "summary" : "response: System ready",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/system/hotword/rotation" : {
      "publish" : {
        "summary" : "Enable hotword rotation",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/system/hotword/rotation/changed/event" : {
      "subscribe" : {
        "summary" : "Hotword rotation changed event",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/system/hotword/rotation/get" : {
      "publish" : {
        "summary" : "Get hotword rotation",
        "description" : "see <<zbos/system/hotword/rotation/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/system/hotword/rotation/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: hotword rotation",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/system/adblogs/upload" : {
      "publish" : {
        "summary" : "Enable adb logs upload",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/system/adblogs/changed/event" : {
      "subscribe" : {
        "summary" : "Adb logs changed event",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/system/adblogs/get" : {
      "publish" : {
        "summary" : "Get adb logs",
        "description" : "see <<zbos/system/adblogs/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/system/adblogs/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: Get adb logs",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/system/cloud/enable" : {
      "publish" : {
        "summary" : "Enable cloud broker",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/system/cloud/enable/changing/event" : {
      "subscribe" : {
        "summary" : "Cloud broker state is currently changing",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/system/cloud/enable/changed/event" : {
      "subscribe" : {
        "summary" : "Cloud broker enable changed event",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/system/cloud/enable/get" : {
      "publish" : {
        "summary" : "Get cloud broker enabled state",
        "description" : "see <<zbos/system/cloud/enable/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/system/cloud/enable/response/{key}" : {
      "subscribe" : {
        "summary" : "Response: cloud broker enabled state",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/system/license/get" : {
      "publish" : {
        "summary" : "Retrieve license information about this robot",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/system/license/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Retrieve license information about this robot",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "valid_until" : {
                "type" : "number"
              },
              "created_timestamp" : {
                "type" : "number"
              },
              "status" : {
                "type" : "string",
                "enum" : [ "valid", "not_yet_valid", "expired", "missing", "factory" ]
              },
              "valid_from" : {
                "type" : "number"
              }
            }
          },
          "name" : "LicenseResult",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "status" : "valid",
              "valid_until" : 1.7764632E9,
              "created_timestamp" : 1.6187832E9,
              "valid_from" : 1.6187832E9
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/system/license/event" : {
      "subscribe" : {
        "summary" : "event: License information has changed",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "valid_until" : {
                "type" : "number"
              },
              "created_timestamp" : {
                "type" : "number"
              },
              "status" : {
                "type" : "string",
                "enum" : [ "valid", "not_yet_valid", "expired", "missing", "factory" ]
              },
              "valid_from" : {
                "type" : "number"
              }
            }
          },
          "name" : "LicenseResult",
          "examples" : [ {
            "payload" : {
              "id" : "some_id",
              "status" : "valid",
              "valid_until" : 1.7764632E9,
              "created_timestamp" : 1.6187832E9,
              "valid_from" : 1.6187832E9
            }
          } ]
        }
      }
    },
    "zbos/cloud/broker/status/event" : {
      "subscribe" : {
        "summary" : "event: Broker status",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "connected" : {
                "type" : "boolean"
              },
              "graceful" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "BrokerStatus",
          "examples" : [ {
            "payload" : {
              "connected" : true,
              "graceful" : true
            }
          } ]
        }
      }
    },
    "zbos/system/multimedia/rename" : {
      "publish" : {
        "summary" : "Rename file",
        "description" : "Rename a multimedia filesee <<zbos/system/multimedia/rename/response>> for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "path" : {
                "description" : "Path of existing file",
                "type" : "string"
              },
              "name" : {
                "description" : "New name of file with extension",
                "type" : "string"
              }
            }
          },
          "name" : "RenameRequest",
          "examples" : [ {
            "payload" : {
              "path" : "string",
              "name" : "string"
            }
          } ]
        }
      }
    },
    "zbos/system/multimedia/rename/response" : {
      "subscribe" : {
        "summary" : "response: Rename file",
        "description" : "",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      }
    },
    "zbos/system/multimedia/delete/request" : {
      "publish" : {
        "summary" : "Remove a file from the robot",
        "description" : "Removes a file from the robot; limited to files inside of the zbos_media_library directory.see zbos/system/multimedia/delete/response/{key} for response\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "path" : {
                "type" : "string"
              }
            }
          },
          "name" : "DeleteRequest",
          "examples" : [ {
            "payload" : {
              "path" : "string"
            }
          } ]
        }
      }
    },
    "zbos/system/multimedia/delete/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Remove a file from the robot",
        "description" : "Result if file is successfully deleted\n",
        "tags" : [ {
          "name" : "System",
          "description" : "All system related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "error" : {
                "type" : "string",
                "enum" : [ "FILE_NOT_EXIST", "NOT_PERMITTED", "FAILED" ]
              }
            }
          },
          "name" : "DeleteResponse",
          "examples" : [ {
            "payload" : {
              "success" : false,
              "error" : "FILE_NOT_EXIST"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/get/all" : {
      "publish" : {
        "summary" : "Gets all entries",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/taskmanager/entries/get/all/response/{key}" : {
      "subscribe" : {
        "summary" : "Get all entries response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "entries" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "description" : "Entry ID",
                      "type" : "string"
                    },
                    "task" : {
                      "description" : "Task to run",
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "description" : "Type of the task",
                          "type" : "string",
                          "enum" : [ "composition", "single_block" ]
                        },
                        "data" : {
                          "description" : "Data required for the chosen task type",
                          "type" : "object"
                        }
                      }
                    },
                    "trigger" : {
                      "description" : "Trigger that starts the task",
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "description" : "Type of the trigger",
                          "type" : "string",
                          "enum" : [ "sensor", "qr", "monitoring", "motion", "faces", "voice", "mqtt", "domotics", "kiosk_home", "boot" ]
                        },
                        "data" : {
                          "description" : "Data required for the chosen trigger type",
                          "type" : "object"
                        }
                      }
                    },
                    "source" : {
                      "description" : "Source of the entry",
                      "type" : "string",
                      "enum" : [ "system", "user" ]
                    },
                    "priority" : {
                      "description" : "Running priority of the entry",
                      "type" : "string",
                      "enum" : [ "low", "normal", "important", "critical" ]
                    },
                    "weight" : {
                      "description" : "Weight of the entry, to give more granular control besides priority",
                      "type" : "integer"
                    },
                    "concurrent" : {
                      "description" : "Determines if this entry can run concurrently with other entries",
                      "type" : "boolean"
                    },
                    "on_resume" : {
                      "description" : "Determines what should happen if the entry is resumed",
                      "type" : "string",
                      "enum" : [ "restart", "restart_block", "stop" ]
                    },
                    "launch_mode" : {
                      "description" : "Determines what should happen if a trigger is hit when a task is already running.\n- single_first: Allow single simultaneous execution. When a new execution is trying to start, it will not succeed and the previously running execution will continue.\n- single_last: Allow single simultaneous execution. When a new execution is trying to start, the previously running executions will stop.\n- multiple: Allow multiple simultaneous executions.",
                      "type" : "string",
                      "enum" : [ "single_first", "single_last", "multiple" ]
                    },
                    "enabled" : {
                      "description" : "Enabled state of the entry trigger",
                      "type" : "boolean"
                    },
                    "executions" : {
                      "description" : "All current executions of the task",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "id" : {
                            "description" : "Execution ID",
                            "type" : "string"
                          },
                          "state" : {
                            "description" : "Current state of the entry task execution",
                            "type" : "string",
                            "enum" : [ "idle", "running", "paused" ]
                          },
                          "info" : {
                            "description" : "Extra info/metadata about the task execution",
                            "type" : "object"
                          }
                        }
                      }
                    },
                    "info" : {
                      "description" : "Extra info/metadata about the task",
                      "type" : "object"
                    }
                  }
                }
              }
            }
          },
          "name" : "GetTaskManagerEntriesResponse",
          "examples" : [ {
            "payload" : {
              "entries" : [ {
                "id" : "entry_id_1",
                "task" : {
                  "type" : "composition",
                  "data" : {
                    "composition_id" : {
                      "content" : "composition_id_1",
                      "string" : true
                    }
                  }
                },
                "trigger" : {
                  "type" : "sensor",
                  "data" : {
                    "sensors" : [ "sensor_1", "sensor_2" ]
                  }
                },
                "source" : "user",
                "priority" : "normal",
                "weight" : 0,
                "concurrent" : true,
                "enabled" : true,
                "executions" : [ {
                  "id" : "entry_id_1_execution_1",
                  "state" : "running"
                } ],
                "on_resume" : "restart_block",
                "launch_mode" : "single_first"
              } ]
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/get" : {
      "publish" : {
        "summary" : "Get an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry to get",
                "type" : "string"
              }
            }
          },
          "name" : "GetTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Get an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "entry" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "description" : "Entry ID",
                    "type" : "string"
                  },
                  "task" : {
                    "description" : "Task to run",
                    "type" : "object",
                    "properties" : {
                      "type" : {
                        "description" : "Type of the task",
                        "type" : "string",
                        "enum" : [ "composition", "single_block" ]
                      },
                      "data" : {
                        "description" : "Data required for the chosen task type",
                        "type" : "object"
                      }
                    }
                  },
                  "trigger" : {
                    "description" : "Trigger that starts the task",
                    "type" : "object",
                    "properties" : {
                      "type" : {
                        "description" : "Type of the trigger",
                        "type" : "string",
                        "enum" : [ "sensor", "qr", "monitoring", "motion", "faces", "voice", "mqtt", "domotics", "kiosk_home", "boot" ]
                      },
                      "data" : {
                        "description" : "Data required for the chosen trigger type",
                        "type" : "object"
                      }
                    }
                  },
                  "source" : {
                    "description" : "Source of the entry",
                    "type" : "string",
                    "enum" : [ "system", "user" ]
                  },
                  "priority" : {
                    "description" : "Running priority of the entry",
                    "type" : "string",
                    "enum" : [ "low", "normal", "important", "critical" ]
                  },
                  "weight" : {
                    "description" : "Weight of the entry, to give more granular control besides priority",
                    "type" : "integer"
                  },
                  "concurrent" : {
                    "description" : "Determines if this entry can run concurrently with other entries",
                    "type" : "boolean"
                  },
                  "on_resume" : {
                    "description" : "Determines what should happen if the entry is resumed",
                    "type" : "string",
                    "enum" : [ "restart", "restart_block", "stop" ]
                  },
                  "launch_mode" : {
                    "description" : "Determines what should happen if a trigger is hit when a task is already running.\n- single_first: Allow single simultaneous execution. When a new execution is trying to start, it will not succeed and the previously running execution will continue.\n- single_last: Allow single simultaneous execution. When a new execution is trying to start, the previously running executions will stop.\n- multiple: Allow multiple simultaneous executions.",
                    "type" : "string",
                    "enum" : [ "single_first", "single_last", "multiple" ]
                  },
                  "enabled" : {
                    "description" : "Enabled state of the entry trigger",
                    "type" : "boolean"
                  },
                  "executions" : {
                    "description" : "All current executions of the task",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "description" : "Execution ID",
                          "type" : "string"
                        },
                        "state" : {
                          "description" : "Current state of the entry task execution",
                          "type" : "string",
                          "enum" : [ "idle", "running", "paused" ]
                        },
                        "info" : {
                          "description" : "Extra info/metadata about the task execution",
                          "type" : "object"
                        }
                      }
                    }
                  },
                  "info" : {
                    "description" : "Extra info/metadata about the task",
                    "type" : "object"
                  }
                }
              }
            }
          },
          "name" : "GetTaskManagerEntryResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "entry" : {
                "id" : "entry_id_1",
                "task" : {
                  "type" : "composition",
                  "data" : {
                    "composition_id" : {
                      "content" : "composition_id_1",
                      "string" : true
                    }
                  }
                },
                "trigger" : {
                  "type" : "sensor",
                  "data" : {
                    "sensors" : [ "sensor_1", "sensor_2" ]
                  }
                },
                "source" : "user",
                "priority" : "normal",
                "weight" : 0,
                "concurrent" : true,
                "enabled" : true,
                "executions" : [ {
                  "id" : "entry_id_1_execution_1",
                  "state" : "running"
                } ],
                "on_resume" : "restart_block",
                "launch_mode" : "single_first"
              }
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/add" : {
      "publish" : {
        "summary" : "Add an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "task" : {
                "description" : "Task to run",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "description" : "Type of the task",
                    "type" : "string",
                    "enum" : [ "composition", "single_block" ]
                  },
                  "data" : {
                    "description" : "Data required for the chosen task type",
                    "type" : "object"
                  }
                }
              },
              "trigger" : {
                "description" : "Trigger that starts the task",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "description" : "Type of the trigger",
                    "type" : "string",
                    "enum" : [ "sensor", "qr", "monitoring", "motion", "faces", "voice", "mqtt", "domotics", "kiosk_home", "boot" ]
                  },
                  "data" : {
                    "description" : "Data required for the chosen trigger type",
                    "type" : "object"
                  }
                }
              },
              "priority" : {
                "description" : "Running priority of the entry",
                "type" : "string",
                "enum" : [ "low", "normal", "important", "critical" ]
              },
              "weight" : {
                "description" : "Weight of the entry, to give more granular control besides priority",
                "type" : "integer"
              },
              "concurrent" : {
                "description" : "Determines if this entry can run concurrently with other entries",
                "type" : "boolean"
              },
              "on_resume" : {
                "description" : "Determines what should happen if the entry is resumed",
                "type" : "string",
                "enum" : [ "restart", "restart_block", "stop" ]
              },
              "launch_mode" : {
                "description" : "Determines what should happen if a trigger is hit when a task is already running.\n- single_first: Allow single simultaneous execution. When a new execution is trying to start, it will not succeed and the previously running execution will continue.\n- single_last: Allow single simultaneous execution. When a new execution is trying to start, the previously running executions will stop.\n- multiple: Allow multiple simultaneous executions.",
                "type" : "string",
                "enum" : [ "single_first", "single_last", "multiple" ]
              }
            }
          },
          "name" : "AddTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "task" : {
                "type" : "composition",
                "data" : {
                  "composition_id" : {
                    "content" : "composition_id_1",
                    "string" : true
                  }
                }
              },
              "trigger" : {
                "type" : "sensor",
                "data" : {
                  "sensors" : [ "sensor_1", "sensor_2" ]
                }
              },
              "priority" : "normal",
              "weight" : 0,
              "concurrent" : true,
              "on_resume" : "restart_block",
              "launch_mode" : "single_first"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/add/response/{key}" : {
      "subscribe" : {
        "summary" : "Add an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "id" : {
                "description" : "ID of the added entry",
                "type" : "string"
              }
            }
          },
          "name" : "AddTaskManagerEntryResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "id" : "entry_id_1"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/edit" : {
      "publish" : {
        "summary" : "Edit an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the task to edit",
                "type" : "string"
              },
              "task" : {
                "description" : "Task to run",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "description" : "Type of the task",
                    "type" : "string",
                    "enum" : [ "composition", "single_block" ]
                  },
                  "data" : {
                    "description" : "Data required for the chosen task type",
                    "type" : "object"
                  }
                }
              },
              "trigger" : {
                "description" : "Trigger that starts the task",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "description" : "Type of the trigger",
                    "type" : "string",
                    "enum" : [ "sensor", "qr", "monitoring", "motion", "faces", "voice", "mqtt", "domotics", "kiosk_home", "boot" ]
                  },
                  "data" : {
                    "description" : "Data required for the chosen trigger type",
                    "type" : "object"
                  }
                }
              },
              "priority" : {
                "description" : "Running priority of the entry",
                "type" : "string",
                "enum" : [ "low", "normal", "important", "critical" ]
              },
              "weight" : {
                "description" : "Weight of the entry, to give more granular control besides priority",
                "type" : "integer"
              },
              "concurrent" : {
                "description" : "Determines if this entry can run concurrently with other entries",
                "type" : "boolean"
              },
              "on_resume" : {
                "description" : "Determines what should happen if the entry is resumed",
                "type" : "string",
                "enum" : [ "restart", "restart_block", "stop" ]
              },
              "launch_mode" : {
                "description" : "Determines what should happen if a trigger is hit when a task is already running.\n- single_first: Allow single simultaneous execution. When a new execution is trying to start, it will not succeed and the previously running execution will continue.\n- single_last: Allow single simultaneous execution. When a new execution is trying to start, the previously running executions will stop.\n- multiple: Allow multiple simultaneous executions.",
                "type" : "string",
                "enum" : [ "single_first", "single_last", "multiple" ]
              }
            }
          },
          "name" : "EditTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1",
              "task" : {
                "type" : "composition",
                "data" : {
                  "composition_id" : {
                    "content" : "composition_id_1",
                    "string" : true
                  }
                }
              },
              "trigger" : {
                "type" : "sensor",
                "data" : {
                  "sensors" : [ "sensor_1", "sensor_2" ]
                }
              },
              "priority" : "normal",
              "weight" : 0,
              "concurrent" : true,
              "on_resume" : "restart_block",
              "launch_mode" : "single_first"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/edit/response/{key}" : {
      "subscribe" : {
        "summary" : "Edit an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/remove" : {
      "publish" : {
        "summary" : "Remove an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry to remove",
                "type" : "string"
              }
            }
          },
          "name" : "RemoveTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/remove/response/{key}" : {
      "subscribe" : {
        "summary" : "Remove an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/clone" : {
      "publish" : {
        "summary" : "Clone an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry to clone",
                "type" : "string"
              }
            }
          },
          "name" : "CloneTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/clone/response/{key}" : {
      "subscribe" : {
        "summary" : "Clone an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "success" : {
                "type" : "boolean"
              },
              "id" : {
                "description" : "ID of the added entry",
                "type" : "string"
              }
            }
          },
          "name" : "CloneTaskManagerEntryResponse",
          "examples" : [ {
            "payload" : {
              "success" : true,
              "id" : "entry_id_2"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/update/event" : {
      "subscribe" : {
        "summary" : "Entries have been updated",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "entries" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "description" : "Entry ID",
                      "type" : "string"
                    },
                    "task" : {
                      "description" : "Task to run",
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "description" : "Type of the task",
                          "type" : "string",
                          "enum" : [ "composition", "single_block" ]
                        },
                        "data" : {
                          "description" : "Data required for the chosen task type",
                          "type" : "object"
                        }
                      }
                    },
                    "trigger" : {
                      "description" : "Trigger that starts the task",
                      "type" : "object",
                      "properties" : {
                        "type" : {
                          "description" : "Type of the trigger",
                          "type" : "string",
                          "enum" : [ "sensor", "qr", "monitoring", "motion", "faces", "voice", "mqtt", "domotics", "kiosk_home", "boot" ]
                        },
                        "data" : {
                          "description" : "Data required for the chosen trigger type",
                          "type" : "object"
                        }
                      }
                    },
                    "source" : {
                      "description" : "Source of the entry",
                      "type" : "string",
                      "enum" : [ "system", "user" ]
                    },
                    "priority" : {
                      "description" : "Running priority of the entry",
                      "type" : "string",
                      "enum" : [ "low", "normal", "important", "critical" ]
                    },
                    "weight" : {
                      "description" : "Weight of the entry, to give more granular control besides priority",
                      "type" : "integer"
                    },
                    "concurrent" : {
                      "description" : "Determines if this entry can run concurrently with other entries",
                      "type" : "boolean"
                    },
                    "on_resume" : {
                      "description" : "Determines what should happen if the entry is resumed",
                      "type" : "string",
                      "enum" : [ "restart", "restart_block", "stop" ]
                    },
                    "launch_mode" : {
                      "description" : "Determines what should happen if a trigger is hit when a task is already running.\n- single_first: Allow single simultaneous execution. When a new execution is trying to start, it will not succeed and the previously running execution will continue.\n- single_last: Allow single simultaneous execution. When a new execution is trying to start, the previously running executions will stop.\n- multiple: Allow multiple simultaneous executions.",
                      "type" : "string",
                      "enum" : [ "single_first", "single_last", "multiple" ]
                    },
                    "enabled" : {
                      "description" : "Enabled state of the entry trigger",
                      "type" : "boolean"
                    },
                    "executions" : {
                      "description" : "All current executions of the task",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "id" : {
                            "description" : "Execution ID",
                            "type" : "string"
                          },
                          "state" : {
                            "description" : "Current state of the entry task execution",
                            "type" : "string",
                            "enum" : [ "idle", "running", "paused" ]
                          },
                          "info" : {
                            "description" : "Extra info/metadata about the task execution",
                            "type" : "object"
                          }
                        }
                      }
                    },
                    "info" : {
                      "description" : "Extra info/metadata about the task",
                      "type" : "object"
                    }
                  }
                }
              }
            }
          },
          "name" : "TaskManagerEntriesUpdatedEvent",
          "examples" : [ {
            "payload" : {
              "entries" : [ {
                "id" : "entry_id_1",
                "task" : {
                  "type" : "composition",
                  "data" : {
                    "composition_id" : {
                      "content" : "composition_id_1",
                      "string" : true
                    }
                  }
                },
                "trigger" : {
                  "type" : "sensor",
                  "data" : {
                    "sensors" : [ "sensor_1", "sensor_2" ]
                  }
                },
                "source" : "user",
                "priority" : "normal",
                "weight" : 0,
                "concurrent" : true,
                "enabled" : true,
                "executions" : [ {
                  "id" : "entry_id_1_execution_1",
                  "state" : "running"
                } ],
                "on_resume" : "restart_block",
                "launch_mode" : "single_first"
              } ]
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/start" : {
      "publish" : {
        "summary" : "Start an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry task to start",
                "type" : "string"
              }
            }
          },
          "name" : "StartTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/start/response/{key}" : {
      "subscribe" : {
        "summary" : "Start an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/stop" : {
      "publish" : {
        "summary" : "Stop an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry task to stop",
                "type" : "string"
              }
            }
          },
          "name" : "StopTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/stop/response/{key}" : {
      "subscribe" : {
        "summary" : "Stop an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/pause" : {
      "publish" : {
        "summary" : "Pause an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry to pause",
                "type" : "string"
              }
            }
          },
          "name" : "PauseTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/pause/response/{key}" : {
      "subscribe" : {
        "summary" : "Pause an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/resume" : {
      "publish" : {
        "summary" : "Resume an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry to resume",
                "type" : "string"
              }
            }
          },
          "name" : "ResumeTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/resume/response/{key}" : {
      "subscribe" : {
        "summary" : "Resume an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/enable" : {
      "publish" : {
        "summary" : "Enable an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry to enable",
                "type" : "string"
              }
            }
          },
          "name" : "EnableTaskManagerEntryRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "entry_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/entries/enable/response/{key}" : {
      "subscribe" : {
        "summary" : "Enable an entry response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/entries/disable" : {
      "subscribe" : {
        "summary" : "Disable an entry",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the entry to disable",
                "type" : "string"
              }
            }
          },
          "name" : "DisableTaskManagerEntryRequest"
        }
      }
    },
    "zbos/taskmanager/executions/stop" : {
      "publish" : {
        "summary" : "Stop an execution",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the execution to stop",
                "type" : "string"
              }
            }
          },
          "name" : "StopTaskManagerExecutionRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "execution_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/executions/stop/response/{key}" : {
      "subscribe" : {
        "summary" : "Stop an execution response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/executions/pause" : {
      "publish" : {
        "summary" : "Pause an execution",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the execution to pause",
                "type" : "string"
              }
            }
          },
          "name" : "PauseTaskManagerExecutionRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "execution_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/executions/pause/response/{key}" : {
      "subscribe" : {
        "summary" : "Pause an execution response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/executions/resume" : {
      "publish" : {
        "summary" : "Resume an execution",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "id" : {
                "description" : "ID of the execution to resume",
                "type" : "string"
              }
            }
          },
          "name" : "ResumeTaskManagerExecutionRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "id" : "execution_id_1"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/executions/resume/response/{key}" : {
      "subscribe" : {
        "summary" : "Resume an execution response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/triggers/get" : {
      "publish" : {
        "summary" : "Gets all triggers",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "language" : {
                "description" : "Optional. Set the language to have all translations filled in.\nThe language format is ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              }
            }
          },
          "name" : "GetTaskManagerTriggersRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "language" : "en-US"
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/triggers/get/response/{key}" : {
      "subscribe" : {
        "summary" : "Gets all triggers response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "triggers" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "description" : "Type of the trigger",
                      "type" : "string",
                      "enum" : [ "sensor", "qr", "monitoring", "motion", "faces", "voice", "mqtt", "domotics", "kiosk_home", "boot" ]
                    },
                    "label" : {
                      "description" : "Human-readable label",
                      "type" : "string"
                    },
                    "label_key" : {
                      "description" : "Translation key for human-readable label",
                      "type" : "string"
                    },
                    "components" : {
                      "description" : "Components that should be shown when the user selects a trigger type",
                      "type" : "object"
                    }
                  }
                }
              }
            }
          },
          "name" : "GetTaskManagerTriggersResponse",
          "examples" : [ {
            "payload" : {
              "triggers" : [ {
                "type" : "sensor",
                "label" : "Sensor",
                "components" : {
                  "sensors" : {
                    "type" : "select_multi",
                    "options" : [ {
                      "key" : "sensor_1",
                      "value" : "Sensor 1",
                      "label_key" : "translations_category.trigger_sensor_option_1"
                    }, {
                      "key" : "sensor_2",
                      "value" : "Sensor 2",
                      "label_key" : "translations_category.trigger_sensor_option_2"
                    } ],
                    "label_key" : "translations_category.trigger_sensor_components_sensor"
                  }
                },
                "label_key" : "translations_category.trigger_sensor"
              } ]
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/taskmanager/reset" : {
      "publish" : {
        "summary" : "Reset the task manager to the factory state",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "description" : "Required key",
                "type" : "string"
              },
              "delete_user_entries" : {
                "description" : "Set true to delete all user generated entries. Otherwise this will only disable them.",
                "type" : "boolean"
              }
            }
          },
          "name" : "ResetTaskManagerEntriesRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "delete_user_entries" : true
            }
          } ]
        }
      }
    },
    "zbos/taskmanager/reset/response/{key}" : {
      "subscribe" : {
        "summary" : "Reset the task manager to the factory state response",
        "description" : "",
        "tags" : [ {
          "name" : "Task Manager",
          "description" : "All task manager related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/time/info/get" : {
      "publish" : {
        "summary" : "Get Time information, such as the accuracy",
        "description" : "see <<zbos/time/info/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/time/info/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Time information",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "accurate" : {
                "type" : "boolean"
              }
            }
          },
          "name" : "TimeInfo",
          "examples" : [ {
            "payload" : {
              "accurate" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/quiet/hours" : {
      "publish" : {
        "summary" : "Quiet hours",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/scheduler/save" : {
      "publish" : {
        "summary" : "Save schedule",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/scheduler/save/event" : {
      "subscribe" : {
        "summary" : "event: Schedule saved",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleScheduler",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "string"
            }
          } ]
        }
      }
    },
    "zbos/scheduler/load" : {
      "publish" : {
        "summary" : "Get schedule",
        "description" : "see <<zbos/scheduler/load/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleScheduler",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/scheduler/load/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get schedule",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/scheduler/delete" : {
      "publish" : {
        "summary" : "Delete schedule",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleScheduler",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/scheduler/delete/event" : {
      "subscribe" : {
        "summary" : "event: Schedule deleted",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/scheduler/list/get" : {
      "publish" : {
        "summary" : "Get all schedules",
        "description" : "see <<zbos/scheduler/list/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/scheduler/list/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get all schedules",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "Array<SimpleScheduler>",
          "examples" : [ {
            "payload" : {
              "id" : "string",
              "name" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/scheduler/start" : {
      "publish" : {
        "summary" : "Start schedule by name",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleScheduler",
          "examples" : [ {
            "payload" : {
              "name" : "string"
            }
          } ]
        }
      }
    },
    "zbos/scheduler/start/event" : {
      "subscribe" : {
        "summary" : "event: Started schedule",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/scheduler/start/id" : {
      "publish" : {
        "summary" : "Start schedule by id",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "name" : "SimpleScheduler",
          "examples" : [ {
            "payload" : {
              "id" : "string"
            }
          } ]
        }
      }
    },
    "zbos/scheduler/stop" : {
      "publish" : {
        "summary" : "Stop schedule",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/scheduler/stop/event" : {
      "subscribe" : {
        "summary" : "event: Schedule stopped",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      }
    },
    "zbos/scheduler/current/get" : {
      "publish" : {
        "summary" : "Get current schedule",
        "description" : "see <<zbos/scheduler/current/get/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/scheduler/current/get/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get current schedule",
        "description" : "",
        "tags" : [ {
          "name" : "Time",
          "description" : "All time related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "string"
          },
          "name" : "String"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/translations/get" : {
      "publish" : {
        "summary" : "Get translations",
        "description" : "Get translations for the provided category and language.\nYou have two ways to get the translations: either pass the category + the corresponding keys,\nor only pass the keys, but prefix each one with the category and a dot. Eg: {category}.{key}\n\n",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "category" : {
                "description" : "Optional when using the dot notation in the translations keys.",
                "type" : "string"
              },
              "language" : {
                "description" : "ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              },
              "translation_keys" : {
                "description" : "Optional if the category is set. In that case it will return all translations for that category.",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "name" : "GetTranslationsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "category" : "category_1",
              "language" : "en-US"
            }
          }, {
            "payload" : {
              "key" : "abc",
              "category" : "category_1",
              "language" : "en-US",
              "translation_keys" : [ "translation_key_1", "translation_key_2" ]
            }
          }, {
            "payload" : {
              "key" : "abc",
              "language" : "en-US",
              "translation_keys" : [ "category_1.translation_key_1", "category_1.translation_key_2" ]
            }
          } ]
        }
      }
    },
    "zbos/translations/get/response/{key}" : {
      "publish" : {
        "summary" : "Response: Get translations",
        "description" : "",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "translations" : {
                "type" : "object"
              }
            }
          },
          "name" : "GetTranslationsResponse",
          "examples" : [ {
            "payload" : {
              "translations" : {
                "translation_key_1" : "Translation 1",
                "translation_key_2" : "Translation 2"
              },
              "valid" : true
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/translations/request" : {
      "publish" : {
        "summary" : "Request translation registrations",
        "description" : "Request all translation providers to register their translations using the topics below.\n",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/emptyMessage"
        }
      }
    },
    "zbos/translations/add" : {
      "publish" : {
        "summary" : "Add translations",
        "description" : "Add translations with their default values.\nThese default values will be used as long as they are not updated via zbos/translations/update\n",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "category" : {
                "type" : "string"
              },
              "language" : {
                "description" : "ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              },
              "file" : {
                "description" : "Optional. Use either translations or file.\nThe file location should be a path accessible for the RAIL.\nThe content should be a json object with key-value pairs.\nDots (.) are not allowed in the keys and will be replaced with underscores (_)\"",
                "type" : "string"
              },
              "translations" : {
                "description" : "Optional. Use either translations or file\nDots (.) are not allowed in the keys and will be replaced with underscores (_)",
                "type" : "object"
              }
            }
          },
          "name" : "AddTranslationsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "category" : "category_1",
              "language" : "en-US",
              "translations" : {
                "translation_key_1" : "Translation 1",
                "translation_key_2" : "Translation 2"
              },
              "valid" : true
            }
          }, {
            "payload" : {
              "key" : "abc",
              "category" : "category_1",
              "language" : "en-US",
              "file" : "path/to/file.json",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/translations/add/response/{key}" : {
      "publish" : {
        "summary" : "Response: Add translations",
        "description" : "",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/translations/update" : {
      "publish" : {
        "summary" : "Update translations",
        "description" : "Update translations overriding the default values.\n",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "category" : {
                "type" : "string"
              },
              "language" : {
                "description" : "ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              },
              "file" : {
                "description" : "Optional. Use either translations or file.\nThe file location should be a path accessible for the RAIL.\nThe content should be a json object with key-value pairs.",
                "type" : "string"
              },
              "translations" : {
                "description" : "Optional. Use either translations or file",
                "type" : "object"
              }
            }
          },
          "name" : "UpdateTranslationsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "category" : "category_1",
              "language" : "en-US",
              "translations" : {
                "translation_key_1" : "Translation 1",
                "translation_key_2" : "Translation 2"
              },
              "valid" : true
            }
          }, {
            "payload" : {
              "key" : "abc",
              "category" : "category_1",
              "language" : "en-US",
              "file" : "path/to/file.json",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/translations/update/response/{key}" : {
      "publish" : {
        "summary" : "Response: Update translations",
        "description" : "",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/translations/changed/event/{category}" : {
      "publish" : {
        "summary" : "Event: Translations changed",
        "description" : "",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "category" : {
                "type" : "string"
              },
              "language" : {
                "description" : "ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              }
            }
          },
          "name" : "TranslationsChangedEvent",
          "examples" : [ {
            "payload" : {
              "category" : "category_1",
              "language" : "en-US",
              "valid" : true
            }
          } ]
        }
      },
      "parameters" : {
        "category" : {
          "description" : "ID of the translations category that was changed",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/translations/reset" : {
      "publish" : {
        "summary" : "Reset translations",
        "description" : "Reset translations to their default values\n",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "category" : {
                "type" : "string"
              },
              "language" : {
                "description" : "ISO 639-1 language code, Eg: 'en' or 'en-US'",
                "type" : "string"
              }
            }
          },
          "name" : "ResetTranslationsRequest",
          "examples" : [ {
            "payload" : {
              "key" : "abc",
              "category" : "category_1",
              "language" : "en-US",
              "valid" : true
            }
          } ]
        }
      }
    },
    "zbos/translations/reset/response/{key}" : {
      "publish" : {
        "summary" : "Response: Reset translations",
        "description" : "",
        "tags" : [ {
          "name" : "Translations",
          "description" : "All translations related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/successMessage"
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/variables/get" : {
      "publish" : {
        "summary" : "Get all variables",
        "description" : "see <<zbos/variables/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Variables",
          "description" : "All variables related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/variables/response/{key}" : {
      "subscribe" : {
        "summary" : "response: Get all variables",
        "description" : "",
        "tags" : [ {
          "name" : "Variables",
          "description" : "All variables related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "variables" : {
                "description" : "A list of all variables, not present when status is false.",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "value" : {
                      "type" : "string"
                    },
                    "id" : {
                      "type" : "string"
                    },
                    "state" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "status" : {
                "description" : "Will be present when status is false (error message)",
                "type" : "boolean"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "name" : "GlobalVariables",
          "examples" : [ {
            "payload" : {
              "variables" : [ {
                "name" : "string",
                "value" : "string"
              } ],
              "status" : true,
              "message" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    },
    "zbos/variables/set" : {
      "publish" : {
        "summary" : "Set variables",
        "description" : "Saving the global variables on the robot.see <<zbos/variables/set/response/{key}>> for response\n",
        "tags" : [ {
          "name" : "Variables",
          "description" : "All variables related topics."
        } ],
        "message" : {
          "$ref" : "#/components/messages/keyMessage"
        }
      }
    },
    "zbos/variables/set/response/{key}" : {
      "subscribe" : {
        "summary" : "response: indicates if the save was successful or not",
        "description" : "",
        "tags" : [ {
          "name" : "Variables",
          "description" : "All variables related topics."
        } ],
        "message" : {
          "payload" : {
            "type" : "object",
            "properties" : {
              "variables" : {
                "description" : "A list of all variables, not present when status is false.",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "value" : {
                      "type" : "string"
                    },
                    "id" : {
                      "type" : "string"
                    },
                    "state" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "status" : {
                "description" : "Will be present when status is false (error message)",
                "type" : "boolean"
              },
              "message" : {
                "type" : "string"
              }
            }
          },
          "name" : "GlobalVariables",
          "examples" : [ {
            "payload" : {
              "variables" : [ {
                "name" : "string",
                "value" : "string"
              } ],
              "status" : true,
              "message" : "string"
            }
          } ]
        }
      },
      "parameters" : {
        "key" : {
          "description" : "Request key to create a unique subscription topic",
          "schema" : {
            "type" : "string"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "percentage" : {
        "description" : "Percentage value between with range 0 to 100",
        "type" : "integer",
        "maximum" : 100,
        "minimum" : 0
      },
      "key" : {
        "description" : "Required random key",
        "type" : "string"
      }
    },
    "messages" : {
      "emptyMessage" : {
        "name" : "EmptyMessage",
        "summary" : "Empty message"
      },
      "keyMessage" : {
        "payload" : {
          "type" : "object",
          "properties" : {
            "key" : {
              "description" : "Required random key",
              "type" : "string"
            }
          }
        },
        "name" : "KeyResult",
        "summary" : "Random key",
        "examples" : [ {
          "payload" : {
            "key" : "ABCxyz"
          }
        } ]
      },
      "successMessage" : {
        "payload" : {
          "type" : "object",
          "properties" : {
            "success" : {
              "type" : "boolean"
            },
            "message" : {
              "description" : "Optional error message",
              "type" : "string"
            }
          }
        },
        "name" : "SuccessMessage",
        "summary" : "Success message",
        "examples" : [ {
          "payload" : {
            "success" : true
          }
        } ]
      },
      "notificationMessage" : {
        "payload" : {
          "type" : "object",
          "properties" : {
            "message" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string"
                },
                "translate" : {
                  "type" : "boolean"
                },
                "formatArguments" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "translationCategory" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "name" : "NotificationOptions",
        "summary" : "Message json",
        "examples" : [ {
          "payload" : {
            "message" : {
              "message" : "string",
              "translate" : true,
              "formatArguments" : [ "string" ]
            }
          }
        } ]
      }
    }
  },
  "tags" : [ {
    "name" : "Speech",
    "description" : "All speech related topics."
  }, {
    "name" : "Motion",
    "description" : "All motion related topics."
  }, {
    "name" : "Audio",
    "description" : "All audio related topics."
  }, {
    "name" : "Status",
    "description" : "All status related topics."
  }, {
    "name" : "System",
    "description" : "All system related topics."
  }, {
    "name" : "Sensors",
    "description" : "All sensors related topics."
  }, {
    "name" : "Leds",
    "description" : "All leds related topics."
  }, {
    "name" : "Composer",
    "description" : "All composer related topics."
  }, {
    "name" : "Kiosk",
    "description" : "All kiosk related topics."
  }, {
    "name" : "Media",
    "description" : "All media related topics."
  }, {
    "name" : "Applications",
    "description" : "All applications related topics."
  }, {
    "name" : "Translations",
    "description" : "All translations related topics."
  }, {
    "name" : "Settings",
    "description" : "All settings related topics."
  }, {
    "name" : "Camera",
    "description" : "All camera related topics."
  }, {
    "name" : "Domotics",
    "description" : "All domotics related topics."
  }, {
    "name" : "Cloud",
    "description" : "All cloud related topics."
  }, {
    "name" : "SLAM",
    "description" : "All slam related topics."
  }, {
    "name" : "Wifi",
    "description" : "All wifi related topics."
  }, {
    "name" : "Connection",
    "description" : "All connection related topics."
  }, {
    "name" : "Survey",
    "description" : "All survey related topics."
  }, {
    "name" : "Motion detection",
    "description" : "All motion detection related topics."
  }, {
    "name" : "Face tracking",
    "description" : "All face tracking related topics."
  }, {
    "name" : "SIP",
    "description" : "All sip related topics."
  }, {
    "name" : "Time",
    "description" : "All time related topics."
  }, {
    "name" : "Variables",
    "description" : "All variables related topics."
  }, {
    "name" : "Diagnostics",
    "description" : "All diagnostics related topics."
  } ]
}